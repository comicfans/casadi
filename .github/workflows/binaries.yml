name: binaries

on: [push, pull_request]

env:
  cache-suffix: v8
  build_flags: "-DWITH_COMMON=OFF -DWITH_BUILD_REQUIRED=ON -DWITH_BUILD_BONMIN=ON -DWITH_BONMIN=ON -DWITH_IPOPT=ON -DWITH_BUILD_IPOPT=ON -DWITH_BUILD_LAPACK=ON -DWITH_LAPACK=ON -DWITH_MUMPS=ON -DWITH_CLP=ON -DWITH_BUILD_CLP=ON -DWITH_CBC=ON -DWITH_BUILD_CBC=ON -DWITH_THREAD=ON -DWITH_QPOASES=ON -DWITH_HPIPM=ON -DWITH_BLASFEO=ON -DWITH_BUILD_HPIPM=ON -DWITH_BUILD_BLASFEO=ON -DWITH_HIGHS=ON -DWITH_BUILD_HIGHS=ON -DWITH_BUILD_SPRAL=ON -DWITH_SPRAL=ON -DWITH_PROXQP=ON -DWITH_OSQP=ON -DWITH_SUPERSCS=ON -DWITH_KNITRO=ON -DWITH_MOCKUP_KNITRO=ON -DWITH_CPLEX=ON -DWITH_MOCKUP_CPLEX=ON -DWITH_GUROBI=ON -DWITH_MOCKUP_GUROBI=ON -DWITH_HSL=ON -DWITH_MOCKUP_HSL=ON -DWITH_WORHP=ON -DWITH_MOCKUP_WORHP=ON -DWITH_SUNDIALS=ON -DWITH_BUILD_SUNDIALS=ON -DWITH_BUILD_CSPARSE=ON -DWITH_BUILD_METIS=ON -DWITH_BUILD_BLASFEO=ON -DWITH_BUILD_SUPERSCS=ON -DWITH_BUILD_OSQP=ON -DWITH_BUILD_EIGEN3=ON -DWITH_BUILD_SIMDE=ON -DWITH_BUILD_PROXQP=ON -DWITH_SNOPT=ON -DWITH_MOCKUP_SNOPT=ON -DWITH_AMPL=ON -DWITH_BLOCKSQP=ON -DWITH_SLEQP=ON -DWITH_SLEQP_BUILD=ON -DWITH_ALPAQA=ON -DWITH_BUILD_ALPAQA=ON"
  build_flags_manylinux1: "-DWITH_HIGHS=OFF -DWITH_BUILD_HIGHS=OFF -DWITH_BUILD_SPRAL=OFF -DWITH_SPRAL=OFF -DWITH_PROXQP=OFF -DWITH_BUILD_PROXQP=OFF -DWITH_BUILD_EIGEN3=OFF -DWITH_BUILD_SIMDE=OFF -DWITH_SLEQP=OFF -DWITH_BUILD_SLEQP=OFF -DWITH_BUILD_ALPAQA=OFF -DWITH_ALPAQA=OFF -DWITH_BQPD=OFF -DWITH_UNO=OFF"

jobs:
  version:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - run: |
          echo "CMAKE_VERSION=$(python misc/get_version.py)" >> $GITHUB_ENV
      - run: |
          echo "CASADI_VERSION=${{ env.GITHUB_REF_SLUG }}" >> $GITHUB_ENV
          echo "WHEEL_VERSION=${{ env.CMAKE_VERSION}}.dev+${{ env.GITHUB_REF_SLUG }}" >> $GITHUB_ENV
        if: "!contains( env.GITHUB_REF_NAME , 'release-' )"
      - run: |
          python -c "print('CASADI_VERSION='+'${{ env.GITHUB_REF_SLUG }}'.split('-')[1])" >> $GITHUB_ENV
          python -c "print('WHEEL_VERSION='+'${{ env.GITHUB_REF_SLUG }}'.split('-')[1])" >> $GITHUB_ENV
        if: contains( env.GITHUB_REF_NAME , 'release-' )
      - run: echo "CMAKE_VERSION=${{ env.CMAKE_VERSION }}, CASADI_VERSION=${{ env.CASADI_VERSION }}, WHEEL_VERSION=${{ env.WHEEL_VERSION }}"
    outputs:
      casadi: ${{ env.CASADI_VERSION }}
      wheel: ${{ env.WHEEL_VERSION }}

  swig:
    runs-on: ubuntu-20.04
    needs: [version]
    steps:

    - uses: actions/checkout@v3.3.0
      with:
        fetch-depth: 0 # for git-restore-mtime
    - uses: chetan/git-restore-mtime-action@v1.2
          
    - name: generate Python 3
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON3=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"
    
    - name: set CMAKE default options
      run: |
         sed -i 's/option(SWIG_IMPORT "Import SWIG" OFF)/option(SWIG_IMPORT "Import SWIG" ON)/g' CMakeLists.txt

    - name: build archives
      run: |
        zip -rq ../casadi_source.zip . --exclude '.*' --exclude '*/.*' --exclude 'appveyor.yml'
        mv ../casadi_source.zip casadi_source.zip
    
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4.4.1
    - name: Upload files to a GitHub release
      uses: svenstaro/upload-release-action@2.4.0
      with:
        overwrite: true
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        file: casadi_source.zip
        asset_name: casadi-source-v${{ needs.version.outputs.casadi }}.zip
        prerelease: true
      if: github.event_name != 'pull_request'
    - run: python setup.py sdist && ls && ls dist
    - name: Delete old release assets
      uses: jgillis/delete-release-assets@main
      with:
        token: ${{ github.token }}
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        assets: "*.tar.gz"
        fail-if-no-release: false
        fail-if-no-assets: false
      if: github.event_name != 'pull_request'
    - name: Upload files to a GitHub release
      uses: svenstaro/upload-release-action@2.4.0
      with:
        overwrite: true
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        file: dist/*.tar.gz
        file_glob: true
        prerelease: true
      if: github.event_name != 'pull_request'

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: casadi_source_wrapper
        path: casadi_source.zip

  test-python-source-package:
    runs-on: ${{matrix.image == 'macos-m1' && 'self-hosted' || matrix.image }}
    needs: [swig]
    strategy:
     fail-fast: false
     matrix:
       image: ["ubuntu-20.04"]
    steps:
      - uses: actions/checkout@v3.3.0
      - run: python --version
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - uses: dsaltares/fetch-gh-release-asset@1.1.0
        with:
          version: tags/nightly-${{ env.GITHUB_REF_SLUG }}
          regex: true
          target: "./"
          file: "casadi-.*.tar.gz"
      - uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          python-version: 3.8
          activate-environment: 3.8
          auto-update-conda: true
      - run: pip install casadi-*.tar.gz
        shell: bash -el {0}
      - run: cd test/python && python implicitfunction.py
        shell: bash -el {0}

  core-dockcross:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [manylinux1-x64,manylinux2014-x64]
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # for git-restore-mtime
          submodules: recursive
      - uses: chetan/git-restore-mtime-action@v1.2
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.target }}:production
          docker image inspect ghcr.io/jgillis/${{ matrix.target }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.target }}:production ghcr.io/jgillis/${{ matrix.target }}:production > dockcross
          chmod +x dockcross
          pwd
          ls -al dockcross
      - name: Cache build dir
        uses: actions/cache@v3.2.3
        with:
          key: core-build-${{ matrix.target }}-${{env.cache-suffix}}
          path: build
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.target }}
      - name: Build
        run: |
          rm -f build/CMakeCache.txt
          ./dockcross cmake -Bbuild -DWITH_SELFCONTAINED=ON ${{env.build_flags}} ${{ contains(matrix.target,'manylinux1') && env.build_flags_manylinux1 || ''}} -DCMAKE_PREFIX_PATH=/work/mockups/cmake -H.

          # In MXE land, (cross).pkg-config does not listen to PKG_CONFIG_PATH straight see https://mxe.cc/#tutorial-4
          # Needed to make CoinUtils work
          ./dockcross --args "--env PKG_CONFIG_PATH_x86_64_w64_mingw32_shared_posix=/work/build/external_projects/lib64/pkgconfig:/work/build/external_projects/lib/pkgconfig:/work/build/external_projects/share/pkgconfig" -- /work/.github/workflows/patch_toolchain cmake --build build -v
      - run: zip -rq ${{github.job}}-${{matrix.target}}.zip build
      - uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{github.job}}-${{ matrix.target}}
          path: ${{github.job}}-${{matrix.target}}.zip
          retention-days: 5
          
  matrix-arch-py2:
    runs-on: ubuntu-20.04
    steps:
      - id: build-matrix
        uses: jgillis/setup-build-matrix@v1.2.0-if
        with:
          config: |
            matrix:
              arch: [manylinux1-x64]
              py2: ["35"]
            operations:
              - type: append
                matrix:
                  arch: [manylinux2014-x64]
                  py2: ["310"]

    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
  
      
  python-dockcross:
    needs: [core-dockcross,matrix-arch-py2,swig,version]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-arch-py2.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v3.0.2
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - run: cat CMakeLists.txt
      - uses: actions/download-artifact@v3.0.2
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.arch }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.arch }}:production ghcr.io/jgillis/${{ matrix.arch }}:production > dockcross
          chmod +x dockcross
      - run: echo ${{env.GITHUB_WORKSPACE}}
      - run: cat $GITHUB_ENV
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.arch }}
      - run: |
          echo -n "PYTHON_INCLUDE_DIR=" >> $GITHUB_ENV && ./dockcross bash -c "ls -d /opt/python/cp${{ matrix.py2 }}*/include/python* | head -n 1" >> $GITHUB_ENV && tail $GITHUB_ENV
      - name: (windows target only) get Python
        if: contains(matrix.arch, 'windows')
        run: |
          archx=$(python -c "print([e for e in '${{matrix.arch}}'.split('-') if e.startswith('x')][0])")
          wget https://github.com/casadi/artifacts/releases/download/evergreen/windows_python${{ matrix.py2 }}_$archx.zip -O python.zip && unzip python.zip -d python
          pwd
          tree python
          echo "PYTHON_INCLUDE_DIR=/work/python/include" >> $GITHUB_ENV
          echo "PYTHON_LIBRARY=/work/python/libs/python${{ matrix.py2 }}.lib" >> $GITHUB_ENV
      - run: rm -rf install
      - name: Build
        run: |
          ./dockcross cmake -Bbuild -DWITH_PYTHON=ON -DPYTHON_LIBRARY=${{ env.PYTHON_LIBRARY}} -DPYTHON_INCLUDE_DIR=${{ env.PYTHON_INCLUDE_DIR }} -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install -DSKIP_CONFIG_H_GENERATION=ON
          ./dockcross cmake --build build --target install -v
      - uses: kanga333/variable-mapper@v0.3.0
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux", "bitness": "64", "suffix":"64"},
              "manylinux2014-x86": {"os": "linux", "bitness": "32", "suffix":"32"},
           }
          export_to: env
      - uses: jgillis/universal_grafter@master
        if: "!contains(matrix.arch, 'windows')"
        with:
          source_path: install/casadi
          destination_path: install/casadi
          dockcross: ${{ matrix.arch }}
          bitness: ${{env.bitness}}
      - run: |
             cd install
             echo "This file (and the casadi directory) should end up in a folder called 'casadi-${{env.os}}${{env.suffix}}-py${{matrix.py2}}'" > dummy.txt
             zip -rq ../casadi-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip .
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - run: cp casadi-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip casadi-${{ needs.version.outputs.casadi }}-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip
      - name: Delete old release assets
        uses: jgillis/delete-release-assets@main
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-*-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip
          fail-if-no-release: false
          fail-if-no-assets: false
        if: github.event_name != 'pull_request'
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{ needs.version.outputs.casadi }}-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip
          prerelease: true
        if: github.event_name != 'pull_request'
      - uses: actions/upload-artifact@v3.1.2
        with:
          name: casadi-${{env.os}}${{env.suffix}}-py${{matrix.py2}}
          path: casadi-${{env.os}}${{env.suffix}}-py${{matrix.py2}}.zip
          retention-days: 5
      
      - run: |
          pip install wheel==0.31.1
          wheel=$(python misc/create_wheel_local.py ${{ needs.version.outputs.wheel }} ${{matrix.py2}} ${{env.os}} ${{env.bitness}} ${{matrix.arch}} install/)
          echo "<$wheel>"
          echo "wheel=$wheel" >> $GITHUB_OUTPUT
          wheel_wildcard=$(echo $wheel | sed -e 's/casadi-[^-]*-/casadi-\*-/')
          echo "wheel=$wheel" >> $GITHUB_OUTPUT
          echo "<$wheel_wildcard>"
          echo "<$wheel_wildcard2>"
          echo "wheel_wildcard=$wheel_wildcard" >> $GITHUB_OUTPUT
        id: wheel
      - name: Delete old release assets
        uses: jgillis/delete-release-assets@main
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: ${{ steps.wheel.outputs.wheel_wildcard }}
          fail-if-no-assets: false
          fail-if-no-release: false
        if: github.event_name != 'pull_request'
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.4.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: ${{ steps.wheel.outputs.wheel }}
          prerelease: true
        if: github.event_name != 'pull_request'
