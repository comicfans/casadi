# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _casadi
else:
    import _casadi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

CASADI_INT_TYPE_STR = _casadi.CASADI_INT_TYPE_STR
SOLVER_RET_SUCCESS = _casadi.SOLVER_RET_SUCCESS
SOLVER_RET_UNKNOWN = _casadi.SOLVER_RET_UNKNOWN
SOLVER_RET_LIMITED = _casadi.SOLVER_RET_LIMITED
SOLVER_RET_NAN = _casadi.SOLVER_RET_NAN
SOLVER_RET_INFEASIBLE = _casadi.SOLVER_RET_INFEASIBLE


import contextlib

class _copyableObject(object):
  def __copy__(self):
    return self.__class__(self)

  def __deepcopy__(self,dummy=None):
    return self.__class__(self)

_object = object = _copyableObject

_swig_repr_default = _swig_repr
def _swig_repr(self):
  if hasattr(self,'repr'):
    return self.repr()
  else:
    return _swig_repr_default(self)

def DM_from_array(m, check_only=True):
  import numpy as np
  if isinstance(m, np.ndarray):
    if len(m.shape)>2:
      return False
    try:
      m = m.astype(float,casting="same_kind",copy=False)
    except:
      return False
    if check_only:
      return True
    else:
      shape = m.shape + (1, 1)
      nrow, ncol = shape[0], shape[1]
      return (nrow,ncol,m.flat)
  return False

def IM_from_array(m, check_only=True):
  import numpy as np
  if isinstance(m, np.ndarray):
    if len(m.shape)>2:
      return False
    try:
      m = m.astype(int,casting="same_kind",copy=False)
    except:
      return False
    if check_only:
      return True
    else:
      shape = m.shape + (1, 1)
      nrow, ncol = shape[0], shape[1]
      return (nrow,ncol,m.flat)
  return False

def SX_from_array(m, check_only=True):
  import numpy as np
  if isinstance(m, np.ndarray):
    if len(m.shape)>2:
      return False
    if m.dtype!=object: return None
    shape = m.shape + (1, 1)
    nrow, ncol = shape[0], shape[1]
    return (nrow,ncol,m.flat)
  return False

def DM_from_csc(m, check_only=True):
  if hasattr(m,"tocsc"):
    m = m.tocsc()
  if m.__class__.__name__ == "csc_matrix":
    if len(m.shape)!=2: return False
    if check_only: return True
    return m.shape + (m.indptr.flat,m.indices.flat,m.data.flat)
  return False


MNAME = _casadi.MNAME

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _casadi.delete_SwigPyIterator

    def value(self, *args):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _casadi.SwigPyIterator_value(self, *args)

    def incr(self, *args):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _casadi.SwigPyIterator_incr(self, *args)

    def decr(self, *args):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _casadi.SwigPyIterator_decr(self, *args)

    def distance(self, *args):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _casadi.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _casadi.SwigPyIterator_equal(self, *args)

    def copy(self, *args):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _casadi.SwigPyIterator_copy(self, *args)

    def next(self, *args):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _casadi.SwigPyIterator_next(self, *args)

    def __next__(self, *args):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _casadi.SwigPyIterator___next__(self, *args)

    def previous(self, *args):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _casadi.SwigPyIterator_previous(self, *args)

    def advance(self, *args):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _casadi.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _casadi.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _casadi.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _casadi.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _casadi.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _casadi.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _casadi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _casadi:
_casadi.SwigPyIterator_swigregister(SwigPyIterator)
L_INT = _casadi.L_INT

L_BOOL = _casadi.L_BOOL

LL = _casadi.LL

LR = _casadi.LR

L_DICT = _casadi.L_DICT

L_DOUBLE = _casadi.L_DOUBLE

L_STR = _casadi.L_STR

LABEL = _casadi.LABEL


if __name__ != "casadi.casadi":
  raise Exception("""
            CasADi is not running from its package context.

            You probably specified the wrong casadi directory.

            When setting PYTHONPATH or sys.path.append,
            take care not to add a trailing '/casadi'.

        """)

def swigtypeconvertor(*args):
  return swig_typename_convertor_python2cpp(args)

def swig_typename_convertor_python2cpp(a):
  try:
    import numpy as np
  except:
    class NoExist:
      pass
    class Temp(object):
      ndarray = NoExist
    np = Temp()
  if isinstance(a,list):
    if len(a)>0:
      return "[%s]" % "|".join(set([swig_typename_convertor_python2cpp(i) for i in a]))
    else:
      return "[]"
  elif isinstance(a,tuple):
    return "(%s)" % ",".join([swig_typename_convertor_python2cpp(i) for i in a])
  elif isinstance(a,np.ndarray):
    return "np.array(%s)" % ",".join(set([swig_typename_convertor_python2cpp(i) for i in np.array(a).flatten().tolist()]))
  elif isinstance(a,dict):
    if len(a)>0:
      return "|".join(set([swig_typename_convertor_python2cpp(i) for i in a.keys()])) +":"+ "|".join(set([swig_typename_convertor_python2cpp(i) for i in a.values()]))
    else:
      return "dict"
  return type(a).__name__


try:
  from numpy import pi, inf
except:
  pass

arcsin = lambda x: _casadi.asin(x)
arccos = lambda x: _casadi.acos(x)
arctan = lambda x: _casadi.atan(x)
arctan2 = lambda x,y: _casadi.atan2(x, y)
arctanh = lambda x: _casadi.atanh(x)
arcsinh = lambda x: _casadi.asinh(x)
arccosh = lambda x: _casadi.acosh(x)


def veccat(*args):
    try:
        if len(args)==0:
            return DM(0,1)
    except:
        pass
    return _veccat(args)
def vertcat(*args):
    try:
        if len(args)==0:
            return DM(0,1)
    except:
        pass
    return _vertcat(args)
def horzcat(*args):
    try:
        if len(args)==0:
            return DM(1,0)
    except:
        pass
    return _horzcat(args)
def diagcat(*args):
    try:
        if len(args)==0:
            return DM(0,0)
    except:
        pass
    return _diagcat(args)
def vvcat(args):
    try:
        if len(args)==0:
            return DM(0,1)
    except:
        pass
    return _veccat(args)
def vcat(args):
    try:
        if len(args)==0:
            return DM(0,1)
    except:
        pass
    return _vertcat(args)
def hcat(args):
    try:
        if len(args)==0:
            return DM(1,0)
    except:
        pass
    return _horzcat(args)
def dcat(args):
    try:
        if len(args)==0:
            return DM(0,0)
    except:
        pass
    return _diagcat(args)


class NZproxy:
  def __init__(self,matrix):
    self.matrix = matrix

  def __getitem__(self,s):
    return self.matrix.get_nz(False, s)

  def __setitem__(self,s,val):
    return self.matrix.set_nz(val, False, s)

  def __len__(self):
    return self.matrix.nnz()

  def __iter__(self):
    for i in range(len(self)):
      yield self[i]


class PrintableCommon(object):
    r"""Proxy of C++ casadi::PrintableCommon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __str__(self): return self.str()
    def repr(self): return self.type_name() + '(' + self.str() + ')'


    def __init__(self, *args):
        r"""
        __init__(PrintableCommon self) -> PrintableCommon
        __init__(PrintableCommon self, PrintableCommon other) -> PrintableCommon
        """
        _casadi.PrintableCommon_swiginit(self, _casadi.new_PrintableCommon(*args))
    __swig_destroy__ = _casadi.delete_PrintableCommon

# Register PrintableCommon in _casadi:
_casadi.PrintableCommon_swigregister(PrintableCommon)
class SharedObject(object):
    r"""


    [INTERNAL] 
     SharedObject implements a reference counting framework similar 
    for efficient and.

    easily-maintained memory management.

    To use the class, both the  SharedObject class (the public class), and the 
    SharedObjectInternal class (the 
    internal class) must be inherited from. It 
    can be done in two 
    different files and together with memory management, 
    this approach 
    provides a clear distinction of which methods of the class 
    are to be 
    considered "public", i.e. methods for public use that can be 

    considered to remain over time with small changes, and the internal 
    memory.

    When interfacing a software, which typically includes including some 
    header
     file, this is best done only in the file where the internal 
    class is 
    defined, to avoid polluting the global namespace and other 
    side effects.

    The default constructor always means creating a null pointer to an 
    internal
     class only. To allocate an internal class (this works only 
    when the 
    internal class isn't abstract), use the constructor with 
    arguments.

    The copy constructor and the assignment operator perform shallow 
    copies 
    only, to make a deep copy you must use the clone method 
    explicitly. This 
    will give a shared pointer instance.

    In an inheritance hierarchy, you can cast down automatically, e.g. 

    (SXFunction is a child class of  Function): SXFunction derived(...);  
    Function base = derived;

    To cast up, use the shared_cast template function, which works 
    analogously 
    to dynamic_cast, static_cast, const_cast etc, e.g.: 
    SXFunction 
    derived(...);  Function base = derived; SXFunction derived_from_base = 

    shared_cast<SXFunction>(base);

    A failed shared_cast will result in a null pointer (cf. dynamic_cast)

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_as

    C++ includes: shared_object.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def class_name(self, *args):
        r"""
        class_name(SharedObject self) -> std::string


        [INTERNAL] 
        Get class name.

        Extra doc: https://github.com/casadi/casadi/wiki/L_au

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L132

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L99-L101


        """
        return _casadi.SharedObject_class_name(self, *args)

    def disp(self, *args):
        r"""
        disp(SharedObject self, bool more=False)


        [INTERNAL] 
        Print a description of the object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L135

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L103-L109


        """
        return _casadi.SharedObject_disp(self, *args)

    def str(self, *args):
        r"""
        str(SharedObject self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L138

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L138-L142


        """
        return _casadi.SharedObject_str(self, *args)

    def print_ptr(self, *args):
        r"""print_ptr(SharedObject self)"""
        return _casadi.SharedObject_print_ptr(self, *args)

    def is_null(self, *args):
        r"""
        is_null(SharedObject self) -> bool


        [INTERNAL] 
        Is a null pointer?

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L150

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L73-L75


        """
        return _casadi.SharedObject_is_null(self, *args)

    def __hash__(self, *args):
        r"""
        __hash__(SharedObject self) -> casadi_int


        [INTERNAL] 
        Returns a number that is unique for a given Node.

        If the Object does not point to any node, "0" is returned.

        Extra doc: https://github.com/casadi/casadi/wiki/L_av

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L157

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L129-L131


        """
        return _casadi.SharedObject___hash__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SharedObject self) -> SharedObject
        __init__(SharedObject self, SharedObject other) -> SharedObject
        """
        _casadi.SharedObject_swiginit(self, _casadi.new_SharedObject(*args))
    __swig_destroy__ = _casadi.delete_SharedObject

# Register SharedObject in _casadi:
_casadi.SharedObject_swigregister(SharedObject)
class WeakRef(SharedObject):
    r"""


    [INTERNAL] 
    Weak reference type.

    A weak reference to a  SharedObject
    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_ax

    C++ includes: shared_object.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def shared(self, *args):
        r"""
        shared(WeakRef self) -> SharedObject


        [INTERNAL] 
        Get a shared (owning) reference.

        Extra doc: https://github.com/casadi/casadi/wiki/L_b0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L198

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L141-L147


        """
        return _casadi.WeakRef_shared(self, *args)

    def alive(self, *args):
        r"""
        alive(WeakRef self) -> bool


        [INTERNAL] 
        Check if alive.

        Extra doc: https://github.com/casadi/casadi/wiki/L_b1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L203

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L137-L139


        """
        return _casadi.WeakRef_alive(self, *args)

    def __init__(self, *args):
        r"""
        __init__(WeakRef self, int dummy=0) -> WeakRef
        __init__(WeakRef self, SharedObject shared) -> WeakRef
        __init__(WeakRef self, WeakRef other) -> WeakRef
        """
        _casadi.WeakRef_swiginit(self, _casadi.new_WeakRef(*args))
    __swig_destroy__ = _casadi.delete_WeakRef

# Register WeakRef in _casadi:
_casadi.WeakRef_swigregister(WeakRef)

def complement(*args):
    r"""
    complement(std::vector< casadi_int,std::allocator< casadi_int > > const & v, casadi_int size) -> std::vector< casadi_int,std::allocator< casadi_int > >


    [INTERNAL] 
    Returns the list of all i in [0, size[ not found in supplied 
    list.

    The supplied vector may contain duplicates and may be non-monotonous 
    The 
    supplied vector will be checked for bounds The result vector is 
    guaranteed 
    to be monotonously increasing

    Extra doc: https://github.com/casadi/casadi/wiki/L_1lf

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L136

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.cpp#L136-L152


    """
    return _casadi.complement(*args)

def lookupvector(*args):
    r"""
    lookupvector(std::vector< casadi_int,std::allocator< casadi_int > > const & v, casadi_int size) -> std::vector< casadi_int,std::allocator< casadi_int > >
    lookupvector(std::vector< casadi_int,std::allocator< casadi_int > > const & v) -> std::vector< casadi_int,std::allocator< casadi_int > >


    [INTERNAL] 
    """
    return _casadi.lookupvector(*args)

def temporary_file(*args):
    r"""
    temporary_file(std::string const & prefix, std::string const & suffix) -> std::string


    [INTERNAL] 
    """
    return _casadi.temporary_file(*args)

def normalized_setup(*args):
    r"""
    normalized_setup(std::istream & stream)
    normalized_setup()


    [INTERNAL] 
    """
    return _casadi.normalized_setup(*args)

def normalized_out(*args):
    r"""
    normalized_out(double val)


    [INTERNAL] 
    """
    return _casadi.normalized_out(*args)

def normalized_in(*args):
    r"""
    normalized_in(std::istream & stream, double & ret) -> int


    [INTERNAL] 
    """
    return _casadi.normalized_in(*args)
SWIG_IND1 = _casadi.SWIG_IND1

class GenericType(PrintableCommon):
    r"""


    [INTERNAL] 
    Generic data type, can hold different types such as bool, 
    casadi_int, 
    std::string etc.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_17n

    C++ includes: generic_type.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def serialize(self, *args):
        r"""
        serialize(GenericType self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_17r

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_type.hpp#L225

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_type.cpp#L547-L550


        """
        return _casadi.GenericType_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""deserialize(casadi::DeserializingStream & s) -> GenericType"""
        return _casadi.GenericType_deserialize(*args)

    def __init__(self, *args):
        r"""
        __init__(GenericType self) -> GenericType
        __init__(GenericType self, GenericType other) -> GenericType
        """
        _casadi.GenericType_swiginit(self, _casadi.new_GenericType(*args))
    __swig_destroy__ = _casadi.delete_GenericType

# Register GenericType in _casadi:
_casadi.GenericType_swigregister(GenericType)
OP_ASSIGN = _casadi.OP_ASSIGN

OP_ADD = _casadi.OP_ADD

OP_SUB = _casadi.OP_SUB

OP_MUL = _casadi.OP_MUL

OP_DIV = _casadi.OP_DIV

OP_NEG = _casadi.OP_NEG

OP_EXP = _casadi.OP_EXP

OP_LOG = _casadi.OP_LOG

OP_POW = _casadi.OP_POW

OP_CONSTPOW = _casadi.OP_CONSTPOW

OP_SQRT = _casadi.OP_SQRT

OP_SQ = _casadi.OP_SQ

OP_TWICE = _casadi.OP_TWICE

OP_SIN = _casadi.OP_SIN

OP_COS = _casadi.OP_COS

OP_TAN = _casadi.OP_TAN

OP_ASIN = _casadi.OP_ASIN

OP_ACOS = _casadi.OP_ACOS

OP_ATAN = _casadi.OP_ATAN

OP_LT = _casadi.OP_LT

OP_LE = _casadi.OP_LE

OP_EQ = _casadi.OP_EQ

OP_NE = _casadi.OP_NE

OP_NOT = _casadi.OP_NOT

OP_AND = _casadi.OP_AND

OP_OR = _casadi.OP_OR

OP_FLOOR = _casadi.OP_FLOOR

OP_CEIL = _casadi.OP_CEIL

OP_FMOD = _casadi.OP_FMOD

OP_FABS = _casadi.OP_FABS

OP_SIGN = _casadi.OP_SIGN

OP_COPYSIGN = _casadi.OP_COPYSIGN

OP_IF_ELSE_ZERO = _casadi.OP_IF_ELSE_ZERO

OP_ERF = _casadi.OP_ERF

OP_FMIN = _casadi.OP_FMIN

OP_FMAX = _casadi.OP_FMAX

OP_INV = _casadi.OP_INV

OP_SINH = _casadi.OP_SINH

OP_COSH = _casadi.OP_COSH

OP_TANH = _casadi.OP_TANH

OP_ASINH = _casadi.OP_ASINH

OP_ACOSH = _casadi.OP_ACOSH

OP_ATANH = _casadi.OP_ATANH

OP_ATAN2 = _casadi.OP_ATAN2

OP_CONST = _casadi.OP_CONST

OP_INPUT = _casadi.OP_INPUT

OP_OUTPUT = _casadi.OP_OUTPUT

OP_PARAMETER = _casadi.OP_PARAMETER

OP_CALL = _casadi.OP_CALL

OP_FIND = _casadi.OP_FIND

OP_LOW = _casadi.OP_LOW

OP_MAP = _casadi.OP_MAP

OP_MTIMES = _casadi.OP_MTIMES

OP_SOLVE = _casadi.OP_SOLVE

OP_TRANSPOSE = _casadi.OP_TRANSPOSE

OP_DETERMINANT = _casadi.OP_DETERMINANT

OP_INVERSE = _casadi.OP_INVERSE

OP_DOT = _casadi.OP_DOT

OP_BILIN = _casadi.OP_BILIN

OP_RANK1 = _casadi.OP_RANK1

OP_HORZCAT = _casadi.OP_HORZCAT

OP_VERTCAT = _casadi.OP_VERTCAT

OP_DIAGCAT = _casadi.OP_DIAGCAT

OP_HORZSPLIT = _casadi.OP_HORZSPLIT

OP_VERTSPLIT = _casadi.OP_VERTSPLIT

OP_DIAGSPLIT = _casadi.OP_DIAGSPLIT

OP_RESHAPE = _casadi.OP_RESHAPE

OP_SUBREF = _casadi.OP_SUBREF

OP_SUBASSIGN = _casadi.OP_SUBASSIGN

OP_GETNONZEROS = _casadi.OP_GETNONZEROS

OP_GETNONZEROS_PARAM = _casadi.OP_GETNONZEROS_PARAM

OP_ADDNONZEROS = _casadi.OP_ADDNONZEROS

OP_ADDNONZEROS_PARAM = _casadi.OP_ADDNONZEROS_PARAM

OP_SETNONZEROS = _casadi.OP_SETNONZEROS

OP_SETNONZEROS_PARAM = _casadi.OP_SETNONZEROS_PARAM

OP_PROJECT = _casadi.OP_PROJECT

OP_ASSERTION = _casadi.OP_ASSERTION

OP_MONITOR = _casadi.OP_MONITOR

OP_NORM2 = _casadi.OP_NORM2

OP_NORM1 = _casadi.OP_NORM1

OP_NORMINF = _casadi.OP_NORMINF

OP_NORMF = _casadi.OP_NORMF

OP_MMIN = _casadi.OP_MMIN

OP_MMAX = _casadi.OP_MMAX

OP_HORZREPMAT = _casadi.OP_HORZREPMAT

OP_HORZREPSUM = _casadi.OP_HORZREPSUM

OP_ERFINV = _casadi.OP_ERFINV

OP_PRINTME = _casadi.OP_PRINTME

OP_LIFT = _casadi.OP_LIFT

OP_EINSTEIN = _casadi.OP_EINSTEIN

OP_BSPLINE = _casadi.OP_BSPLINE

OP_CONVEXIFY = _casadi.OP_CONVEXIFY

OP_SPARSITY_CAST = _casadi.OP_SPARSITY_CAST

OP_LOG1P = _casadi.OP_LOG1P

OP_EXPM1 = _casadi.OP_EXPM1

OP_HYPOT = _casadi.OP_HYPOT

OP_LOGSUMEXP = _casadi.OP_LOGSUMEXP

OP_REMAINDER = _casadi.OP_REMAINDER

class SparsityInterfaceCommon(object):
    r"""


    [INTERNAL] 
    Sparsity interface class.

    This is a common base class for  GenericMatrix (i.e.  MX and Matrix<>) and 
    Sparsity, introducing a uniform syntax and 
    implementing common 
    functionality using the curiously recurring 
    template pattern (CRTP) idiom.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_3d

    C++ includes: sparsity_interface.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SparsityInterfaceCommon self) -> SparsityInterfaceCommon
        __init__(SparsityInterfaceCommon self, SparsityInterfaceCommon other) -> SparsityInterfaceCommon
        """
        _casadi.SparsityInterfaceCommon_swiginit(self, _casadi.new_SparsityInterfaceCommon(*args))
    __swig_destroy__ = _casadi.delete_SparsityInterfaceCommon

# Register SparsityInterfaceCommon in _casadi:
_casadi.SparsityInterfaceCommon_swigregister(SparsityInterfaceCommon)
class Sparsity(SharedObject, SparsityInterfaceCommon, PrintableCommon):
    r"""Proxy of C++ casadi::Sparsity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def scalar(*args):
        r"""scalar(bool dense_scalar=True) -> Sparsity"""
        return _casadi.Sparsity_scalar(*args)

    @staticmethod
    def dense(*args):
        r"""
        dense(casadi_int nrow, casadi_int ncol=1) -> Sparsity
        dense(std::pair< casadi_int,casadi_int > const & rc) -> Sparsity
        """
        return _casadi.Sparsity_dense(*args)

    @staticmethod
    def unit(*args):
        r"""unit(casadi_int n, casadi_int el) -> Sparsity"""
        return _casadi.Sparsity_unit(*args)

    @staticmethod
    def upper(*args):
        r"""upper(casadi_int n) -> Sparsity"""
        return _casadi.Sparsity_upper(*args)

    @staticmethod
    def lower(*args):
        r"""lower(casadi_int n) -> Sparsity"""
        return _casadi.Sparsity_lower(*args)

    @staticmethod
    def diag(*args):
        r"""
        diag(casadi_int nrow) -> Sparsity
        diag(casadi_int nrow, casadi_int ncol) -> Sparsity
        diag(std::pair< casadi_int,casadi_int > const & rc) -> Sparsity
        """
        return _casadi.Sparsity_diag(*args)

    @staticmethod
    def band(*args):
        r"""band(casadi_int n, casadi_int p) -> Sparsity"""
        return _casadi.Sparsity_band(*args)

    @staticmethod
    def banded(*args):
        r"""banded(casadi_int n, casadi_int p) -> Sparsity"""
        return _casadi.Sparsity_banded(*args)

    @staticmethod
    def rowcol(*args):
        r"""rowcol(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, casadi_int nrow, casadi_int ncol) -> Sparsity"""
        return _casadi.Sparsity_rowcol(*args)

    @staticmethod
    def triplet(*args):
        r"""
        triplet(casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, bool invert_mapping) -> Sparsity
        triplet(casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col) -> Sparsity
        """
        return _casadi.Sparsity_triplet(*args)

    @staticmethod
    def nonzeros(*args):
        r"""nonzeros(casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & nz, bool ind1=False) -> Sparsity"""
        return _casadi.Sparsity_nonzeros(*args)

    @staticmethod
    def compressed(*args):
        r"""compressed(std::vector< casadi_int,std::allocator< casadi_int > > const & v, bool order_rows=False) -> Sparsity"""
        return _casadi.Sparsity_compressed(*args)

    @staticmethod
    def permutation(*args):
        r"""permutation(std::vector< casadi_int,std::allocator< casadi_int > > const & p, bool invert=False) -> Sparsity"""
        return _casadi.Sparsity_permutation(*args)

    def permutation_vector(self, *args):
        r"""permutation_vector(Sparsity self, bool invert=False) -> std::vector< casadi_int,std::allocator< casadi_int > > const"""
        return _casadi.Sparsity_permutation_vector(self, *args)

    def get_diag(self, *args):
        r"""get_diag(Sparsity self) -> Sparsity"""
        return _casadi.Sparsity_get_diag(self, *args)

    def compress(self, *args):
        r"""compress(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_compress(self, *args)

    def is_equal(self, *args):
        r"""
        is_equal(Sparsity self, Sparsity y) -> bool
        is_equal(Sparsity self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & colind, std::vector< casadi_int,std::allocator< casadi_int > > const & row) -> bool
        """
        return _casadi.Sparsity_is_equal(self, *args)

    def __eq__(self, *args):
        r"""__eq__(Sparsity self, Sparsity y) -> bool"""
        return _casadi.Sparsity___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(Sparsity self, Sparsity y) -> bool"""
        return _casadi.Sparsity___ne__(self, *args)

    def is_stacked(self, *args):
        r"""is_stacked(Sparsity self, Sparsity y, casadi_int n) -> bool"""
        return _casadi.Sparsity_is_stacked(self, *args)

    def size1(self, *args):
        r"""size1(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_size1(self, *args)

    def rows(self, *args):
        r"""rows(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_rows(self, *args)

    def size2(self, *args):
        r"""size2(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_size2(self, *args)

    def columns(self, *args):
        r"""columns(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_columns(self, *args)

    def numel(self, *args):
        r"""numel(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_numel(self, *args)

    def density(self, *args):
        r"""density(Sparsity self) -> double"""
        return _casadi.Sparsity_density(self, *args)

    def is_empty(self, *args):
        r"""is_empty(Sparsity self, bool both=False) -> bool"""
        return _casadi.Sparsity_is_empty(self, *args)

    def nnz(self, *args):
        r"""nnz(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_nnz(self, *args)

    def nnz_upper(self, *args):
        r"""nnz_upper(Sparsity self, bool strictly=False) -> casadi_int"""
        return _casadi.Sparsity_nnz_upper(self, *args)

    def nnz_lower(self, *args):
        r"""nnz_lower(Sparsity self, bool strictly=False) -> casadi_int"""
        return _casadi.Sparsity_nnz_lower(self, *args)

    def nnz_diag(self, *args):
        r"""nnz_diag(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_nnz_diag(self, *args)

    def bw_upper(self, *args):
        r"""bw_upper(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_bw_upper(self, *args)

    def bw_lower(self, *args):
        r"""bw_lower(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_bw_lower(self, *args)

    def size(self, *args):
        r"""
        size(Sparsity self) -> std::pair< casadi_int,casadi_int >
        size(Sparsity self, casadi_int axis) -> casadi_int
        """
        return _casadi.Sparsity_size(self, *args)

    def info(self, *args):
        r"""info(Sparsity self) -> casadi::Dict"""
        return _casadi.Sparsity_info(self, *args)

    def to_file(self, *args):
        r"""to_file(Sparsity self, std::string const & filename, std::string const & format_hint="")"""
        return _casadi.Sparsity_to_file(self, *args)

    @staticmethod
    def from_file(*args):
        r"""from_file(std::string const & filename, std::string const & format_hint="") -> Sparsity"""
        return _casadi.Sparsity_from_file(*args)

    def serialize(self, *args):
        r"""
        serialize(Sparsity self) -> std::string
        serialize(Sparsity self, casadi::SerializingStream & s)
        """
        return _casadi.Sparsity_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""
        deserialize(std::istream & stream) -> Sparsity
        deserialize(std::string const & s) -> Sparsity
        deserialize(casadi::DeserializingStream & s) -> Sparsity
        """
        return _casadi.Sparsity_deserialize(*args)

    def colind(self, *args):
        r"""
        colind(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        colind(Sparsity self, casadi_int cc) -> casadi_int
        """
        return _casadi.Sparsity_colind(self, *args)

    def row(self, *args):
        r"""
        row(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        row(Sparsity self, casadi_int el) -> casadi_int
        """
        return _casadi.Sparsity_row(self, *args)

    def get_col(self, *args):
        r"""get_col(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_get_col(self, *args)

    def resize(self, *args):
        r"""resize(Sparsity self, casadi_int nrow, casadi_int ncol)"""
        return _casadi.Sparsity_resize(self, *args)

    def add_nz(self, *args):
        r"""add_nz(Sparsity self, casadi_int rr, casadi_int cc) -> casadi_int"""
        return _casadi.Sparsity_add_nz(self, *args)

    def has_nz(self, *args):
        r"""has_nz(Sparsity self, casadi_int rr, casadi_int cc) -> bool"""
        return _casadi.Sparsity_has_nz(self, *args)

    def get_nz(self, *args):
        r"""
        get_nz(Sparsity self, casadi_int rr, casadi_int cc) -> casadi_int
        get_nz(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc) -> std::vector< casadi_int,std::allocator< casadi_int > >
        get_nz(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > & INOUT)
        """
        return _casadi.Sparsity_get_nz(self, *args)

    def get_lower(self, *args):
        r"""get_lower(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_get_lower(self, *args)

    def get_upper(self, *args):
        r"""get_upper(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_get_upper(self, *args)

    def get_ccs(self, *args):
        r"""get_ccs(Sparsity self)"""
        return _casadi.Sparsity_get_ccs(self, *args)

    def get_crs(self, *args):
        r"""get_crs(Sparsity self)"""
        return _casadi.Sparsity_get_crs(self, *args)

    def get_triplet(self, *args):
        r"""get_triplet(Sparsity self)"""
        return _casadi.Sparsity_get_triplet(self, *args)

    def sub(self, *args):
        r"""
        sub(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False) -> Sparsity
        sub(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, Sparsity sp, bool ind1=False) -> Sparsity
        """
        return _casadi.Sparsity_sub(self, *args)

    def transpose(self, *args):
        r"""transpose(Sparsity self, bool invert_mapping=False) -> Sparsity"""
        return _casadi.Sparsity_transpose(self, *args)

    def is_transpose(self, *args):
        r"""is_transpose(Sparsity self, Sparsity y) -> bool"""
        return _casadi.Sparsity_is_transpose(self, *args)

    def is_reshape(self, *args):
        r"""is_reshape(Sparsity self, Sparsity y) -> bool"""
        return _casadi.Sparsity_is_reshape(self, *args)

    def combine(self, *args):
        r"""combine(Sparsity self, Sparsity y, bool f0x_is_zero, bool function0_is_zero) -> Sparsity"""
        return _casadi.Sparsity_combine(self, *args)

    def unite(self, *args):
        r"""unite(Sparsity self, Sparsity y) -> Sparsity"""
        return _casadi.Sparsity_unite(self, *args)

    def __add__(self, *args):
        r"""__add__(Sparsity self, Sparsity b) -> Sparsity"""
        return _casadi.Sparsity___add__(self, *args)

    def intersect(self, *args):
        r"""intersect(Sparsity self, Sparsity y) -> Sparsity"""
        return _casadi.Sparsity_intersect(self, *args)

    def __mul__(self, *args):
        r"""__mul__(Sparsity self, Sparsity b) -> Sparsity"""
        return _casadi.Sparsity___mul__(self, *args)

    def is_subset(self, *args):
        r"""is_subset(Sparsity self, Sparsity rhs) -> bool"""
        return _casadi.Sparsity_is_subset(self, *args)

    def sparsity_cast_mod(self, *args):
        r"""sparsity_cast_mod(Sparsity self, Sparsity X, Sparsity Y) -> Sparsity"""
        return _casadi.Sparsity_sparsity_cast_mod(self, *args)

    def pattern_inverse(self, *args):
        r"""pattern_inverse(Sparsity self) -> Sparsity"""
        return _casadi.Sparsity_pattern_inverse(self, *args)

    def enlarge(self, *args):
        r"""enlarge(Sparsity self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)"""
        return _casadi.Sparsity_enlarge(self, *args)

    def enlargeRows(self, *args):
        r"""enlargeRows(Sparsity self, casadi_int nrow, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, bool ind1=False)"""
        return _casadi.Sparsity_enlargeRows(self, *args)

    def enlargeColumns(self, *args):
        r"""enlargeColumns(Sparsity self, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)"""
        return _casadi.Sparsity_enlargeColumns(self, *args)

    def makeDense(self, *args):
        r"""makeDense(Sparsity self) -> Sparsity"""
        return _casadi.Sparsity_makeDense(self, *args)

    def erase(self, *args):
        r"""
        erase(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False) -> std::vector< casadi_int,std::allocator< casadi_int > >
        erase(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, bool ind1=False) -> std::vector< casadi_int,std::allocator< casadi_int > >
        """
        return _casadi.Sparsity_erase(self, *args)

    def append(self, *args):
        r"""append(Sparsity self, Sparsity sp)"""
        return _casadi.Sparsity_append(self, *args)

    def appendColumns(self, *args):
        r"""appendColumns(Sparsity self, Sparsity sp)"""
        return _casadi.Sparsity_appendColumns(self, *args)

    def is_scalar(self, *args):
        r"""is_scalar(Sparsity self, bool scalar_and_dense=False) -> bool"""
        return _casadi.Sparsity_is_scalar(self, *args)

    def is_dense(self, *args):
        r"""is_dense(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_dense(self, *args)

    def is_row(self, *args):
        r"""is_row(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_row(self, *args)

    def is_column(self, *args):
        r"""is_column(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_column(self, *args)

    def is_vector(self, *args):
        r"""is_vector(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_vector(self, *args)

    def is_diag(self, *args):
        r"""is_diag(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_diag(self, *args)

    def is_square(self, *args):
        r"""is_square(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_square(self, *args)

    def is_symmetric(self, *args):
        r"""is_symmetric(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_symmetric(self, *args)

    def is_triu(self, *args):
        r"""is_triu(Sparsity self, bool strictly=False) -> bool"""
        return _casadi.Sparsity_is_triu(self, *args)

    def is_tril(self, *args):
        r"""is_tril(Sparsity self, bool strictly=False) -> bool"""
        return _casadi.Sparsity_is_tril(self, *args)

    def is_singular(self, *args):
        r"""is_singular(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_singular(self, *args)

    def is_permutation(self, *args):
        r"""is_permutation(Sparsity self) -> bool"""
        return _casadi.Sparsity_is_permutation(self, *args)

    def is_selection(self, *args):
        r"""is_selection(Sparsity self, bool allow_empty=False) -> bool"""
        return _casadi.Sparsity_is_selection(self, *args)

    def is_orthonormal(self, *args):
        r"""is_orthonormal(Sparsity self, bool allow_empty=False) -> bool"""
        return _casadi.Sparsity_is_orthonormal(self, *args)

    def is_orthonormal_rows(self, *args):
        r"""is_orthonormal_rows(Sparsity self, bool allow_empty=False) -> bool"""
        return _casadi.Sparsity_is_orthonormal_rows(self, *args)

    def is_orthonormal_columns(self, *args):
        r"""is_orthonormal_columns(Sparsity self, bool allow_empty=False) -> bool"""
        return _casadi.Sparsity_is_orthonormal_columns(self, *args)

    def rowsSequential(self, *args):
        r"""rowsSequential(Sparsity self, bool strictly=True) -> bool"""
        return _casadi.Sparsity_rowsSequential(self, *args)

    def removeDuplicates(self, *args):
        r"""removeDuplicates(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > & INOUT)"""
        return _casadi.Sparsity_removeDuplicates(self, *args)

    def etree(self, *args):
        r"""etree(Sparsity self, bool ata=False) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_etree(self, *args)

    def ldl(self, *args):
        r"""ldl(Sparsity self, bool amd=True) -> Sparsity"""
        return _casadi.Sparsity_ldl(self, *args)

    def qr_sparse(self, *args):
        r"""qr_sparse(Sparsity self, bool amd=True)"""
        return _casadi.Sparsity_qr_sparse(self, *args)

    def dfs(self, *args):
        r"""dfs(Sparsity self, casadi_int j, casadi_int top, std::vector< casadi_int,std::allocator< casadi_int > > & arg4, std::vector< casadi_int,std::allocator< casadi_int > > & arg5, std::vector< casadi_int,std::allocator< casadi_int > > const & pinv, std::vector< bool,std::allocator< bool > > & arg7) -> casadi_int"""
        return _casadi.Sparsity_dfs(self, *args)

    def scc(self, *args):
        r"""scc(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_scc(self, *args)

    def btf(self, *args):
        r"""btf(Sparsity self) -> casadi_int"""
        return _casadi.Sparsity_btf(self, *args)

    def amd(self, *args):
        r"""amd(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_amd(self, *args)

    def find(self, *args):
        r"""find(Sparsity self, bool ind1=False) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_find(self, *args)

    def uni_coloring(self, *args):
        r"""uni_coloring(Sparsity self, Sparsity AT=casadi::Sparsity(), casadi_int cutoff=std::numeric_limits< casadi_int >::max()) -> Sparsity"""
        return _casadi.Sparsity_uni_coloring(self, *args)

    def star_coloring(self, *args):
        r"""star_coloring(Sparsity self, casadi_int ordering=1, casadi_int cutoff=std::numeric_limits< casadi_int >::max()) -> Sparsity"""
        return _casadi.Sparsity_star_coloring(self, *args)

    def star_coloring2(self, *args):
        r"""star_coloring2(Sparsity self, casadi_int ordering=1, casadi_int cutoff=std::numeric_limits< casadi_int >::max()) -> Sparsity"""
        return _casadi.Sparsity_star_coloring2(self, *args)

    def largest_first(self, *args):
        r"""largest_first(Sparsity self) -> std::vector< casadi_int,std::allocator< casadi_int > >"""
        return _casadi.Sparsity_largest_first(self, *args)

    def pmult(self, *args):
        r"""pmult(Sparsity self, std::vector< casadi_int,std::allocator< casadi_int > > const & p, bool permute_rows=True, bool permute_columns=True, bool invert_permutation=False) -> Sparsity"""
        return _casadi.Sparsity_pmult(self, *args)

    def dim(self, *args):
        r"""dim(Sparsity self, bool with_nz=False) -> std::string"""
        return _casadi.Sparsity_dim(self, *args)

    def postfix_dim(self, *args):
        r"""postfix_dim(Sparsity self) -> std::string"""
        return _casadi.Sparsity_postfix_dim(self, *args)

    def repr_el(self, *args):
        r"""repr_el(Sparsity self, casadi_int k) -> std::string"""
        return _casadi.Sparsity_repr_el(self, *args)

    def spy(self, *args):
        r"""spy(Sparsity self)"""
        return _casadi.Sparsity_spy(self, *args)

    def spy_matlab(self, *args):
        r"""spy_matlab(Sparsity self, std::string const & mfile)"""
        return _casadi.Sparsity_spy_matlab(self, *args)

    def export_code(self, *args):
        r"""export_code(Sparsity self, std::string const & lang, casadi::Dict const & options=casadi::Dict())"""
        return _casadi.Sparsity_export_code(self, *args)

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.Sparsity_type_name(*args)

    def hash(self, *args):
        r"""hash(Sparsity self) -> std::size_t"""
        return _casadi.Sparsity_hash(self, *args)

    @staticmethod
    def test_cast(*args):
        r"""test_cast(casadi::SharedObjectInternal const * ptr) -> bool"""
        return _casadi.Sparsity_test_cast(*args)

    @staticmethod
    def kkt(*args):
        r"""kkt(Sparsity H, Sparsity J, bool with_x_diag=True, bool with_lam_g_diag=True) -> Sparsity"""
        return _casadi.Sparsity_kkt(*args)

    def __setstate__(self, state):
        self.__init__(Sparsity.deserialize(state["serialization"]))

    def __getstate__(self):
        return {"serialization": self.serialize()}


    @property
    def shape(self):
        return (self.size1(),self.size2())

    @property
    def T(self):
        return _casadi.transpose(self)

    def __array__(self,*args,**kwargs):
        return DM.ones(self).full()


    def __init__(self, *args):
        r"""
        __init__(Sparsity self, casadi_int dummy=0) -> Sparsity
        __init__(Sparsity self, casadi_int nrow, casadi_int ncol) -> Sparsity
        __init__(Sparsity self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & colind, std::vector< casadi_int,std::allocator< casadi_int > > const & row, bool order_rows=False) -> Sparsity
        __init__(Sparsity self, std::pair< casadi_int,casadi_int > const & rc) -> Sparsity
        __init__(Sparsity self, Sparsity other) -> Sparsity
        """
        _casadi.Sparsity_swiginit(self, _casadi.new_Sparsity(*args))
    __swig_destroy__ = _casadi.delete_Sparsity

# Register Sparsity in _casadi:
_casadi.Sparsity_swigregister(Sparsity)

def hash_combine(*args):
    r"""
    hash_combine(std::size_t & seed, casadi_int const * v, std::size_t sz)
    hash_combine(std::size_t & seed, std::vector< casadi_int,std::allocator< casadi_int > > const & v)
    """
    return _casadi.hash_combine(*args)

def hash_sparsity(*args):
    r"""
    hash_sparsity(casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & colind, std::vector< casadi_int,std::allocator< casadi_int > > const & row) -> std::size_t
    hash_sparsity(casadi_int nrow, casadi_int ncol, casadi_int const * colind, casadi_int const * row) -> std::size_t
    """
    return _casadi.hash_sparsity(*args)
class Slice(PrintableCommon):
    r"""


    [INTERNAL] 
    Class representing a  Slice.

    Note that Python or Octave do not need to use this class. They can 
    just use
     slicing utility from the host language ( M[0:6] in Python, 
    M(1:7) )

    Extra doc: https://github.com/casadi/casadi/wiki/L_13

    C++ includes: slice.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_casadi.Slice_start_get, doc=r"""start : casadi_int""")
    stop = property(_casadi.Slice_stop_get, doc=r"""stop : casadi_int""")
    step = property(_casadi.Slice_step_get, doc=r"""step : casadi_int""")

    def all(self, *args):
        r"""
        all(Slice self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        all(Slice self, casadi_int len, bool ind1=False) -> std::vector< casadi_int,std::allocator< casadi_int > >
        all(Slice self, Slice outer, casadi_int len) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        Get a vector of indices (nested slice)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L75

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L129-L137


        """
        return _casadi.Slice_all(self, *args)

    def size(self, *args):
        r"""
        size(Slice self) -> size_t


        [INTERNAL] 
        Get number of elements.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L78

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L104-L109


        """
        return _casadi.Slice_size(self, *args)

    def is_empty(self, *args):
        r"""
        is_empty(Slice self) -> bool


        [INTERNAL] 
        Check if slice is empty.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L81

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L111-L113


        """
        return _casadi.Slice_is_empty(self, *args)

    def is_scalar(self, *args):
        r"""
        is_scalar(Slice self, casadi_int len) -> bool


        [INTERNAL] 
        Is the slice a scalar.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L84

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L139-L144


        """
        return _casadi.Slice_is_scalar(self, *args)

    def scalar(self, *args):
        r"""
        scalar(Slice self, casadi_int len) -> casadi_int


        [INTERNAL] 
        Get scalar (if is_scalar)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L87

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L146-L150


        """
        return _casadi.Slice_scalar(self, *args)

    def __eq__(self, *args):
        r"""__eq__(Slice self, Slice other) -> bool"""
        return _casadi.Slice___eq__(self, *args)

    def __ne__(self, *args):
        r"""__ne__(Slice self, Slice other) -> bool"""
        return _casadi.Slice___ne__(self, *args)

    def apply(self, *args):
        r"""
        apply(Slice self, casadi_int len, bool ind1=False) -> Slice


        [INTERNAL] 
        Apply concrete length.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L98

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L66-L88


        """
        return _casadi.Slice_apply(self, *args)

    def __sub__(self, *args):
        r"""__sub__(Slice self, casadi_int i) -> Slice"""
        return _casadi.Slice___sub__(self, *args)

    def __mul__(self, *args):
        r"""__mul__(Slice self, casadi_int i) -> Slice"""
        return _casadi.Slice___mul__(self, *args)

    def type_name(self, *args):
        r"""
        type_name(Slice self) -> std::string


        [INTERNAL] 
        Get name of the class.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L107

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L107-L107


        """
        return _casadi.Slice_type_name(self, *args)

    def disp(self, *args):
        r"""
        disp(Slice self, bool more=False)


        [INTERNAL] 
        Print a description of the object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L110

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L115-L127


        """
        return _casadi.Slice_disp(self, *args)

    def str(self, *args):
        r"""
        str(Slice self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L113

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L113-L117


        """
        return _casadi.Slice_str(self, *args)

    def info(self, *args):
        r"""
        info(Slice self) -> casadi::Dict


        [INTERNAL] 
        Obtain information

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L120

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L120-L122


        """
        return _casadi.Slice_info(self, *args)

    def serialize(self, *args):
        r"""
        serialize(Slice self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_14

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L127

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L292-L296


        """
        return _casadi.Slice_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""deserialize(casadi::DeserializingStream & s) -> Slice"""
        return _casadi.Slice_deserialize(*args)

    def __init__(self, *args):
        r"""
        __init__(Slice self) -> Slice
        __init__(Slice self, casadi_int i, bool ind1=False) -> Slice
        __init__(Slice self, casadi_int start, casadi_int stop, casadi_int step=1) -> Slice
        __init__(Slice self, int start, int stop, int step=1) -> Slice
        __init__(Slice self, int start, casadi_int stop, int step=1) -> Slice
        __init__(Slice self, casadi_int start, int stop, int step=1) -> Slice
        __init__(Slice self, Slice other) -> Slice
        """
        _casadi.Slice_swiginit(self, _casadi.new_Slice(*args))
    __swig_destroy__ = _casadi.delete_Slice

# Register Slice in _casadi:
_casadi.Slice_swigregister(Slice)

def to_slice(*args):
    r"""
    to_slice(std::vector< casadi_int,std::allocator< casadi_int > > const & v, bool ind1=False) -> Slice


    [INTERNAL] 
    Construct from an index vector (requires is_slice(v) to be true)

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L152

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L152-L168


    """
    return _casadi.to_slice(*args)

def to_slice2(*args):
    r"""
    to_slice2(std::vector< casadi_int,std::allocator< casadi_int > > const & v) -> std::pair< casadi::Slice,casadi::Slice >


    [INTERNAL] 
    Construct nested slices from an index vector (requires 
    is_slice2(v) to
     be true)

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L255

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L255-L289


    """
    return _casadi.to_slice2(*args)

def is_slice(*args):
    r"""
    is_slice(std::vector< casadi_int,std::allocator< casadi_int > > const & v, bool ind1=False) -> bool


    [INTERNAL] 
    Check if an index vector can be represented more efficiently as 
    a 
    slice.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L170

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L170-L200


    """
    return _casadi.is_slice(*args)

def is_slice2(*args):
    r"""
    is_slice2(std::vector< casadi_int,std::allocator< casadi_int > > const & v) -> bool


    [INTERNAL] 
    Check if an index vector can be represented more efficiently as 
    two 
    nested slices.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.hpp#L202

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/slice.cpp#L202-L253


    """
    return _casadi.is_slice2(*args)
class GenericMatrixCommon(object):
    r"""


    [INTERNAL] 
     Matrix base class.

    This is a common base class for  MX and Matrix<>, introducing a uniform 
    syntax and implementing common 
    functionality using the curiously recurring 
    template pattern (CRTP) 
    idiom.
     The class is designed with the idea that 
    "everything is a matrix",
     that is, also scalars and vectors.
    This 
    philosophy makes it easy to use and to interface in particularly
     with 
    Python and Matlab/Octave.
     The syntax tries to stay as close as possible to 
    the ublas syntax 
    when it comes to vector/matrix operations.
     Index starts 
    with 0.
    Index vec happens as follows: (rr, cc) -> k = rr+cc*size1()
    Vectors 
    are column vectors.
     The storage format is Compressed Column Storage (CCS), 
    similar to 
    that used for sparse matrices in Matlab, 
    but unlike this 
    format, we do allow for elements to be structurally 
    non-zero but 
    numerically zero.
     The sparsity pattern, which is reference counted and 
    cached, can be 
    accessed with Sparsity&  sparsity()
    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_1am

    C++ includes: generic_matrix.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __mldivide__(x, y): return _casadi.mldivide(x, y)
    def __rmldivide__(y, x): return _casadi.mldivide(x, y)
    def __mrdivide__(x, y): return _casadi.mrdivide(x, y)
    def __rmrdivide__(y, x): return _casadi.mrdivide(x, y)
    def __mpower__(x, y): return _casadi.mpower(x, y)
    def __rmpower__(y, x): return _casadi.mpower(x, y)


    def __init__(self, *args):
        r"""
        __init__(GenericMatrixCommon self) -> GenericMatrixCommon
        __init__(GenericMatrixCommon self, GenericMatrixCommon other) -> GenericMatrixCommon
        """
        _casadi.GenericMatrixCommon_swiginit(self, _casadi.new_GenericMatrixCommon(*args))
    __swig_destroy__ = _casadi.delete_GenericMatrixCommon

# Register GenericMatrixCommon in _casadi:
_casadi.GenericMatrixCommon_swigregister(GenericMatrixCommon)

def index_interp1d(*args):
    r"""
    index_interp1d(std::vector< double,std::allocator< double > > const & x, double xq, bool equidistant=False) -> double


    [INTERNAL] 
    """
    return _casadi.index_interp1d(*args)
class GenDM(GenericMatrixCommon, SparsityInterfaceCommon):
    r"""Proxy of C++ casadi::GenericMatrix< casadi::Matrix< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nnz(self, *args):
        r"""
        nnz(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of (structural) non-zero elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1an

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L84

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1119-L1121


        """
        return _casadi.GenDM_nnz(self, *args)

    def nnz_lower(self, *args):
        r"""
        nnz_lower(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the lower triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ao

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L89

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1124-L1126


        """
        return _casadi.GenDM_nnz_lower(self, *args)

    def nnz_upper(self, *args):
        r"""
        nnz_upper(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the upper triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ap

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L94

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1129-L1131


        """
        return _casadi.GenDM_nnz_upper(self, *args)

    def nnz_diag(self, *args):
        r"""
        nnz_diag(GenDM self) -> casadi_int


        [INTERNAL] 
        Get get the number of non-zeros on the diagonal.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L99

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1134-L1136


        """
        return _casadi.GenDM_nnz_diag(self, *args)

    def numel(self, *args):
        r"""
        numel(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ar

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L104

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1139-L1141


        """
        return _casadi.GenDM_numel(self, *args)

    def size1(self, *args):
        r"""
        size1(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the first dimension (i.e. number of rows)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1as

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L109

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1144-L1146


        """
        return _casadi.GenDM_size1(self, *args)

    def rows(self, *args):
        r"""
        rows(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of rows, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1at

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114-L114


        """
        return _casadi.GenDM_rows(self, *args)

    def size2(self, *args):
        r"""
        size2(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the second dimension (i.e. number of columns)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1au

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L119

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1149-L1151


        """
        return _casadi.GenDM_size2(self, *args)

    def columns(self, *args):
        r"""
        columns(GenDM self) -> casadi_int


        [INTERNAL] 
        Get the number of columns, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1av

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124-L124


        """
        return _casadi.GenDM_columns(self, *args)

    def dim(self, *args):
        r"""
        dim(GenDM self, bool with_nz=False) -> std::string


        [INTERNAL] 
        Get string representation of dimensions.

        The representation is e.g. "4x5" or "4x5,10nz"

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L131

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1164-L1166


        """
        return _casadi.GenDM_dim(self, *args)

    def size(self, *args):
        r"""
        size(GenDM self) -> std::pair< casadi_int,casadi_int >
        size(GenDM self, casadi_int axis) -> casadi_int


        [INTERNAL] 
        Get the size along a particular dimensions.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ay

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L141

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1159-L1161


        """
        return _casadi.GenDM_size(self, *args)

    def is_empty(self, *args):
        r"""
        is_empty(GenDM self, bool both=False) -> bool


        [INTERNAL] 
        Check if the sparsity is empty, i.e. if one of the dimensions is
         zero.

        (or optionally both dimensions)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1az

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148-L148


        """
        return _casadi.GenDM_is_empty(self, *args)

    def is_dense(self, *args):
        r"""
        is_dense(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix expression is dense.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153-L153


        """
        return _casadi.GenDM_is_dense(self, *args)

    def is_scalar(self, *args):
        r"""
        is_scalar(GenDM self, bool scalar_and_dense=False) -> bool


        [INTERNAL] 
        Check if the matrix expression is scalar.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L158

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1169-L1171


        """
        return _casadi.GenDM_is_scalar(self, *args)

    def is_square(self, *args):
        r"""
        is_square(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix expression is square.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163-L163


        """
        return _casadi.GenDM_is_square(self, *args)

    def is_vector(self, *args):
        r"""
        is_vector(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix is a row or column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168-L168


        """
        return _casadi.GenDM_is_vector(self, *args)

    def is_row(self, *args):
        r"""
        is_row(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix is a row vector (i.e.  size1()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173-L173


        """
        return _casadi.GenDM_is_row(self, *args)

    def is_column(self, *args):
        r"""
        is_column(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix is a column vector (i.e.  size2()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178-L178


        """
        return _casadi.GenDM_is_column(self, *args)

    def is_triu(self, *args):
        r"""
        is_triu(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix is upper triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183-L183


        """
        return _casadi.GenDM_is_triu(self, *args)

    def is_tril(self, *args):
        r"""
        is_tril(GenDM self) -> bool


        [INTERNAL] 
        Check if the matrix is lower triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188-L188


        """
        return _casadi.GenDM_is_tril(self, *args)

    def row(self, *args):
        r"""
        row(GenDM self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        row(GenDM self, casadi_int el) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200-L200


        """
        return _casadi.GenDM_row(self, *args)

    def colind(self, *args):
        r"""
        colind(GenDM self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        colind(GenDM self, casadi_int col) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201-L201


        """
        return _casadi.GenDM_colind(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(GenDM self) -> Sparsity


        [INTERNAL] 
        Get the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L207

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1114-L1116


        """
        return _casadi.GenDM_sparsity(self, *args)

    @staticmethod
    def sym(*args):
        r"""
        sym(std::string const & name, casadi_int nrow=1, casadi_int ncol=1) -> DM
        sym(std::string const & name, std::pair< casadi_int,casadi_int > const & rc) -> DM
        sym(std::string const & name, Sparsity sp) -> DM
        sym(std::string const & name, Sparsity sp, casadi_int p) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
        sym(std::string const & name, Sparsity sp, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >


        [INTERNAL] 
        Create a vector of length r of vectors of length p.

        with nrow-by-ncol symbolic primitives

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074-L1076


        """
        return _casadi.GenDM_sym(*args)

    @staticmethod
    def zeros(*args):
        r"""
        zeros(casadi_int nrow=1, casadi_int ncol=1) -> DM
        zeros(Sparsity sp) -> DM
        zeros(std::pair< casadi_int,casadi_int > const & rc) -> DM


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries zero.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087-L1089


        """
        return _casadi.GenDM_zeros(*args)

    @staticmethod
    def ones(*args):
        r"""
        ones(casadi_int nrow=1, casadi_int ncol=1) -> DM
        ones(Sparsity sp) -> DM
        ones(std::pair< casadi_int,casadi_int > const & rc) -> DM


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries one.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1di

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100-L1102


        """
        return _casadi.GenDM_ones(*args)

    def __init__(self, *args):
        r"""
        __init__(GenDM self) -> GenDM
        __init__(GenDM self, GenDM other) -> GenDM
        """
        _casadi.GenDM_swiginit(self, _casadi.new_GenDM(*args))
    __swig_destroy__ = _casadi.delete_GenDM

# Register GenDM in _casadi:
_casadi.GenDM_swigregister(GenDM)
class GenSX(GenericMatrixCommon, SparsityInterfaceCommon):
    r"""Proxy of C++ casadi::GenericMatrix< casadi::Matrix< casadi::SXElem > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nnz(self, *args):
        r"""
        nnz(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of (structural) non-zero elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1an

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L84

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1119-L1121


        """
        return _casadi.GenSX_nnz(self, *args)

    def nnz_lower(self, *args):
        r"""
        nnz_lower(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the lower triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ao

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L89

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1124-L1126


        """
        return _casadi.GenSX_nnz_lower(self, *args)

    def nnz_upper(self, *args):
        r"""
        nnz_upper(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the upper triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ap

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L94

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1129-L1131


        """
        return _casadi.GenSX_nnz_upper(self, *args)

    def nnz_diag(self, *args):
        r"""
        nnz_diag(GenSX self) -> casadi_int


        [INTERNAL] 
        Get get the number of non-zeros on the diagonal.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L99

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1134-L1136


        """
        return _casadi.GenSX_nnz_diag(self, *args)

    def numel(self, *args):
        r"""
        numel(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ar

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L104

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1139-L1141


        """
        return _casadi.GenSX_numel(self, *args)

    def size1(self, *args):
        r"""
        size1(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the first dimension (i.e. number of rows)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1as

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L109

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1144-L1146


        """
        return _casadi.GenSX_size1(self, *args)

    def rows(self, *args):
        r"""
        rows(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of rows, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1at

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114-L114


        """
        return _casadi.GenSX_rows(self, *args)

    def size2(self, *args):
        r"""
        size2(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the second dimension (i.e. number of columns)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1au

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L119

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1149-L1151


        """
        return _casadi.GenSX_size2(self, *args)

    def columns(self, *args):
        r"""
        columns(GenSX self) -> casadi_int


        [INTERNAL] 
        Get the number of columns, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1av

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124-L124


        """
        return _casadi.GenSX_columns(self, *args)

    def dim(self, *args):
        r"""
        dim(GenSX self, bool with_nz=False) -> std::string


        [INTERNAL] 
        Get string representation of dimensions.

        The representation is e.g. "4x5" or "4x5,10nz"

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L131

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1164-L1166


        """
        return _casadi.GenSX_dim(self, *args)

    def size(self, *args):
        r"""
        size(GenSX self) -> std::pair< casadi_int,casadi_int >
        size(GenSX self, casadi_int axis) -> casadi_int


        [INTERNAL] 
        Get the size along a particular dimensions.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ay

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L141

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1159-L1161


        """
        return _casadi.GenSX_size(self, *args)

    def is_empty(self, *args):
        r"""
        is_empty(GenSX self, bool both=False) -> bool


        [INTERNAL] 
        Check if the sparsity is empty, i.e. if one of the dimensions is
         zero.

        (or optionally both dimensions)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1az

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148-L148


        """
        return _casadi.GenSX_is_empty(self, *args)

    def is_dense(self, *args):
        r"""
        is_dense(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix expression is dense.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153-L153


        """
        return _casadi.GenSX_is_dense(self, *args)

    def is_scalar(self, *args):
        r"""
        is_scalar(GenSX self, bool scalar_and_dense=False) -> bool


        [INTERNAL] 
        Check if the matrix expression is scalar.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L158

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1169-L1171


        """
        return _casadi.GenSX_is_scalar(self, *args)

    def is_square(self, *args):
        r"""
        is_square(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix expression is square.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163-L163


        """
        return _casadi.GenSX_is_square(self, *args)

    def is_vector(self, *args):
        r"""
        is_vector(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix is a row or column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168-L168


        """
        return _casadi.GenSX_is_vector(self, *args)

    def is_row(self, *args):
        r"""
        is_row(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix is a row vector (i.e.  size1()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173-L173


        """
        return _casadi.GenSX_is_row(self, *args)

    def is_column(self, *args):
        r"""
        is_column(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix is a column vector (i.e.  size2()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178-L178


        """
        return _casadi.GenSX_is_column(self, *args)

    def is_triu(self, *args):
        r"""
        is_triu(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix is upper triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183-L183


        """
        return _casadi.GenSX_is_triu(self, *args)

    def is_tril(self, *args):
        r"""
        is_tril(GenSX self) -> bool


        [INTERNAL] 
        Check if the matrix is lower triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188-L188


        """
        return _casadi.GenSX_is_tril(self, *args)

    def row(self, *args):
        r"""
        row(GenSX self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        row(GenSX self, casadi_int el) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200-L200


        """
        return _casadi.GenSX_row(self, *args)

    def colind(self, *args):
        r"""
        colind(GenSX self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        colind(GenSX self, casadi_int col) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201-L201


        """
        return _casadi.GenSX_colind(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(GenSX self) -> Sparsity


        [INTERNAL] 
        Get the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L207

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1114-L1116


        """
        return _casadi.GenSX_sparsity(self, *args)

    @staticmethod
    def sym(*args):
        r"""
        sym(std::string const & name, casadi_int nrow=1, casadi_int ncol=1) -> SX
        sym(std::string const & name, std::pair< casadi_int,casadi_int > const & rc) -> SX
        sym(std::string const & name, Sparsity sp) -> SX
        sym(std::string const & name, Sparsity sp, casadi_int p) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
        sym(std::string const & name, Sparsity sp, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >


        [INTERNAL] 
        Create a vector of length r of vectors of length p.

        with nrow-by-ncol symbolic primitives

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074-L1076


        """
        return _casadi.GenSX_sym(*args)

    @staticmethod
    def zeros(*args):
        r"""
        zeros(casadi_int nrow=1, casadi_int ncol=1) -> SX
        zeros(Sparsity sp) -> SX
        zeros(std::pair< casadi_int,casadi_int > const & rc) -> SX


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries zero.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087-L1089


        """
        return _casadi.GenSX_zeros(*args)

    @staticmethod
    def ones(*args):
        r"""
        ones(casadi_int nrow=1, casadi_int ncol=1) -> SX
        ones(Sparsity sp) -> SX
        ones(std::pair< casadi_int,casadi_int > const & rc) -> SX


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries one.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1di

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100-L1102


        """
        return _casadi.GenSX_ones(*args)

    def __init__(self, *args):
        r"""
        __init__(GenSX self) -> GenSX
        __init__(GenSX self, GenSX other) -> GenSX
        """
        _casadi.GenSX_swiginit(self, _casadi.new_GenSX(*args))
    __swig_destroy__ = _casadi.delete_GenSX

# Register GenSX in _casadi:
_casadi.GenSX_swigregister(GenSX)
class GenMX(GenericMatrixCommon, SparsityInterfaceCommon):
    r"""Proxy of C++ casadi::GenericMatrix< casadi::MX > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nnz(self, *args):
        r"""
        nnz(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of (structural) non-zero elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1an

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L84

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1119-L1121


        """
        return _casadi.GenMX_nnz(self, *args)

    def nnz_lower(self, *args):
        r"""
        nnz_lower(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the lower triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ao

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L89

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1124-L1126


        """
        return _casadi.GenMX_nnz_lower(self, *args)

    def nnz_upper(self, *args):
        r"""
        nnz_upper(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of non-zeros in the upper triangular half.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ap

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L94

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1129-L1131


        """
        return _casadi.GenMX_nnz_upper(self, *args)

    def nnz_diag(self, *args):
        r"""
        nnz_diag(GenMX self) -> casadi_int


        [INTERNAL] 
        Get get the number of non-zeros on the diagonal.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L99

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1134-L1136


        """
        return _casadi.GenMX_nnz_diag(self, *args)

    def numel(self, *args):
        r"""
        numel(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ar

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L104

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1139-L1141


        """
        return _casadi.GenMX_numel(self, *args)

    def size1(self, *args):
        r"""
        size1(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the first dimension (i.e. number of rows)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1as

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L109

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1144-L1146


        """
        return _casadi.GenMX_size1(self, *args)

    def rows(self, *args):
        r"""
        rows(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of rows, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1at

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L114-L114


        """
        return _casadi.GenMX_rows(self, *args)

    def size2(self, *args):
        r"""
        size2(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the second dimension (i.e. number of columns)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1au

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L119

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1149-L1151


        """
        return _casadi.GenMX_size2(self, *args)

    def columns(self, *args):
        r"""
        columns(GenMX self) -> casadi_int


        [INTERNAL] 
        Get the number of columns, Octave-style syntax.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1av

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L124-L124


        """
        return _casadi.GenMX_columns(self, *args)

    def dim(self, *args):
        r"""
        dim(GenMX self, bool with_nz=False) -> std::string


        [INTERNAL] 
        Get string representation of dimensions.

        The representation is e.g. "4x5" or "4x5,10nz"

        Extra doc: https://github.com/casadi/casadi/wiki/L_1aw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L131

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1164-L1166


        """
        return _casadi.GenMX_dim(self, *args)

    def size(self, *args):
        r"""
        size(GenMX self) -> std::pair< casadi_int,casadi_int >
        size(GenMX self, casadi_int axis) -> casadi_int


        [INTERNAL] 
        Get the size along a particular dimensions.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ay

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L141

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1159-L1161


        """
        return _casadi.GenMX_size(self, *args)

    def is_empty(self, *args):
        r"""
        is_empty(GenMX self, bool both=False) -> bool


        [INTERNAL] 
        Check if the sparsity is empty, i.e. if one of the dimensions is
         zero.

        (or optionally both dimensions)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1az

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L148-L148


        """
        return _casadi.GenMX_is_empty(self, *args)

    def is_dense(self, *args):
        r"""
        is_dense(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix expression is dense.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L153-L153


        """
        return _casadi.GenMX_is_dense(self, *args)

    def is_scalar(self, *args):
        r"""
        is_scalar(GenMX self, bool scalar_and_dense=False) -> bool


        [INTERNAL] 
        Check if the matrix expression is scalar.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L158

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1169-L1171


        """
        return _casadi.GenMX_is_scalar(self, *args)

    def is_square(self, *args):
        r"""
        is_square(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix expression is square.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L163-L163


        """
        return _casadi.GenMX_is_square(self, *args)

    def is_vector(self, *args):
        r"""
        is_vector(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix is a row or column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L168-L168


        """
        return _casadi.GenMX_is_vector(self, *args)

    def is_row(self, *args):
        r"""
        is_row(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix is a row vector (i.e.  size1()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L173-L173


        """
        return _casadi.GenMX_is_row(self, *args)

    def is_column(self, *args):
        r"""
        is_column(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix is a column vector (i.e.  size2()==1)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L178-L178


        """
        return _casadi.GenMX_is_column(self, *args)

    def is_triu(self, *args):
        r"""
        is_triu(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix is upper triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L183-L183


        """
        return _casadi.GenMX_is_triu(self, *args)

    def is_tril(self, *args):
        r"""
        is_tril(GenMX self) -> bool


        [INTERNAL] 
        Check if the matrix is lower triangular.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L188-L188


        """
        return _casadi.GenMX_is_tril(self, *args)

    def row(self, *args):
        r"""
        row(GenMX self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        row(GenMX self, casadi_int el) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L200-L200


        """
        return _casadi.GenMX_row(self, *args)

    def colind(self, *args):
        r"""
        colind(GenMX self) -> std::vector< casadi_int,std::allocator< casadi_int > >
        colind(GenMX self, casadi_int col) -> casadi_int


        [INTERNAL] 
        Get the sparsity pattern. See the Sparsity class for details.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L201-L201


        """
        return _casadi.GenMX_colind(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(GenMX self) -> Sparsity


        [INTERNAL] 
        Get the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1b9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L207

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1114-L1116


        """
        return _casadi.GenMX_sparsity(self, *args)

    @staticmethod
    def sym(*args):
        r"""
        sym(std::string const & name, casadi_int nrow=1, casadi_int ncol=1) -> MX
        sym(std::string const & name, std::pair< casadi_int,casadi_int > const & rc) -> MX
        sym(std::string const & name, Sparsity sp) -> MX
        sym(std::string const & name, Sparsity sp, casadi_int p) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
        sym(std::string const & name, Sparsity sp, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >
        sym(std::string const & name, casadi_int nrow, casadi_int ncol, casadi_int p, casadi_int r) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >


        [INTERNAL] 
        Create a vector of length r of vectors of length p.

        with nrow-by-ncol symbolic primitives

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1074-L1076


        """
        return _casadi.GenMX_sym(*args)

    @staticmethod
    def zeros(*args):
        r"""
        zeros(casadi_int nrow=1, casadi_int ncol=1) -> MX
        zeros(Sparsity sp) -> MX
        zeros(std::pair< casadi_int,casadi_int > const & rc) -> MX


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries zero.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1dh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1087-L1089


        """
        return _casadi.GenMX_zeros(*args)

    @staticmethod
    def ones(*args):
        r"""
        ones(casadi_int nrow=1, casadi_int ncol=1) -> MX
        ones(Sparsity sp) -> MX
        ones(std::pair< casadi_int,casadi_int > const & rc) -> MX


        [INTERNAL] 
        Create a dense matrix or a matrix with specified sparsity with 
        all 
        entries one.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1di

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L1100-L1102


        """
        return _casadi.GenMX_ones(*args)

    def __init__(self, *args):
        r"""
        __init__(GenMX self) -> GenMX
        __init__(GenMX self, GenMX other) -> GenMX
        """
        _casadi.GenMX_swiginit(self, _casadi.new_GenMX(*args))
    __swig_destroy__ = _casadi.delete_GenMX

# Register GenMX in _casadi:
_casadi.GenMX_swigregister(GenMX)
class GenericExpressionCommon(object):
    r"""


    [INTERNAL] 
    Expression interface.

    This is a common base class for SX,  MX and Matrix<>, introducing a uniform 
    syntax and implementing common 
    functionality using the curiously recurring 
    template pattern (CRTP) 
    idiom.
    Joel Andersson

    C++ includes: generic_expression.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __hash__(self):
      try:
        return self.element_hash()
      except:
        return SharedObject.__hash__(self)
    def __matmul__(x, y): return _casadi.mtimes(x, y)
    def __rmatmul__(x, y): return _casadi.mtimes(y, x)


    def __add__(x, y): return _casadi.plus(x, y)
    def __radd__(x, y): return _casadi.plus(y, x)
    def __sub__(x, y): return _casadi.minus(x, y)
    def __rsub__(x, y): return _casadi.minus(y, x)
    def __mul__(x, y): return _casadi.times(x, y)
    def __rmul__(x, y): return _casadi.times(y, x)
    def __div__(x, y): return _casadi.rdivide(x, y)
    def __rdiv__(x, y): return _casadi.rdivide(y, x)
    def __truediv__(x, y): return _casadi.rdivide(x, y)
    def __rtruediv__(x, y): return _casadi.rdivide(y, x)
    def __lt__(x, y): return _casadi.lt(x, y)
    def __rlt__(x, y): return _casadi.lt(y, x)
    def __le__(x, y): return _casadi.le(x, y)
    def __rle__(x, y): return _casadi.le(y, x)
    def __gt__(x, y): return _casadi.lt(y, x)
    def __rgt__(x, y): return _casadi.lt(x, y)
    def __ge__(x, y): return _casadi.le(y, x)
    def __rge__(x, y): return _casadi.le(x, y)
    def __eq__(x, y): return _casadi.eq(x, y)
    def __req__(x, y): return _casadi.eq(y, x)
    def __ne__(x, y): return _casadi.ne(x, y)
    def __rne__(x, y): return _casadi.ne(y, x)
    def __pow__(x, n): return _casadi.power(x, n)
    def __rpow__(n, x): return _casadi.power(x, n)
    def __arctan2__(x, y): return _casadi.atan2(x, y)
    def __rarctan2__(y, x): return _casadi.atan2(x, y)
    def fmin(x, y): return _casadi.fmin(x, y)
    def fmax(x, y): return _casadi.fmax(x, y)
    def __fmin__(x, y): return _casadi.fmin(x, y)
    def __rfmin__(y, x): return _casadi.fmin(x, y)
    def __fmax__(x, y): return _casadi.fmax(x, y)
    def __rfmax__(y, x): return _casadi.fmax(x, y)
    def logic_and(x, y): return _casadi.logic_and(x, y)
    def logic_or(x, y): return _casadi.logic_or(x, y)
    def fabs(x): return _casadi.fabs(x)
    def sqrt(x): return _casadi.sqrt(x)
    def sin(x): return _casadi.sin(x)
    def cos(x): return _casadi.cos(x)
    def tan(x): return _casadi.tan(x)
    def arcsin(x): return _casadi.asin(x)
    def arccos(x): return _casadi.acos(x)
    def arctan(x): return _casadi.atan(x)
    def sinh(x): return _casadi.sinh(x)
    def cosh(x): return _casadi.cosh(x)
    def tanh(x): return _casadi.tanh(x)
    def arcsinh(x): return _casadi.asinh(x)
    def arccosh(x): return _casadi.acosh(x)
    def arctanh(x): return _casadi.atanh(x)
    def exp(x): return _casadi.exp(x)
    def log(x): return _casadi.log(x)
    def log10(x): return _casadi.log10(x)
    def log1p(x): return _casadi.log1p(x)
    def expm1(x): return _casadi.expm1(x)
    def floor(x): return _casadi.floor(x)
    def ceil(x): return _casadi.ceil(x)
    def erf(x): return _casadi.erf(x)
    def sign(x): return _casadi.sign(x)
    def fmod(x, y): return _casadi.mod(x, y)
    def hypot(x, y): return _casadi.hypot(x, y)
    def remainder(x, y): return _casadi.remainder(x, y)
    def __copysign__(x, y): return _casadi.copysign(x, y)
    def __rcopysign__(y, x): return _casadi.copysign(x, y)
    def copysign(x, y): return _casadi.copysign(x, y)
    def rcopysign(y, x): return _casadi.copysign(x, y)
    def __constpow__(x, y): return _casadi.constpow(x, y)
    def __rconstpow__(y, x): return _casadi.constpow(x, y)
    def constpow(x, y): return _casadi.constpow(x, y)
    def rconstpow(y, x): return _casadi.constpow(x, y)


    def __init__(self, *args):
        r"""
        __init__(GenericExpressionCommon self) -> GenericExpressionCommon
        __init__(GenericExpressionCommon self, GenericExpressionCommon other) -> GenericExpressionCommon
        """
        _casadi.GenericExpressionCommon_swiginit(self, _casadi.new_GenericExpressionCommon(*args))
    __swig_destroy__ = _casadi.delete_GenericExpressionCommon

# Register GenericExpressionCommon in _casadi:
_casadi.GenericExpressionCommon_swigregister(GenericExpressionCommon)
IS_GLOBAL = _casadi.IS_GLOBAL

IS_MEMBER = _casadi.IS_MEMBER

IS_SPARSITY = _casadi.IS_SPARSITY

IS_DMATRIX = _casadi.IS_DMATRIX

IS_IMATRIX = _casadi.IS_IMATRIX

IS_SX = _casadi.IS_SX

IS_MX = _casadi.IS_MX

IS_DOUBLE = _casadi.IS_DOUBLE

class MatrixCommon(object):
    r"""


    [INTERNAL] 
    Sparse matrix class. SX and DM are specializations.

    General sparse matrix class that is designed with the idea that 

    "everything is a matrix", that is, also scalars and vectors.
    This 
    philosophy makes it easy to use and to interface in particularly
     with 
    Python and Matlab/Octave.
     Index starts with 0.
    Index vec happens as 
    follows: (rr, cc) -> k = rr+cc*size1()
    Vectors are column vectors.
     The 
    storage format is Compressed Column Storage (CCS), similar to 
    that used for
     sparse matrices in Matlab, 
    but unlike this format, we do allow for 
    elements to be structurally 
    non-zero but numerically zero.
     Matrix<Scalar> 
    is polymorphic with a std::vector<Scalar> that 
    contain all non-identical-
    zero elements.
    The sparsity can be accessed with Sparsity&  sparsity()
    Joel 
    Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_18e

    C++ includes: matrix_decl.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixCommon self) -> MatrixCommon
        __init__(MatrixCommon self, MatrixCommon other) -> MatrixCommon
        """
        _casadi.MatrixCommon_swiginit(self, _casadi.new_MatrixCommon(*args))
    __swig_destroy__ = _casadi.delete_MatrixCommon

# Register MatrixCommon in _casadi:
_casadi.MatrixCommon_swigregister(MatrixCommon)
class DM(MatrixCommon, GenericExpressionCommon, GenDM, PrintableCommon):
    r"""Proxy of C++ casadi::Matrix< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def has_nz(self, *args):
        r"""
        has_nz(DM self, casadi_int rr, casadi_int cc) -> bool


        [INTERNAL] 
        Returns true if the matrix has a non-zero at location rr, cc.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L219

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L65-L67


        """
        return _casadi.DM_has_nz(self, *args)

    def __bool__(self, *args):
        r"""
        __bool__(DM self) -> bool


        [INTERNAL] 
        Returns the truth value of a  Matrix.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L222

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L70-L76


        """
        return _casadi.DM___bool__(self, *args)

    def get(self, *args):
        r"""
        get(DM self, bool ind1, Slice rr)
        get(DM self, bool ind1, casadi::Matrix< casadi_int > const & rr)
        get(DM self, bool ind1, Sparsity sp)
        get(DM self, bool ind1, Slice rr, Slice cc)
        get(DM self, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        get(DM self, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        get(DM self, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        """
        return _casadi.DM_get(self, *args)

    def set(self, *args):
        r"""
        set(DM self, DM m, bool ind1, Slice rr)
        set(DM self, DM m, bool ind1, casadi::Matrix< casadi_int > const & rr)
        set(DM self, DM m, bool ind1, Sparsity sp)
        set(DM self, DM m, bool ind1, Slice rr, Slice cc)
        set(DM self, DM m, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        set(DM self, DM m, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        set(DM self, DM m, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        """
        return _casadi.DM_set(self, *args)

    def get_nz(self, *args):
        r"""
        get_nz(DM self, bool ind1, Slice k)
        get_nz(DM self, bool ind1, casadi::Matrix< casadi_int > const & k)
        """
        return _casadi.DM_get_nz(self, *args)

    def set_nz(self, *args):
        r"""
        set_nz(DM self, DM m, bool ind1, Slice k)
        set_nz(DM self, DM m, bool ind1, casadi::Matrix< casadi_int > const & k)
        """
        return _casadi.DM_set_nz(self, *args)

    def __pos__(self, *args):
        r"""__pos__(DM self) -> DM"""
        return _casadi.DM___pos__(self, *args)

    def __neg__(self, *args):
        r"""__neg__(DM self) -> DM"""
        return _casadi.DM___neg__(self, *args)

    @staticmethod
    def binary(*args):
        r"""binary(casadi_int op, DM x, DM y) -> DM"""
        return _casadi.DM_binary(*args)

    @staticmethod
    def unary(*args):
        r"""unary(casadi_int op, DM x) -> DM"""
        return _casadi.DM_unary(*args)

    @staticmethod
    def scalar_matrix(*args):
        r"""scalar_matrix(casadi_int op, DM x, DM y) -> DM"""
        return _casadi.DM_scalar_matrix(*args)

    @staticmethod
    def matrix_scalar(*args):
        r"""matrix_scalar(casadi_int op, DM x, DM y) -> DM"""
        return _casadi.DM_matrix_scalar(*args)

    @staticmethod
    def matrix_matrix(*args):
        r"""matrix_matrix(casadi_int op, DM x, DM y) -> DM"""
        return _casadi.DM_matrix_matrix(*args)

    def printme(self, *args):
        r"""printme(DM self, DM y) -> DM"""
        return _casadi.DM_printme(self, *args)

    @staticmethod
    def set_max_depth(*args):
        r"""set_max_depth(casadi_int eq_depth=1)"""
        return _casadi.DM_set_max_depth(*args)

    @staticmethod
    def get_max_depth(*args):
        r"""get_max_depth() -> casadi_int"""
        return _casadi.DM_get_max_depth(*args)

    @staticmethod
    def get_input(*args):
        r"""get_input(Function f) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >"""
        return _casadi.DM_get_input(*args)

    @staticmethod
    def get_free(*args):
        r"""get_free(Function f) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >"""
        return _casadi.DM_get_free(*args)

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.DM_type_name(*args)

    def print_split(self, *args):
        r"""
        print_split(DM self)


        [INTERNAL] 
        Get strings corresponding to the nonzeros and the 
        interdependencies.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L873

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L696-L700


        """
        return _casadi.DM_print_split(self, *args)

    def disp(self, *args):
        r"""
        disp(DM self, bool more=False)


        [INTERNAL] 
        Print a representation of the object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L877


        """
        return _casadi.DM_disp(self, *args)

    def str(self, *args):
        r"""
        str(DM self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L880


        """
        return _casadi.DM_str(self, *args)

    def print_scalar(self, *args):
        r"""
        print_scalar(DM self)


        [INTERNAL] 
        Print scalar.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L883

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L609-L633


        """
        return _casadi.DM_print_scalar(self, *args)

    def print_vector(self, *args):
        r"""
        print_vector(DM self, bool truncate=True)


        [INTERNAL] 
        Print vector-style.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L886

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L636-L638


        """
        return _casadi.DM_print_vector(self, *args)

    def print_dense(self, *args):
        r"""
        print_dense(DM self, bool truncate=True)


        [INTERNAL] 
        Print dense matrix-stype.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L889

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L686-L688


        """
        return _casadi.DM_print_dense(self, *args)

    def print_sparse(self, *args):
        r"""
        print_sparse(DM self, bool truncate=True)


        [INTERNAL] 
        Print sparse matrix style.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L892

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L691-L693


        """
        return _casadi.DM_print_sparse(self, *args)

    def clear(self, *args):
        r"""
        clear(DM self)


        [INTERNAL] 
        """
        return _casadi.DM_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(DM self, casadi_int nrow, casadi_int ncol)


        [INTERNAL] 
        """
        return _casadi.DM_resize(self, *args)

    def reserve(self, *args):
        r"""
        reserve(DM self, casadi_int nnz)
        reserve(DM self, casadi_int nnz, casadi_int ncol)


        [INTERNAL] 
        """
        return _casadi.DM_reserve(self, *args)

    def erase(self, *args):
        r"""
        erase(DM self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)
        erase(DM self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, bool ind1=False)


        [INTERNAL] 
        Erase a submatrix (leaving structural zeros in its place)

        Erase elements of a matrix

        Extra doc: https://github.com/casadi/casadi/wiki/L_19g

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L937


        """
        return _casadi.DM_erase(self, *args)

    def remove(self, *args):
        r"""
        remove(DM self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc)


        [INTERNAL] 
        Remove columns and rows.

        Remove/delete rows and/or columns of a matrix

        Extra doc: https://github.com/casadi/casadi/wiki/L_19h

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L944


        """
        return _casadi.DM_remove(self, *args)

    def enlarge(self, *args):
        r"""
        enlarge(DM self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)


        [INTERNAL] 
        Enlarge matrix.

        Make the matrix larger by inserting empty rows and columns, keeping 
        the 
        existing non-zeros

        Extra doc: https://github.com/casadi/casadi/wiki/L_19i

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L952


        """
        return _casadi.DM_enlarge(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(DM self) -> Sparsity


        [INTERNAL] 
        Get an owning reference to the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_19j

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L979


        """
        return _casadi.DM_sparsity(self, *args)

    @staticmethod
    def triplet(*args):
        r"""
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, DM d) -> DM
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, DM d, casadi_int nrow, casadi_int ncol) -> DM
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, DM d, std::pair< casadi_int,casadi_int > const & rc) -> DM
        """
        return _casadi.DM_triplet(*args)

    @staticmethod
    def inf(*args):
        r"""
        inf(Sparsity sp) -> DM
        inf(casadi_int nrow=1, casadi_int ncol=1) -> DM
        inf(std::pair< casadi_int,casadi_int > const & rc) -> DM


        [INTERNAL] 
        create a matrix with all inf

        Extra doc: https://github.com/casadi/casadi/wiki/L_19k

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1005


        """
        return _casadi.DM_inf(*args)

    @staticmethod
    def nan(*args):
        r"""
        nan(Sparsity sp) -> DM
        nan(casadi_int nrow=1, casadi_int ncol=1) -> DM
        nan(std::pair< casadi_int,casadi_int > const & rc) -> DM


        [INTERNAL] 
        create a matrix with all nan

        Extra doc: https://github.com/casadi/casadi/wiki/L_19l

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1014


        """
        return _casadi.DM_nan(*args)

    @staticmethod
    def eye(*args):
        r"""eye(casadi_int n) -> DM"""
        return _casadi.DM_eye(*args)

    def element_hash(self, *args):
        r"""element_hash(DM self) -> casadi_int"""
        return _casadi.DM_element_hash(self, *args)

    def is_regular(self, *args):
        r"""is_regular(DM self) -> bool"""
        return _casadi.DM_is_regular(self, *args)

    def is_smooth(self, *args):
        r"""is_smooth(DM self) -> bool"""
        return _casadi.DM_is_smooth(self, *args)

    def is_leaf(self, *args):
        r"""is_leaf(DM self) -> bool"""
        return _casadi.DM_is_leaf(self, *args)

    def is_commutative(self, *args):
        r"""is_commutative(DM self) -> bool"""
        return _casadi.DM_is_commutative(self, *args)

    def is_symbolic(self, *args):
        r"""is_symbolic(DM self) -> bool"""
        return _casadi.DM_is_symbolic(self, *args)

    def is_valid_input(self, *args):
        r"""is_valid_input(DM self) -> bool"""
        return _casadi.DM_is_valid_input(self, *args)

    def has_duplicates(self, *args):
        r"""has_duplicates(DM self) -> bool"""
        return _casadi.DM_has_duplicates(self, *args)

    def reset_input(self, *args):
        r"""reset_input(DM self)"""
        return _casadi.DM_reset_input(self, *args)

    def is_constant(self, *args):
        r"""
        is_constant(DM self) -> bool


        [INTERNAL] 
        Check if the matrix is constant (note that false negative 
        answers are 
        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19v

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1085


        """
        return _casadi.DM_is_constant(self, *args)

    def is_integer(self, *args):
        r"""
        is_integer(DM self) -> bool


        [INTERNAL] 
        Check if the matrix is integer-valued.

        (note that false negative answers are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19w

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1092


        """
        return _casadi.DM_is_integer(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(DM self) -> bool


        [INTERNAL] 
        check if the matrix is 0 (note that false negative answers are 

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19x

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1097


        """
        return _casadi.DM_is_zero(self, *args)

    def is_one(self, *args):
        r"""
        is_one(DM self) -> bool


        [INTERNAL] 
        check if the matrix is 1 (note that false negative answers are 

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19y

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1102


        """
        return _casadi.DM_is_one(self, *args)

    def is_minus_one(self, *args):
        r"""
        is_minus_one(DM self) -> bool


        [INTERNAL] 
        check if the matrix is -1 (note that false negative answers are

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19z

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1107


        """
        return _casadi.DM_is_minus_one(self, *args)

    def is_eye(self, *args):
        r"""
        is_eye(DM self) -> bool


        [INTERNAL] 
        check if the matrix is an identity matrix (note that false 
        negative 
        answers

        are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1114


        """
        return _casadi.DM_is_eye(self, *args)

    def op(self, *args):
        r"""op(DM self) -> casadi_int"""
        return _casadi.DM_op(self, *args)

    def is_op(self, *args):
        r"""is_op(DM self, casadi_int op) -> bool"""
        return _casadi.DM_is_op(self, *args)

    def has_zeros(self, *args):
        r"""
        has_zeros(DM self) -> bool


        [INTERNAL] 
        Check if the matrix has any zero entries which are not 
        structural 
        zeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1125


        """
        return _casadi.DM_has_zeros(self, *args)

    def nonzeros(self, *args):
        r"""
        nonzeros(DM self) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get all nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1142


        """
        return _casadi.DM_nonzeros(self, *args)

    def elements(self, *args):
        r"""
        elements(DM self) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get all elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1135


        """
        return _casadi.DM_elements(self, *args)

    def __float__(self, *args):
        r"""__float__(DM self) -> double"""
        return _casadi.DM___float__(self, *args)

    def __int__(self, *args):
        r"""__int__(DM self) -> casadi_int"""
        return _casadi.DM___int__(self, *args)

    def name(self, *args):
        r"""name(DM self) -> std::string"""
        return _casadi.DM_name(self, *args)

    def dep(self, *args):
        r"""dep(DM self, casadi_int ch=0) -> DM"""
        return _casadi.DM_dep(self, *args)

    def n_dep(self, *args):
        r"""n_dep(DM self) -> casadi_int"""
        return _casadi.DM_n_dep(self, *args)

    @staticmethod
    def set_precision(*args):
        r"""set_precision(casadi_int precision)"""
        return _casadi.DM_set_precision(*args)

    @staticmethod
    def set_width(*args):
        r"""set_width(casadi_int width)"""
        return _casadi.DM_set_width(*args)

    @staticmethod
    def set_scientific(*args):
        r"""set_scientific(bool scientific)"""
        return _casadi.DM_set_scientific(*args)

    @staticmethod
    def rng(*args):
        r"""rng(casadi_int seed)"""
        return _casadi.DM_rng(*args)

    @staticmethod
    def rand(*args):
        r"""
        rand(casadi_int nrow=1, casadi_int ncol=1) -> DM
        rand(Sparsity sp) -> DM
        rand(std::pair< casadi_int,casadi_int > const & rc) -> DM


        [INTERNAL] 
        Create a matrix with uniformly distributed random numbers.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ab

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1201


        """
        return _casadi.DM_rand(*args)

    def export_code(self, *args):
        r"""export_code(DM self, std::string const & lang, casadi::Dict const & options=casadi::Dict())"""
        return _casadi.DM_export_code(self, *args)

    def info(self, *args):
        r"""info(DM self) -> casadi::Dict"""
        return _casadi.DM_info(self, *args)

    def serialize(self, *args):
        r"""
        serialize(DM self) -> std::string
        serialize(DM self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ah

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1249


        """
        return _casadi.DM_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""
        deserialize(std::istream & stream) -> DM
        deserialize(std::string const & s) -> DM
        deserialize(casadi::DeserializingStream & s) -> DM
        """
        return _casadi.DM_deserialize(*args)

    def to_file(self, *args):
        r"""
        to_file(DM self, std::string const & filename, std::string const & format="")


        [INTERNAL] 
        Export numerical matrix to file

        Supported formats:



        ::

          *   - .mtx   Matrix Market (sparse)
          *   - .txt   Ascii full precision representation (sparse)
          *            Whitespace separated, aligned.
          *            Comments with # % or /
          *            Uses C locale
          *            Structural zeros represented by 00
          *            Does not scale well for large sparse matrices
          * 



        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1269


        """
        return _casadi.DM_to_file(self, *args)

    @staticmethod
    def from_file(*args):
        r"""from_file(std::string const & filename, std::string const & format_hint="") -> DM"""
        return _casadi.DM_from_file(*args)

    def __init__(self, *args):
        r"""
        __init__(DM self) -> DM
        __init__(DM self, DM m) -> DM
        __init__(DM self, casadi_int nrow, casadi_int ncol) -> DM
        __init__(DM self, Sparsity sp) -> DM
        __init__(DM self, Sparsity sp, DM d) -> DM
        __init__(DM self, double val) -> DM
        __init__(DM self, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & m) -> DM
        __init__(DM self, std::vector< casadi::SXElem,std::allocator< casadi::SXElem > > const & x) -> DM
        __init__(DM self, SX x) -> DM
        """
        _casadi.DM_swiginit(self, _casadi.new_DM(*args))

    def assign(self, *args):
        r"""assign(DM self, DM rhs)"""
        return _casadi.DM_assign(self, *args)

    @property
    def shape(self):
        return (self.size1(),self.size2())

    def reshape(self,arg):
        return _casadi.reshape(self,arg)

    @property
    def T(self):
        return _casadi.transpose(self)

    def __getitem__(self, s):
          if isinstance(s, tuple) and len(s)==2:
            if s[1] is None: raise TypeError("Cannot slice with None")
            return self.get(False, s[0], s[1])
          return self.get(False, s)

    def __iter__(self):
      raise Exception("""CasADi matrices are not iterable by design.
                      Did you mean to iterate over m.nz, with m IM/DM/SX?
                      Did you mean to iterate over horzsplit(m,1)/vertsplit(m,1) with m IM/DM/SX/MX?
                      """)

    def __setitem__(self,s,val):
          if isinstance(s,tuple) and len(s)==2:
            return self.set(val, False, s[0], s[1])
          return self.set(val, False, s)

    @property
    def nz(self):
      return NZproxy(self)



    def full(self, *args):
        r"""full(DM self) -> PyObject *"""
        return _casadi.DM_full(self, *args)

    def sparse(self, *args):
        r"""sparse(DM self) -> PyObject *"""
        return _casadi.DM_sparse(self, *args)


    __array_priority__ = 999.0

    def __array_wrap__(self,out_arr,context=None):
      if context is None:
        return out_arr
      name = context[0].__name__
      args = list(context[1])

      if len(context[1])==3:
        raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name)

      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]

      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      if name in conversion:
        name = conversion[name]
      if len(context[1])==2 and context[1][1] is self and not(context[1][0] is self):
        name = 'r' + name
        args.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      fun=getattr(self, name)
      return fun(*args[1:])

    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      name = ufunc.__name__
      inputs = list(inputs)
      if len(inputs)==3:
        import warnings
        warnings.warn("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name, RuntimeWarning)
        return NotImplemented
      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]
      if name in conversion:
        name = conversion[name]
      if len(inputs)==2 and inputs[1] is self and not(inputs[0] is self):
        name = 'r' + name
        inputs.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      try:
        assert method=="__call__"
        fun=getattr(self, name)
        return fun(*inputs[1:])
      except Exception as e:
        if "Dimension mismatch" in str(e):
          import sys
          if sys.version_info[0] < 3:
              raise RuntimeError(str(e))
          else:
              raise e
#Fall back to numpy conversion
        new_inputs = list(inputs)
        try:
          new_inputs[0] = new_inputs[0].full()
        except:
          import warnings
          warnings.warn("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                                 + "This may occur when you pass a CasADi object to a numpy function.\n"
                                 + "Use an equivalent CasADi function instead of that numpy function.", RuntimeWarning)
          return NotImplemented
        return new_inputs[0].__array_ufunc__(ufunc, method, *new_inputs, **kwargs)


    def __array__(self,*args,**kwargs):
      import numpy as n
      if len(args) > 1 and isinstance(args[1],tuple) and isinstance(args[1][0],n.ufunc) and isinstance(args[1][0],n.ufunc) and len(args[1])>1 and args[1][0].nin==len(args[1][1]):
        if len(args[1][1])==3:
          raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b'. This is not supported when 'a' is a numpy type, and cannot be supported without changing numpy itself. Either upgrade a to a CasADi type first, or use 'a = a + b'. " % args[1][0].__name__)
        return n.array([n.nan])
      else:
        if hasattr(self,'__array_custom__'):
          return self.__array_custom__(*args,**kwargs)
        else:
          try:
            return self.full()
          except:
            if self.is_scalar(True):
#Needed for#2743
              E=n.empty((),dtype=object)
              E[()] = self
              return E
            else:
              raise Exception("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                        + "This may occur when you pass a CasADi object to a numpy function.\n"
                        + "Use an equivalent CasADi function instead of that numpy function.")



    def __array_custom__(self,*args,**kwargs):
      if "dtype" in kwargs and not(isinstance(kwargs["dtype"],n.double)):
        return n.array(self.full(),dtype=kwargs["dtype"])
      else:
        return self.full()


    def tocsc(self):
      import numpy as np
      import warnings
      with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        from scipy.sparse import csc_matrix
      return csc_matrix( (self.nonzeros(),self.row(),self.colind()), shape = self.shape, dtype=np.double )
    def toarray(self,simplify=False):
      import numpy as np
      if simplify:
        if self.is_scalar():
          return float(self)
        elif self.is_vector():
          return np.array(self.T.elements())
      return np.array(self.T.elements()).reshape(self.shape)


    def __bool__(self):
      if self.numel()!=1:
        raise Exception("Only a scalar can be cast to a float")
      if self.nnz()==0:
        return False
      return float(self)!=0


    def __abs__(self):
      return abs(float(self))


    def __setstate__(self, state):
        self.__init__(DM.deserialize(state["serialization"]))

    def __getstate__(self):
        return {"serialization": self.serialize()}

    __swig_destroy__ = _casadi.delete_DM

# Register DM in _casadi:
_casadi.DM_swigregister(DM)
class SXElem(object):
    r"""


    [INTERNAL] 
    The basic scalar symbolic class of CasADi.

    SXElem is exposed only as an empty struct to SWIG

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_10i

    C++ includes: sx_elem.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SXElem self) -> SXElem
        __init__(SXElem self, SXElem other) -> SXElem
        """
        _casadi.SXElem_swiginit(self, _casadi.new_SXElem(*args))
    __swig_destroy__ = _casadi.delete_SXElem

# Register SXElem in _casadi:
_casadi.SXElem_swigregister(SXElem)


try:
  import numpy

  def constpow(x,y):
    pass

  constpow=numpy.frompyfunc(constpow,2,1)
except:
  pass

class SX(MatrixCommon, GenericExpressionCommon, GenSX, PrintableCommon):
    r"""Proxy of C++ casadi::Matrix< casadi::SXElem > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def has_nz(self, *args):
        r"""
        has_nz(SX self, casadi_int rr, casadi_int cc) -> bool


        [INTERNAL] 
        Returns true if the matrix has a non-zero at location rr, cc.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L219

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L65-L67


        """
        return _casadi.SX_has_nz(self, *args)

    def __bool__(self, *args):
        r"""
        __bool__(SX self) -> bool


        [INTERNAL] 
        Returns the truth value of a  Matrix.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L222

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L70-L76


        """
        return _casadi.SX___bool__(self, *args)

    def get(self, *args):
        r"""
        get(SX self, bool ind1, Slice rr)
        get(SX self, bool ind1, casadi::Matrix< casadi_int > const & rr)
        get(SX self, bool ind1, Sparsity sp)
        get(SX self, bool ind1, Slice rr, Slice cc)
        get(SX self, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        get(SX self, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        get(SX self, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        """
        return _casadi.SX_get(self, *args)

    def set(self, *args):
        r"""
        set(SX self, SX m, bool ind1, Slice rr)
        set(SX self, SX m, bool ind1, casadi::Matrix< casadi_int > const & rr)
        set(SX self, SX m, bool ind1, Sparsity sp)
        set(SX self, SX m, bool ind1, Slice rr, Slice cc)
        set(SX self, SX m, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        set(SX self, SX m, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        set(SX self, SX m, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        """
        return _casadi.SX_set(self, *args)

    def get_nz(self, *args):
        r"""
        get_nz(SX self, bool ind1, Slice k)
        get_nz(SX self, bool ind1, casadi::Matrix< casadi_int > const & k)
        """
        return _casadi.SX_get_nz(self, *args)

    def set_nz(self, *args):
        r"""
        set_nz(SX self, SX m, bool ind1, Slice k)
        set_nz(SX self, SX m, bool ind1, casadi::Matrix< casadi_int > const & k)
        """
        return _casadi.SX_set_nz(self, *args)

    def __pos__(self, *args):
        r"""__pos__(SX self) -> SX"""
        return _casadi.SX___pos__(self, *args)

    def __neg__(self, *args):
        r"""__neg__(SX self) -> SX"""
        return _casadi.SX___neg__(self, *args)

    @staticmethod
    def binary(*args):
        r"""binary(casadi_int op, SX x, SX y) -> SX"""
        return _casadi.SX_binary(*args)

    @staticmethod
    def unary(*args):
        r"""unary(casadi_int op, SX x) -> SX"""
        return _casadi.SX_unary(*args)

    @staticmethod
    def scalar_matrix(*args):
        r"""scalar_matrix(casadi_int op, SX x, SX y) -> SX"""
        return _casadi.SX_scalar_matrix(*args)

    @staticmethod
    def matrix_scalar(*args):
        r"""matrix_scalar(casadi_int op, SX x, SX y) -> SX"""
        return _casadi.SX_matrix_scalar(*args)

    @staticmethod
    def matrix_matrix(*args):
        r"""matrix_matrix(casadi_int op, SX x, SX y) -> SX"""
        return _casadi.SX_matrix_matrix(*args)

    def printme(self, *args):
        r"""printme(SX self, SX y) -> SX"""
        return _casadi.SX_printme(self, *args)

    @staticmethod
    def set_max_depth(*args):
        r"""set_max_depth(casadi_int eq_depth=1)"""
        return _casadi.SX_set_max_depth(*args)

    @staticmethod
    def get_max_depth(*args):
        r"""get_max_depth() -> casadi_int"""
        return _casadi.SX_get_max_depth(*args)

    @staticmethod
    def get_input(*args):
        r"""get_input(Function f) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >"""
        return _casadi.SX_get_input(*args)

    @staticmethod
    def get_free(*args):
        r"""get_free(Function f) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >"""
        return _casadi.SX_get_free(*args)

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.SX_type_name(*args)

    def print_split(self, *args):
        r"""
        print_split(SX self)


        [INTERNAL] 
        Get strings corresponding to the nonzeros and the 
        interdependencies.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L873

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L696-L700


        """
        return _casadi.SX_print_split(self, *args)

    def disp(self, *args):
        r"""
        disp(SX self, bool more=False)


        [INTERNAL] 
        Print a representation of the object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L877


        """
        return _casadi.SX_disp(self, *args)

    def str(self, *args):
        r"""
        str(SX self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L880


        """
        return _casadi.SX_str(self, *args)

    def print_scalar(self, *args):
        r"""
        print_scalar(SX self)


        [INTERNAL] 
        Print scalar.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L883

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L609-L633


        """
        return _casadi.SX_print_scalar(self, *args)

    def print_vector(self, *args):
        r"""
        print_vector(SX self, bool truncate=True)


        [INTERNAL] 
        Print vector-style.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L886

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L636-L638


        """
        return _casadi.SX_print_vector(self, *args)

    def print_dense(self, *args):
        r"""
        print_dense(SX self, bool truncate=True)


        [INTERNAL] 
        Print dense matrix-stype.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L889

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L686-L688


        """
        return _casadi.SX_print_dense(self, *args)

    def print_sparse(self, *args):
        r"""
        print_sparse(SX self, bool truncate=True)


        [INTERNAL] 
        Print sparse matrix style.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L892

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_impl.hpp#L691-L693


        """
        return _casadi.SX_print_sparse(self, *args)

    def clear(self, *args):
        r"""
        clear(SX self)


        [INTERNAL] 
        """
        return _casadi.SX_clear(self, *args)

    def resize(self, *args):
        r"""
        resize(SX self, casadi_int nrow, casadi_int ncol)


        [INTERNAL] 
        """
        return _casadi.SX_resize(self, *args)

    def reserve(self, *args):
        r"""
        reserve(SX self, casadi_int nnz)
        reserve(SX self, casadi_int nnz, casadi_int ncol)


        [INTERNAL] 
        """
        return _casadi.SX_reserve(self, *args)

    def erase(self, *args):
        r"""
        erase(SX self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)
        erase(SX self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, bool ind1=False)


        [INTERNAL] 
        Erase a submatrix (leaving structural zeros in its place)

        Erase elements of a matrix

        Extra doc: https://github.com/casadi/casadi/wiki/L_19g

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L937


        """
        return _casadi.SX_erase(self, *args)

    def remove(self, *args):
        r"""
        remove(SX self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc)


        [INTERNAL] 
        Remove columns and rows.

        Remove/delete rows and/or columns of a matrix

        Extra doc: https://github.com/casadi/casadi/wiki/L_19h

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L944


        """
        return _casadi.SX_remove(self, *args)

    def enlarge(self, *args):
        r"""
        enlarge(SX self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)


        [INTERNAL] 
        Enlarge matrix.

        Make the matrix larger by inserting empty rows and columns, keeping 
        the 
        existing non-zeros

        Extra doc: https://github.com/casadi/casadi/wiki/L_19i

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L952


        """
        return _casadi.SX_enlarge(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(SX self) -> Sparsity


        [INTERNAL] 
        Get an owning reference to the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_19j

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L979


        """
        return _casadi.SX_sparsity(self, *args)

    @staticmethod
    def triplet(*args):
        r"""
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, SX d) -> SX
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, SX d, casadi_int nrow, casadi_int ncol) -> SX
        triplet(std::vector< casadi_int,std::allocator< casadi_int > > const & row, std::vector< casadi_int,std::allocator< casadi_int > > const & col, SX d, std::pair< casadi_int,casadi_int > const & rc) -> SX
        """
        return _casadi.SX_triplet(*args)

    @staticmethod
    def inf(*args):
        r"""
        inf(Sparsity sp) -> SX
        inf(casadi_int nrow=1, casadi_int ncol=1) -> SX
        inf(std::pair< casadi_int,casadi_int > const & rc) -> SX


        [INTERNAL] 
        create a matrix with all inf

        Extra doc: https://github.com/casadi/casadi/wiki/L_19k

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1005


        """
        return _casadi.SX_inf(*args)

    @staticmethod
    def nan(*args):
        r"""
        nan(Sparsity sp) -> SX
        nan(casadi_int nrow=1, casadi_int ncol=1) -> SX
        nan(std::pair< casadi_int,casadi_int > const & rc) -> SX


        [INTERNAL] 
        create a matrix with all nan

        Extra doc: https://github.com/casadi/casadi/wiki/L_19l

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1014


        """
        return _casadi.SX_nan(*args)

    @staticmethod
    def eye(*args):
        r"""eye(casadi_int n) -> SX"""
        return _casadi.SX_eye(*args)

    def element_hash(self, *args):
        r"""element_hash(SX self) -> casadi_int"""
        return _casadi.SX_element_hash(self, *args)

    def is_regular(self, *args):
        r"""is_regular(SX self) -> bool"""
        return _casadi.SX_is_regular(self, *args)

    def is_smooth(self, *args):
        r"""is_smooth(SX self) -> bool"""
        return _casadi.SX_is_smooth(self, *args)

    def is_leaf(self, *args):
        r"""is_leaf(SX self) -> bool"""
        return _casadi.SX_is_leaf(self, *args)

    def is_commutative(self, *args):
        r"""is_commutative(SX self) -> bool"""
        return _casadi.SX_is_commutative(self, *args)

    def is_symbolic(self, *args):
        r"""is_symbolic(SX self) -> bool"""
        return _casadi.SX_is_symbolic(self, *args)

    def is_valid_input(self, *args):
        r"""is_valid_input(SX self) -> bool"""
        return _casadi.SX_is_valid_input(self, *args)

    def has_duplicates(self, *args):
        r"""has_duplicates(SX self) -> bool"""
        return _casadi.SX_has_duplicates(self, *args)

    def reset_input(self, *args):
        r"""reset_input(SX self)"""
        return _casadi.SX_reset_input(self, *args)

    def is_constant(self, *args):
        r"""
        is_constant(SX self) -> bool


        [INTERNAL] 
        Check if the matrix is constant (note that false negative 
        answers are 
        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19v

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1085


        """
        return _casadi.SX_is_constant(self, *args)

    def is_integer(self, *args):
        r"""
        is_integer(SX self) -> bool


        [INTERNAL] 
        Check if the matrix is integer-valued.

        (note that false negative answers are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19w

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1092


        """
        return _casadi.SX_is_integer(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(SX self) -> bool


        [INTERNAL] 
        check if the matrix is 0 (note that false negative answers are 

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19x

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1097


        """
        return _casadi.SX_is_zero(self, *args)

    def is_one(self, *args):
        r"""
        is_one(SX self) -> bool


        [INTERNAL] 
        check if the matrix is 1 (note that false negative answers are 

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19y

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1102


        """
        return _casadi.SX_is_one(self, *args)

    def is_minus_one(self, *args):
        r"""
        is_minus_one(SX self) -> bool


        [INTERNAL] 
        check if the matrix is -1 (note that false negative answers are

        possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_19z

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1107


        """
        return _casadi.SX_is_minus_one(self, *args)

    def is_eye(self, *args):
        r"""
        is_eye(SX self) -> bool


        [INTERNAL] 
        check if the matrix is an identity matrix (note that false 
        negative 
        answers

        are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1114


        """
        return _casadi.SX_is_eye(self, *args)

    def op(self, *args):
        r"""op(SX self) -> casadi_int"""
        return _casadi.SX_op(self, *args)

    def is_op(self, *args):
        r"""is_op(SX self, casadi_int op) -> bool"""
        return _casadi.SX_is_op(self, *args)

    def has_zeros(self, *args):
        r"""
        has_zeros(SX self) -> bool


        [INTERNAL] 
        Check if the matrix has any zero entries which are not 
        structural 
        zeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1125


        """
        return _casadi.SX_has_zeros(self, *args)

    def nonzeros(self, *args):
        r"""
        nonzeros(SX self) -> std::vector< casadi::SXElem,std::allocator< casadi::SXElem > >


        [INTERNAL] 
        Get all nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1142


        """
        return _casadi.SX_nonzeros(self, *args)

    def elements(self, *args):
        r"""
        elements(SX self) -> std::vector< casadi::SXElem,std::allocator< casadi::SXElem > >


        [INTERNAL] 
        Get all elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1135


        """
        return _casadi.SX_elements(self, *args)

    def __float__(self, *args):
        r"""__float__(SX self) -> double"""
        return _casadi.SX___float__(self, *args)

    def __int__(self, *args):
        r"""__int__(SX self) -> casadi_int"""
        return _casadi.SX___int__(self, *args)

    def name(self, *args):
        r"""name(SX self) -> std::string"""
        return _casadi.SX_name(self, *args)

    def dep(self, *args):
        r"""dep(SX self, casadi_int ch=0) -> SX"""
        return _casadi.SX_dep(self, *args)

    def n_dep(self, *args):
        r"""n_dep(SX self) -> casadi_int"""
        return _casadi.SX_n_dep(self, *args)

    @staticmethod
    def set_precision(*args):
        r"""set_precision(casadi_int precision)"""
        return _casadi.SX_set_precision(*args)

    @staticmethod
    def set_width(*args):
        r"""set_width(casadi_int width)"""
        return _casadi.SX_set_width(*args)

    @staticmethod
    def set_scientific(*args):
        r"""set_scientific(bool scientific)"""
        return _casadi.SX_set_scientific(*args)

    @staticmethod
    def rng(*args):
        r"""rng(casadi_int seed)"""
        return _casadi.SX_rng(*args)

    @staticmethod
    def rand(*args):
        r"""
        rand(casadi_int nrow=1, casadi_int ncol=1) -> SX
        rand(Sparsity sp) -> SX
        rand(std::pair< casadi_int,casadi_int > const & rc) -> SX


        [INTERNAL] 
        Create a matrix with uniformly distributed random numbers.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ab

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1201


        """
        return _casadi.SX_rand(*args)

    def export_code(self, *args):
        r"""export_code(SX self, std::string const & lang, casadi::Dict const & options=casadi::Dict())"""
        return _casadi.SX_export_code(self, *args)

    def info(self, *args):
        r"""info(SX self) -> casadi::Dict"""
        return _casadi.SX_info(self, *args)

    def serialize(self, *args):
        r"""
        serialize(SX self) -> std::string
        serialize(SX self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ah

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1249


        """
        return _casadi.SX_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""
        deserialize(std::istream & stream) -> SX
        deserialize(std::string const & s) -> SX
        deserialize(casadi::DeserializingStream & s) -> SX
        """
        return _casadi.SX_deserialize(*args)

    def to_file(self, *args):
        r"""
        to_file(SX self, std::string const & filename, std::string const & format="")


        [INTERNAL] 
        Export numerical matrix to file

        Supported formats:



        ::

          *   - .mtx   Matrix Market (sparse)
          *   - .txt   Ascii full precision representation (sparse)
          *            Whitespace separated, aligned.
          *            Comments with # % or /
          *            Uses C locale
          *            Structural zeros represented by 00
          *            Does not scale well for large sparse matrices
          * 



        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L1269


        """
        return _casadi.SX_to_file(self, *args)

    @staticmethod
    def from_file(*args):
        r"""from_file(std::string const & filename, std::string const & format_hint="") -> DM"""
        return _casadi.SX_from_file(*args)

    @property
    def shape(self):
        return (self.size1(),self.size2())

    def reshape(self,arg):
        return _casadi.reshape(self,arg)

    @property
    def T(self):
        return _casadi.transpose(self)

    def __getitem__(self, s):
          if isinstance(s, tuple) and len(s)==2:
            if s[1] is None: raise TypeError("Cannot slice with None")
            return self.get(False, s[0], s[1])
          return self.get(False, s)

    def __iter__(self):
      raise Exception("""CasADi matrices are not iterable by design.
                      Did you mean to iterate over m.nz, with m IM/DM/SX?
                      Did you mean to iterate over horzsplit(m,1)/vertsplit(m,1) with m IM/DM/SX/MX?
                      """)

    def __setitem__(self,s,val):
          if isinstance(s,tuple) and len(s)==2:
            return self.set(val, False, s[0], s[1])
          return self.set(val, False, s)

    @property
    def nz(self):
      return NZproxy(self)




    __array_priority__ = 1001.0

    def __array_wrap__(self,out_arr,context=None):
      if context is None:
        return out_arr
      name = context[0].__name__
      args = list(context[1])

      if len(context[1])==3:
        raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name)

      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]

      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      if name in conversion:
        name = conversion[name]
      if len(context[1])==2 and context[1][1] is self and not(context[1][0] is self):
        name = 'r' + name
        args.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      fun=getattr(self, name)
      return fun(*args[1:])

    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      name = ufunc.__name__
      inputs = list(inputs)
      if len(inputs)==3:
        import warnings
        warnings.warn("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name, RuntimeWarning)
        return NotImplemented
      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]
      if name in conversion:
        name = conversion[name]
      if len(inputs)==2 and inputs[1] is self and not(inputs[0] is self):
        name = 'r' + name
        inputs.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      try:
        assert method=="__call__"
        fun=getattr(self, name)
        return fun(*inputs[1:])
      except Exception as e:
        if "Dimension mismatch" in str(e):
          import sys
          if sys.version_info[0] < 3:
              raise RuntimeError(str(e))
          else:
              raise e
#Fall back to numpy conversion
        new_inputs = list(inputs)
        try:
          new_inputs[0] = new_inputs[0].full()
        except:
          import warnings
          warnings.warn("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                                 + "This may occur when you pass a CasADi object to a numpy function.\n"
                                 + "Use an equivalent CasADi function instead of that numpy function.", RuntimeWarning)
          return NotImplemented
        return new_inputs[0].__array_ufunc__(ufunc, method, *new_inputs, **kwargs)


    def __array__(self,*args,**kwargs):
      import numpy as n
      if len(args) > 1 and isinstance(args[1],tuple) and isinstance(args[1][0],n.ufunc) and isinstance(args[1][0],n.ufunc) and len(args[1])>1 and args[1][0].nin==len(args[1][1]):
        if len(args[1][1])==3:
          raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b'. This is not supported when 'a' is a numpy type, and cannot be supported without changing numpy itself. Either upgrade a to a CasADi type first, or use 'a = a + b'. " % args[1][0].__name__)
        return n.array([n.nan])
      else:
        if hasattr(self,'__array_custom__'):
          return self.__array_custom__(*args,**kwargs)
        else:
          try:
            return self.full()
          except:
            if self.is_scalar(True):
#Needed for#2743
              E=n.empty((),dtype=object)
              E[()] = self
              return E
            else:
              raise Exception("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                        + "This may occur when you pass a CasADi object to a numpy function.\n"
                        + "Use an equivalent CasADi function instead of that numpy function.")



    def __init__(self, *args):
        r"""
        __init__(SX self) -> SX
        __init__(SX self, SX m) -> SX
        __init__(SX self, casadi_int nrow, casadi_int ncol) -> SX
        __init__(SX self, Sparsity sp) -> SX
        __init__(SX self, Sparsity sp, SX d) -> SX
        __init__(SX self, double val) -> SX
        __init__(SX self, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & m) -> SX
        __init__(SX self, std::vector< double,std::allocator< double > > const & x) -> SX
        __init__(SX self, DM x) -> SX
        """
        _casadi.SX_swiginit(self, _casadi.new_SX(*args))
    __swig_destroy__ = _casadi.delete_SX

# Register SX in _casadi:
_casadi.SX_swigregister(SX)
class MX(GenericExpressionCommon, PrintableCommon, GenMX, SharedObject):
    r"""


    [INTERNAL] 
     MX -  Matrix expression.

    The  MX class is used to build up trees made up from MXNodes. It is a more 

    general graph representation than the scalar expression, SX, and much 
    less 
    efficient for small objects. On the other hand, the class allows 
    much more 
    general operations than does SX, in particular matrix valued
     operations and
     calls to arbitrary differentiable functions.

    The  MX class is designed to have identical syntax with the Matrix<> 
    template
     class, and uses DM (i.e. Matrix<double>) as its internal 

    representation of the values at a node. By keeping the syntaxes 
    identical, 
    it is possible to switch from one class to the other, as 
    well as inlining  
    MX functions to  SXElem functions.

    Note that an operation is always "lazy", making a matrix 
    multiplication 
    will create a matrix multiplication node, not perform 
    the actual 
    multiplication.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_py

    C++ includes: mx.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.MX_type_name(*args)
    __swig_destroy__ = _casadi.delete_MX

    def __bool__(self, *args):
        r"""
        __bool__(MX self) -> bool


        [INTERNAL] 
        Returns the truth value of an  MX expression.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L184

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L137-L139


        """
        return _casadi.MX___bool__(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(MX self) -> Sparsity


        [INTERNAL] 
        Get an owning reference to the sparsity pattern.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qd

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L189

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L189-L189


        """
        return _casadi.MX_sparsity(self, *args)

    def erase(self, *args):
        r"""
        erase(MX self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)
        erase(MX self, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, bool ind1=False)


        [INTERNAL] 
        Erase a submatrix (leaving structural zeros in its place)

        Erase elements of a matrix

        Extra doc: https://github.com/casadi/casadi/wiki/L_qf

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L204

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L604-L616


        """
        return _casadi.MX_erase(self, *args)

    def enlarge(self, *args):
        r"""
        enlarge(MX self, casadi_int nrow, casadi_int ncol, std::vector< casadi_int,std::allocator< casadi_int > > const & rr, std::vector< casadi_int,std::allocator< casadi_int > > const & cc, bool ind1=False)


        [INTERNAL] 
        Enlarge matrix.

        Make the matrix larger by inserting empty rows and columns, keeping 
        the 
        existing non-zeros

        Extra doc: https://github.com/casadi/casadi/wiki/L_qg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L211

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L618-L626


        """
        return _casadi.MX_enlarge(self, *args)

    def __neg__(self, *args):
        r"""__neg__(MX self) -> MX"""
        return _casadi.MX___neg__(self, *args)

    def dep(self, *args):
        r"""
        dep(MX self, casadi_int ch=0) -> MX


        [INTERNAL] 
        Get the nth dependency as  MX.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qj

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L236

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L730-L732


        """
        return _casadi.MX_dep(self, *args)

    def n_out(self, *args):
        r"""
        n_out(MX self) -> casadi_int


        [INTERNAL] 
        Number of outputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qk

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L241

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L841-L843


        """
        return _casadi.MX_n_out(self, *args)

    def get_output(self, *args):
        r"""
        get_output(MX self, casadi_int oind) -> MX


        [INTERNAL] 
        Get an output.

        Extra doc: https://github.com/casadi/casadi/wiki/L_ql

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L246

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L845-L847


        """
        return _casadi.MX_get_output(self, *args)

    def n_dep(self, *args):
        r"""
        n_dep(MX self) -> casadi_int


        [INTERNAL] 
        Get the number of dependencies of a binary  SXElem.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qm

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L251

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L734-L736


        """
        return _casadi.MX_n_dep(self, *args)

    def name(self, *args):
        r"""
        name(MX self) -> std::string


        [INTERNAL] 
        Get the name.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L254

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L738-L740


        """
        return _casadi.MX_name(self, *args)

    def __float__(self, *args):
        r"""__float__(MX self) -> double"""
        return _casadi.MX___float__(self, *args)

    def to_DM(self, *args):
        r"""to_DM(MX self) -> DM"""
        return _casadi.MX_to_DM(self, *args)

    def is_symbolic(self, *args):
        r"""
        is_symbolic(MX self) -> bool


        [INTERNAL] 
        Check if symbolic.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L263

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L742-L744


        """
        return _casadi.MX_is_symbolic(self, *args)

    def is_constant(self, *args):
        r"""
        is_constant(MX self) -> bool


        [INTERNAL] 
        Check if constant.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L266

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L746-L748


        """
        return _casadi.MX_is_constant(self, *args)

    def is_call(self, *args):
        r"""
        is_call(MX self) -> bool


        [INTERNAL] 
        Check if evaluation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L269

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L750-L752


        """
        return _casadi.MX_is_call(self, *args)

    def which_function(self, *args):
        r"""
        which_function(MX self) -> Function


        [INTERNAL] 
        Get function - only valid when  is_call() is true.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L272

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L754-L756


        """
        return _casadi.MX_which_function(self, *args)

    def is_output(self, *args):
        r"""
        is_output(MX self) -> bool


        [INTERNAL] 
        Check if evaluation output.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L275

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L758-L760


        """
        return _casadi.MX_is_output(self, *args)

    def which_output(self, *args):
        r"""
        which_output(MX self) -> casadi_int


        [INTERNAL] 
        Get the index of evaluation output - only valid when  
        is_output() is true.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L278

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L762-L764


        """
        return _casadi.MX_which_output(self, *args)

    def is_op(self, *args):
        r"""
        is_op(MX self, casadi_int op) -> bool


        [INTERNAL] 
        Is it a certain operation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L281

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L766-L768


        """
        return _casadi.MX_is_op(self, *args)

    def is_multiplication(self, *args):
        r"""
        is_multiplication(MX self) -> bool


        [INTERNAL] 
        Check if multiplication.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L284

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L770-L772


        """
        return _casadi.MX_is_multiplication(self, *args)

    def is_commutative(self, *args):
        r"""
        is_commutative(MX self) -> bool


        [INTERNAL] 
        Check if commutative operation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L287

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L822-L827


        """
        return _casadi.MX_is_commutative(self, *args)

    def is_norm(self, *args):
        r"""
        is_norm(MX self) -> bool


        [INTERNAL] 
        Check if norm.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L290

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L774-L776


        """
        return _casadi.MX_is_norm(self, *args)

    def is_valid_input(self, *args):
        r"""
        is_valid_input(MX self) -> bool


        [INTERNAL] 
        Check if matrix can be used to define function inputs.

        Valid inputs for MXFunctions are combinations of Reshape, 
        concatenations 
        and SymbolicMX

        Extra doc: https://github.com/casadi/casadi/wiki/L_qn

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L297

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L897-L899


        """
        return _casadi.MX_is_valid_input(self, *args)

    def n_primitives(self, *args):
        r"""
        n_primitives(MX self) -> casadi_int


        [INTERNAL] 
        Get the number of primitives for MXFunction inputs/outputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qo

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L302

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L901-L903


        """
        return _casadi.MX_n_primitives(self, *args)

    def primitives(self, *args):
        r"""
        primitives(MX self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Get primitives.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qp

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L307

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L905-L911


        """
        return _casadi.MX_primitives(self, *args)

    def split_primitives(self, *args):
        r"""
        split_primitives(MX self, MX x) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Split up an expression along symbolic primitives.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L312

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L913-L919


        """
        return _casadi.MX_split_primitives(self, *args)

    def join_primitives(self, *args):
        r"""
        join_primitives(MX self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & v) -> MX


        [INTERNAL] 
        Join an expression along symbolic primitives.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qr

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L317

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L921-L927


        """
        return _casadi.MX_join_primitives(self, *args)

    def has_duplicates(self, *args):
        r"""has_duplicates(MX self) -> bool"""
        return _casadi.MX_has_duplicates(self, *args)

    def reset_input(self, *args):
        r"""reset_input(MX self)"""
        return _casadi.MX_reset_input(self, *args)

    def is_eye(self, *args):
        r"""
        is_eye(MX self) -> bool


        [INTERNAL] 
        check if identity

        Extra doc: https://github.com/casadi/casadi/wiki/L_qu

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L339

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L937-L939


        """
        return _casadi.MX_is_eye(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(MX self) -> bool


        [INTERNAL] 
        check if zero (note that false negative answers are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_qv

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L344

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L941-L947


        """
        return _casadi.MX_is_zero(self, *args)

    def is_one(self, *args):
        r"""
        is_one(MX self) -> bool


        [INTERNAL] 
        check if zero (note that false negative answers are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_qw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L349

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L949-L951


        """
        return _casadi.MX_is_one(self, *args)

    def is_minus_one(self, *args):
        r"""
        is_minus_one(MX self) -> bool


        [INTERNAL] 
        check if zero (note that false negative answers are possible)

        Extra doc: https://github.com/casadi/casadi/wiki/L_qx

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L354

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L953-L955


        """
        return _casadi.MX_is_minus_one(self, *args)

    def is_transpose(self, *args):
        r"""
        is_transpose(MX self) -> bool


        [INTERNAL] 
        Is the expression a transpose?

        Extra doc: https://github.com/casadi/casadi/wiki/L_qy

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L359

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L957-L959


        """
        return _casadi.MX_is_transpose(self, *args)

    def is_regular(self, *args):
        r"""
        is_regular(MX self) -> bool


        [INTERNAL] 
        Checks if expression does not contain NaN or Inf.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L362

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L961-L967


        """
        return _casadi.MX_is_regular(self, *args)

    def is_binary(self, *args):
        r"""
        is_binary(MX self) -> bool


        [INTERNAL] 
        Is binary operation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L365

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L786-L788


        """
        return _casadi.MX_is_binary(self, *args)

    def is_unary(self, *args):
        r"""
        is_unary(MX self) -> bool


        [INTERNAL] 
        Is unary operation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L368

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L790-L792


        """
        return _casadi.MX_is_unary(self, *args)

    def op(self, *args):
        r"""
        op(MX self) -> casadi_int


        [INTERNAL] 
        Get operation type.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L371

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L794-L796


        """
        return _casadi.MX_op(self, *args)

    def info(self, *args):
        r"""
        info(MX self) -> casadi::Dict


        [INTERNAL] 
        Obtain information about node

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L374

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L798-L800


        """
        return _casadi.MX_info(self, *args)

    def serialize(self, *args):
        r"""
        serialize(MX self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_qz

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L379

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L802-L804


        """
        return _casadi.MX_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""deserialize(casadi::DeserializingStream & s) -> MX"""
        return _casadi.MX_deserialize(*args)

    def get_temp(self, *args):
        r"""get_temp(MX self) -> casadi_int"""
        return _casadi.MX_get_temp(self, *args)

    def set_temp(self, *args):
        r"""set_temp(MX self, casadi_int t)"""
        return _casadi.MX_set_temp(self, *args)

    @staticmethod
    def binary(*args):
        r"""
        binary(casadi_int op, MX x, MX y) -> MX


        [INTERNAL] 
        Create nodes by their ID.

        Extra doc: https://github.com/casadi/casadi/wiki/L_r1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L398

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L507-L532


        """
        return _casadi.MX_binary(*args)

    @staticmethod
    def unary(*args):
        r"""
        unary(casadi_int op, MX x) -> MX


        [INTERNAL] 
        Create nodes by their ID.

        Extra doc: https://github.com/casadi/casadi/wiki/L_r1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L399

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L534-L536


        """
        return _casadi.MX_unary(*args)

    @staticmethod
    def inf(*args):
        r"""
        inf(Sparsity sp) -> MX
        inf(casadi_int nrow=1, casadi_int ncol=1) -> MX
        inf(std::pair< casadi_int,casadi_int > const & rc) -> MX


        [INTERNAL] 
        create a matrix with all inf

        Extra doc: https://github.com/casadi/casadi/wiki/L_r2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L408

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L554-L556


        """
        return _casadi.MX_inf(*args)

    @staticmethod
    def nan(*args):
        r"""
        nan(Sparsity sp) -> MX
        nan(casadi_int nrow=1, casadi_int ncol=1) -> MX
        nan(std::pair< casadi_int,casadi_int > const & rc) -> MX


        [INTERNAL] 
        create a matrix with all nan

        Extra doc: https://github.com/casadi/casadi/wiki/L_r3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L417

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L566-L568


        """
        return _casadi.MX_nan(*args)

    @staticmethod
    def eye(*args):
        r"""eye(casadi_int n) -> MX"""
        return _casadi.MX_eye(*args)

    def get(self, *args):
        r"""
        get(MX self, bool ind1, Slice rr)
        get(MX self, bool ind1, casadi::Matrix< casadi_int > const & rr)
        get(MX self, bool ind1, Sparsity sp)
        get(MX self, bool ind1, MX rr)
        get(MX self, bool ind1, casadi_int const rr)
        get(MX self, bool ind1, Slice rr, Slice cc)
        get(MX self, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        get(MX self, bool ind1, Slice rr, casadi_int cc)
        get(MX self, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        get(MX self, bool ind1, casadi_int rr, Slice cc)
        get(MX self, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        get(MX self, bool ind1, casadi_int rr, casadi_int cc)
        get(MX self, bool ind1, MX rr, Slice cc)
        get(MX self, bool ind1, Slice rr, MX cc)
        get(MX self, bool ind1, MX rr, MX cc)


        [INTERNAL] 
        Get a submatrix, two arguments

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L460

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L218-L221


        """
        return _casadi.MX_get(self, *args)

    def set(self, *args):
        r"""
        set(MX self, MX m, bool ind1, Slice rr)
        set(MX self, MX m, bool ind1, casadi::Matrix< casadi_int > const & rr)
        set(MX self, MX m, bool ind1, Sparsity sp)
        set(MX self, MX m, bool ind1, Slice rr, Slice cc)
        set(MX self, MX m, bool ind1, Slice rr, casadi::Matrix< casadi_int > const & cc)
        set(MX self, MX m, bool ind1, casadi::Matrix< casadi_int > const & rr, Slice cc)
        set(MX self, MX m, bool ind1, casadi::Matrix< casadi_int > const & rr, casadi::Matrix< casadi_int > const & cc)
        """
        return _casadi.MX_set(self, *args)

    def get_nz(self, *args):
        r"""
        get_nz(MX self, bool ind1, Slice kk)
        get_nz(MX self, bool ind1, casadi::Matrix< casadi_int > const & kk)
        get_nz(MX self, bool ind1, MX kk)
        get_nz(MX self, bool ind1, casadi_int kk)
        get_nz(MX self, bool ind1, MX inner, Slice outer)
        get_nz(MX self, bool ind1, Slice inner, MX outer)
        get_nz(MX self, bool ind1, MX inner, MX outer)


        [INTERNAL] 
        Get a set of nonzeros

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L488

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L427-L430


        """
        return _casadi.MX_get_nz(self, *args)

    def set_nz(self, *args):
        r"""
        set_nz(MX self, MX m, bool ind1, Slice kk)
        set_nz(MX self, MX m, bool ind1, casadi::Matrix< casadi_int > const & kk)
        set_nz(MX self, MX m, bool ind1, MX kk)
        set_nz(MX self, MX m, bool ind1, casadi_int kk)


        [INTERNAL] 
        Set a set of nonzeros

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L496

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L496-L496


        """
        return _casadi.MX_set_nz(self, *args)

    @staticmethod
    def einstein(*args):
        r"""
        einstein(MX A, MX B, MX C, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> MX
        einstein(MX A, MX B, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> MX


        [INTERNAL] 
        Computes an einstein dense tensor contraction.

        Computes the product: C_c = A_a + B_b where a b c are index/einstein 

        notation in an encoded form

        For example, an matrix-matrix product may be written as: C_ij = A_ik 
        B_kj

        The encoded form uses strictly negative numbers to indicate labels. 
        For the
         above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

        Extra doc: https://github.com/casadi/casadi/wiki/L_r5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L520

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L646-L652


        """
        return _casadi.MX_einstein(*args)

    @staticmethod
    def bspline_dual(*args):
        r"""
        bspline_dual(std::vector< double,std::allocator< double > > const & x, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & knots, std::vector< casadi_int,std::allocator< casadi_int > > const & degree, casadi::Dict const & opts=casadi::Dict()) -> DM


        [INTERNAL] 
        """
        return _casadi.MX_bspline_dual(*args)

    @staticmethod
    def interpn_linear(*args):
        r"""interpn_linear(std::vector< casadi::MX,std::allocator< casadi::MX > > const & x, MX v, std::vector< casadi::MX,std::allocator< casadi::MX > > const & xq, casadi::Dict const & opts=casadi::Dict()) -> MX"""
        return _casadi.MX_interpn_linear(*args)

    def printme(self, *args):
        r"""
        printme(MX self, MX b) -> MX


        [INTERNAL] 
        """
        return _casadi.MX_printme(self, *args)

    def attachAssert(self, *args):
        r"""
        attachAssert(MX self, MX y, std::string const & fail_message="") -> MX


        [INTERNAL] 
        returns itself, but with an assertion attached

        If y does not evaluate to 1, a runtime error is raised

        Extra doc: https://github.com/casadi/casadi/wiki/L_rg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L851

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L699-L704


        """
        return _casadi.MX_attachAssert(self, *args)

    def monitor(self, *args):
        r"""
        monitor(MX self, std::string const & comment) -> MX


        [INTERNAL] 
        Monitor an expression.

        Returns itself, but with the side effect of printing the nonzeros 
        along 
        with a comment

        Extra doc: https://github.com/casadi/casadi/wiki/L_rh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L858

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L706-L708


        """
        return _casadi.MX_monitor(self, *args)

    def mapping(self, *args):
        r"""
        mapping(MX self) -> casadi::Matrix< casadi_int >


        [INTERNAL] 
        Get an IM representation of a GetNonzeros or SetNonzeros node.

        Extra doc: https://github.com/casadi/casadi/wiki/L_ri

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L866

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L829-L831


        """
        return _casadi.MX_mapping(self, *args)

    @staticmethod
    def set_max_depth(*args):
        r"""set_max_depth(casadi_int eq_depth=1)"""
        return _casadi.MX_set_max_depth(*args)

    @staticmethod
    def get_max_depth(*args):
        r"""get_max_depth() -> casadi_int"""
        return _casadi.MX_get_max_depth(*args)

    @staticmethod
    def test_cast(*args):
        r"""test_cast(casadi::SharedObjectInternal const * ptr) -> bool"""
        return _casadi.MX_test_cast(*args)

    @staticmethod
    def get_input(*args):
        r"""get_input(Function f) -> std::vector< casadi::MX,std::allocator< casadi::MX > >"""
        return _casadi.MX_get_input(*args)

    @staticmethod
    def get_free(*args):
        r"""get_free(Function f) -> std::vector< casadi::MX,std::allocator< casadi::MX > >"""
        return _casadi.MX_get_free(*args)

    def eval_mx(self, *args):
        r"""
        eval_mx(MX self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg)


        [INTERNAL] 
        Evaluate the  MX node with new symbolic dependencies.

        Extra doc: https://github.com/casadi/casadi/wiki/L_rn

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L897

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L2288-L2294


        """
        return _casadi.MX_eval_mx(self, *args)

    @property
    def shape(self):
        return (self.size1(),self.size2())

    def reshape(self,arg):
        return _casadi.reshape(self,arg)

    @property
    def T(self):
        return _casadi.transpose(self)

    def __getitem__(self, s):
          if isinstance(s, tuple) and len(s)==2:
            if s[1] is None: raise TypeError("Cannot slice with None")
            return self.get(False, s[0], s[1])
          return self.get(False, s)

    def __iter__(self):
      raise Exception("""CasADi matrices are not iterable by design.
                      Did you mean to iterate over m.nz, with m IM/DM/SX?
                      Did you mean to iterate over horzsplit(m,1)/vertsplit(m,1) with m IM/DM/SX/MX?
                      """)

    def __setitem__(self,s,val):
          if isinstance(s,tuple) and len(s)==2:
            return self.set(val, False, s[0], s[1])
          return self.set(val, False, s)

    @property
    def nz(self):
      return NZproxy(self)




    __array_priority__ = 1002.0

    def __array_wrap__(self,out_arr,context=None):
      if context is None:
        return out_arr
      name = context[0].__name__
      args = list(context[1])

      if len(context[1])==3:
        raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name)

      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]

      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      if name in conversion:
        name = conversion[name]
      if len(context[1])==2 and context[1][1] is self and not(context[1][0] is self):
        name = 'r' + name
        args.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      fun=getattr(self, name)
      return fun(*args[1:])

    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
      conversion = {"multiply": "mul", "divide": "div", "true_divide": "div", "subtract":"sub","power":"pow","greater_equal":"ge","less_equal": "le", "less": "lt", "greater": "gt", "equal": "eq", "not_equal": "ne"}
      name = ufunc.__name__
      inputs = list(inputs)
      if len(inputs)==3:
        import warnings
        warnings.warn("Error with %s. Looks like you are using an assignment operator, such as 'a+=b' where 'a' is a numpy type. This is not supported, and cannot be supported without changing numpy." % name, RuntimeWarning)
        return NotImplemented
      if "vectorized" in name:
          name = name[:-len(" (vectorized)")]
      if name in conversion:
        name = conversion[name]
      if len(inputs)==2 and inputs[1] is self and not(inputs[0] is self):
        name = 'r' + name
        inputs.reverse()
      if not(hasattr(self,name)) or ('mul' in name):
        name = '__' + name + '__'
      try:
        assert method=="__call__"
        fun=getattr(self, name)
        return fun(*inputs[1:])
      except Exception as e:
        if "Dimension mismatch" in str(e):
          import sys
          if sys.version_info[0] < 3:
              raise RuntimeError(str(e))
          else:
              raise e
#Fall back to numpy conversion
        new_inputs = list(inputs)
        try:
          new_inputs[0] = new_inputs[0].full()
        except:
          import warnings
          warnings.warn("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                                 + "This may occur when you pass a CasADi object to a numpy function.\n"
                                 + "Use an equivalent CasADi function instead of that numpy function.", RuntimeWarning)
          return NotImplemented
        return new_inputs[0].__array_ufunc__(ufunc, method, *new_inputs, **kwargs)


    def __array__(self,*args,**kwargs):
      import numpy as n
      if len(args) > 1 and isinstance(args[1],tuple) and isinstance(args[1][0],n.ufunc) and isinstance(args[1][0],n.ufunc) and len(args[1])>1 and args[1][0].nin==len(args[1][1]):
        if len(args[1][1])==3:
          raise Exception("Error with %s. Looks like you are using an assignment operator, such as 'a+=b'. This is not supported when 'a' is a numpy type, and cannot be supported without changing numpy itself. Either upgrade a to a CasADi type first, or use 'a = a + b'. " % args[1][0].__name__)
        return n.array([n.nan])
      else:
        if hasattr(self,'__array_custom__'):
          return self.__array_custom__(*args,**kwargs)
        else:
          try:
            return self.full()
          except:
            if self.is_scalar(True):
#Needed for#2743
              E=n.empty((),dtype=object)
              E[()] = self
              return E
            else:
              raise Exception("Implicit conversion of symbolic CasADi type to numeric matrix not supported.\n"
                        + "This may occur when you pass a CasADi object to a numpy function.\n"
                        + "Use an equivalent CasADi function instead of that numpy function.")



    def __init__(self, *args):
        r"""
        __init__(MX self) -> MX
        __init__(MX self, casadi_int nrow, casadi_int ncol) -> MX
        __init__(MX self, Sparsity sp) -> MX
        __init__(MX self, Sparsity sp, MX val) -> MX
        __init__(MX self, Sparsity sp, std::string const & fname) -> MX
        __init__(MX self, double x) -> MX
        __init__(MX self, DM x) -> MX
        __init__(MX self, MX other) -> MX
        """
        _casadi.MX_swiginit(self, _casadi.new_MX(*args))

# Register MX in _casadi:
_casadi.MX_swigregister(MX)

def attach_return_type(f,t):
  if not(hasattr(f,'func_annotations')):
    f.func_annotations = {}
  if not(isinstance(getattr(f,'func_annotations'),dict)):
    raise Exception("Cannot annotate this python Method to be a sparsitygenerator. Method has func_annotations attribute with unknown type.")
  f.func_annotations["return"] = t
  return f

def pyevaluate(f):
  return attach_return_type(f,None)

def pycallback(f):
  return attach_return_type(f,int)


def pyfunction(inputs,outputs):
  def wrap(f):

    @pyevaluate
    def fcustom(f2):
      res = f([f2.getInput(i) for i in range(f2.n_in())])
      if not isinstance(res,list):
        res = [res]
      for i in range(f2.n_out()):
        f2.setOutput(res[i],i)
    import warnings

    with warnings.catch_warnings():
      warnings.filterwarnings("ignore",category=DeprecationWarning)
      Fun = CustomFunction("CustomFunction",fcustom,inputs,outputs)
      return Fun

  return wrap

def PyFunction(name, obj, inputs, outputs, opts={}):
    @pyevaluate
    def fcustom(f):
      res = [f.getOutput(i) for i in range(f.n_out())]
      obj.evaluate([f.getInput(i) for i in range(f.n_in())],res)
      for i in range(f.n_out()): f.setOutput(res[i], i)

    import warnings

    with warnings.catch_warnings():
      warnings.filterwarnings("ignore",category=DeprecationWarning)
      return CustomFunction("CustomFunction", fcustom,
                            inputs, outputs, opts)


class Function(SharedObject, PrintableCommon):
    r"""


    [INTERNAL] 
     Function object.

    A  Function instance is a general multiple-input, multiple-output function 
    where 
    each input and output can be a sparse matrix.
     For an introduction to
     this class, see the CasADi user guide. Function is a reference counted and 
    immutable class; copying a class instance 
    is very cheap and its behavior 
    (with some exceptions) is not affected 
    by calling its member functions.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_1uw

    >List of available options

    +------------------+-----------------+------------------+------------------+
    |        Id        |      Type       |   Description    |     Used in      |
    +==================+=================+==================+==================+
    | ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for derivative   | Internal         |
    |                  |                 | calculation.When |                  |
    |                  |                 | there is an      |                  |
    |                  |                 | option of either |                  |
    |                  |                 | using forward or |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | directional      |                  |
    |                  |                 | derivatives, the |                  |
    |                  |                 | condition ad_wei |                  |
    |                  |                 | ght*nf<=(1-      |                  |
    |                  |                 | ad_weight)*na is |                  |
    |                  |                 | used where nf    |                  |
    |                  |                 | and na are       |                  |
    |                  |                 | estimates of the |                  |
    |                  |                 | number of        |                  |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | mode directional |                  |
    |                  |                 | derivatives      |                  |
    |                  |                 | needed. By       |                  |
    |                  |                 | default,         |                  |
    |                  |                 | ad_weight is     |                  |
    |                  |                 | calculated       |                  |
    |                  |                 | automatically,   |                  |
    |                  |                 | but this can be  |                  |
    |                  |                 | overridden by    |                  |
    |                  |                 | setting this     |                  |
    |                  |                 | option. In       |                  |
    |                  |                 | particular, 0    |                  |
    |                  |                 | means forcing    |                  |
    |                  |                 | forward mode and |                  |
    |                  |                 | 1 forcing        |                  |
    |                  |                 | reverse mode.    |                  |
    |                  |                 | Leave unset for  |                  |
    |                  |                 | (class specific) |                  |
    |                  |                 | heuristics.      |                  |
    +------------------+-----------------+------------------+------------------+
    | ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for sparsity     | Internal         |
    |                  |                 | pattern          |                  |
    |                  |                 | calculation calc |                  |
    |                  |                 | ulation.Override |                  |
    |                  |                 | s default        |                  |
    |                  |                 | behavior. Set to |                  |
    |                  |                 | 0 and 1 to force |                  |
    |                  |                 | forward and      |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | respectively.    |                  |
    |                  |                 | Cf. option       |                  |
    |                  |                 | "ad_weight".     |                  |
    |                  |                 | When set to -1,  |                  |
    |                  |                 | sparsity is      |                  |
    |                  |                 | completely       |                  |
    |                  |                 | ignored and      |                  |
    |                  |                 | dense matrices   |                  |
    |                  |                 | are used.        |                  |
    +------------------+-----------------+------------------+------------------+
    | always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | cache            | OT_DICT         | Prepopulate the  | casadi::Function |
    |                  |                 | function cache.  | Internal         |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | compiler         | OT_STRING       | Just-in-time     | casadi::Function |
    |                  |                 | compiler plugin  | Internal         |
    |                  |                 | to be used.      |                  |
    +------------------+-----------------+------------------+------------------+
    | custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
    |                  |                 | CasADi's AD. Use | Internal         |
    |                  |                 | together with    |                  |
    |                  |                 | 'jac_penalty':   |                  |
    |                  |                 | 0. Note: Highly  |                  |
    |                  |                 | experimental.    |                  |
    |                  |                 | Syntax may break |                  |
    |                  |                 | often.           |                  |
    +------------------+-----------------+------------------+------------------+
    | der_options      | OT_DICT         | Default options  | casadi::Function |
    |                  |                 | to be used to    | Internal         |
    |                  |                 | populate         |                  |
    |                  |                 | forward_options, |                  |
    |                  |                 | reverse_options, |                  |
    |                  |                 | and              |                  |
    |                  |                 | jacobian_options |                  |
    |                  |                 | before those     |                  |
    |                  |                 | options are      |                  |
    |                  |                 | merged in.       |                  |
    +------------------+-----------------+------------------+------------------+
    | derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
    |                  |                 | a derivative of  | Internal         |
    |                  |                 | another          |                  |
    |                  |                 | function. The    |                  |
    |                  |                 | type of          |                  |
    |                  |                 | derivative       |                  |
    |                  |                 | (directional     |                  |
    |                  |                 | derivative,      |                  |
    |                  |                 | Jacobian) is     |                  |
    |                  |                 | inferred from    |                  |
    |                  |                 | the function     |                  |
    |                  |                 | name.            |                  |
    +------------------+-----------------+------------------+------------------+
    | dump             | OT_BOOL         | Dump function to | casadi::Function |
    |                  |                 | file upon first  | Internal         |
    |                  |                 | evaluation.      |                  |
    |                  |                 | [false]          |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_dir         | OT_STRING       | Directory to     | casadi::Function |
    |                  |                 | dump             | Internal         |
    |                  |                 | inputs/outputs   |                  |
    |                  |                 | to. Make sure    |                  |
    |                  |                 | the directory    |                  |
    |                  |                 | exists [.]       |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_format      | OT_STRING       | Choose file      | casadi::Function |
    |                  |                 | format to dump   | Internal         |
    |                  |                 | matrices. See    |                  |
    |                  |                 | DM.from_file     |                  |
    |                  |                 | [mtx]            |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | to file          |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs to file  |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_fd        | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation by   |                  |
    |                  |                 | finite           |                  |
    |                  |                 | differencing.    |                  |
    |                  |                 | [default:        |                  |
    |                  |                 | false]]          |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_forward   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using forward    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobians of all |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | outputs with     |                  |
    |                  |                 | respect to all   |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | inputs - if      |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | transposed       |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using reverse    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | error_on_fail    | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when function    | ction            |
    |                  |                 | evaluation fails |                  |
    |                  |                 | (default true).  |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_method        | OT_STRING       | Method for       | casadi::Function |
    |                  |                 | finite           | Internal         |
    |                  |                 | differencing     |                  |
    |                  |                 | [default         |                  |
    |                  |                 | 'central']       |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_options       | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | finite           |                  |
    |                  |                 | difference       |                  |
    |                  |                 | instance         |                  |
    +------------------+-----------------+------------------+------------------+
    | forward_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | forward mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
    |                  |                 | option           | Internal         |
    |                  |                 | (ignored):       |                  |
    |                  |                 | Statistics are   |                  |
    |                  |                 | now always       |                  |
    |                  |                 | collected.       |                  |
    +------------------+-----------------+------------------+------------------+
    | input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
    |                  |                 | when the         | Internal         |
    |                  |                 | numerical values |                  |
    |                  |                 | of the inputs    |                  |
    |                  |                 | don't make sense |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each input if it | Internal         |
    |                  |                 | should be        |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each output if   | Internal         |
    |                  |                 | it should be     |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
    |                  |                 | for a number of  | Internal         |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | directions, it   |                  |
    |                  |                 | may be cheaper   |                  |
    |                  |                 | to compute first |                  |
    |                  |                 | the full         |                  |
    |                  |                 | jacobian and     |                  |
    |                  |                 | then multiply    |                  |
    |                  |                 | with seeds,      |                  |
    |                  |                 | rather than      |                  |
    |                  |                 | obtain the       |                  |
    |                  |                 | requested        |                  |
    |                  |                 | directions in a  |                  |
    |                  |                 | straightforward  |                  |
    |                  |                 | manner. Casadi   |                  |
    |                  |                 | uses a heuristic |                  |
    |                  |                 | to decide which  |                  |
    |                  |                 | is cheaper. A    |                  |
    |                  |                 | high value of    |                  |
    |                  |                 | 'jac_penalty'    |                  |
    |                  |                 | makes it less    |                  |
    |                  |                 | likely for the   |                  |
    |                  |                 | heurstic to      |                  |
    |                  |                 | chose the full   |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy. The    |                  |
    |                  |                 | special value -1 |                  |
    |                  |                 | indicates never  |                  |
    |                  |                 | to use the full  |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy         |                  |
    +------------------+-----------------+------------------+------------------+
    | jacobian_options | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | Jacobian         |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | jit              | OT_BOOL         | Use just-in-time | casadi::Function |
    |                  |                 | compiler to      | Internal         |
    |                  |                 | speed up the     |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
    |                  |                 | temporary source | Internal         |
    |                  |                 | file that jit    |                  |
    |                  |                 | creates.         |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_name         | OT_STRING       | The file name    | casadi::Function |
    |                  |                 | used to write    | Internal         |
    |                  |                 | out code. The    |                  |
    |                  |                 | actual file      |                  |
    |                  |                 | names used       |                  |
    |                  |                 | depend on 'jit_t |                  |
    |                  |                 | emp_suffix' and  |                  |
    |                  |                 | include          |                  |
    |                  |                 | extensions.      |                  |
    |                  |                 | Default:         |                  |
    |                  |                 | 'jit_tmp'        |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_options      | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | jit compiler.    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_serialize    | OT_STRING       | Specify          | casadi::Function |
    |                  |                 | behaviour when   | Internal         |
    |                  |                 | serializing a    |                  |
    |                  |                 | jitted function: |                  |
    |                  |                 | SOURCE|link|embe |                  |
    |                  |                 | d.               |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
    |                  |                 | (seemingly       | Internal         |
    |                  |                 | random) filename |                  |
    |                  |                 | suffix for       |                  |
    |                  |                 | generated code   |                  |
    |                  |                 | and libraries.   |                  |
    |                  |                 | This is desired  |                  |
    |                  |                 | for thread-      |                  |
    |                  |                 | safety. This     |                  |
    |                  |                 | behaviour may    |                  |
    |                  |                 | defeat caching   |                  |
    |                  |                 | compiler         |                  |
    |                  |                 | wrappers.        |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | max_io           | OT_INT          | Acceptable       | casadi::Function |
    |                  |                 | number of inputs | Internal         |
    |                  |                 | and outputs.     |                  |
    |                  |                 | Warn if          |                  |
    |                  |                 | exceeded.        |                  |
    +------------------+-----------------+------------------+------------------+
    | max_num_dir      | OT_INT          | Specify the      | casadi::Function |
    |                  |                 | maximum number   | Internal         |
    |                  |                 | of directions    |                  |
    |                  |                 | for derivative   |                  |
    |                  |                 | functions.       |                  |
    |                  |                 | Overrules the    |                  |
    |                  |                 | builtin optimize |                  |
    |                  |                 | d_num_dir.       |                  |
    +------------------+-----------------+------------------+------------------+
    | never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | post_expand      | OT_BOOL         | After            | casadi::Function |
    |                  |                 | construction,    | Internal         |
    |                  |                 | expand this      |                  |
    |                  |                 | Function .       |                  |
    |                  |                 | Default: False   |                  |
    +------------------+-----------------+------------------+------------------+
    | post_expand_opti | OT_DICT         | Options to be    | casadi::Function |
    | ons              |                 | passed to post-  | Internal         |
    |                  |                 | construction     |                  |
    |                  |                 | expansion.       |                  |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | print_in         | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_out        | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs          |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_time       | OT_BOOL         | print            | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time. Implies    |                  |
    |                  |                 | record_time.     |                  |
    +------------------+-----------------+------------------+------------------+
    | record_time      | OT_BOOL         | record           | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time, for        |                  |
    |                  |                 | retrieval with   |                  |
    |                  |                 | stats() .        |                  |
    +------------------+-----------------+------------------+------------------+
    | regularity_check | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when NaN or Inf  | ction            |
    |                  |                 | appears during   |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | reverse_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | reverse mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
    |                  |                 | field that can   | Internal         |
    |                  |                 | be used to       |                  |
    |                  |                 | identify the     |                  |
    |                  |                 | function or pass |                  |
    |                  |                 | additional       |                  |
    |                  |                 | information      |                  |
    +------------------+-----------------+------------------+------------------+
    | verbose          | OT_BOOL         | Verbose          | casadi::ProtoFun |
    |                  |                 | evaluation  for  | ction            |
    |                  |                 | debugging        |                  |
    +------------------+-----------------+------------------+------------------+

    C++ includes: function.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.Function_type_name(*args)

    @staticmethod
    def jit(*args):
        r"""
        jit(std::string const & name, std::string const & body, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        jit(std::string const & name, std::string const & body, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & sparsity_in, std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & sparsity_out, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Create a just-in-time compiled function from a C language 
        string.

        The names and sparsity patterns of all the inputs and outputs must be 

        provided. If sparsities are not provided, all inputs and outputs are 

        assumed to be scalar. Only specify the function body, assuming that 
        input 
        and output nonzeros are stored in arrays with the specified 
        naming 
        convension. The data type used is 'casadi_real', which is 
        typically equal 
        to 'double or another data type with the same API as 'double.

        Inputs may be null pointers. This means that the all entries are zero.

        Outputs may be null points. This means that the corresponding result 
        can be
         ignored.

        If an error occurs in the evaluation, issue "return 1;";

        The final generated function will have a structure similar to:

        casadi_int fname(const casadi_real** arg, casadi_real** res, 
        casadi_int* 
        iw, casadi_real* w, void* mem) { const casadi_real *x1, 
        *x2; casadi_real 
        *r1, *r2; x1 = *arg++; x2 = *arg++; r1 = *res++; r2 =
         *res++; 
        <FUNCTION_BODY> return 0; }

        Extra doc: https://github.com/casadi/casadi/wiki/L_1v3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L189

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L262-L274


        """
        return _casadi.Function_jit(*args)
    __swig_destroy__ = _casadi.delete_Function

    def expand(self, *args):
        r"""
        expand(Function self) -> Function
        expand(Function self, std::string const & name, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Expand a function to SX.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1v5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L207

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L286-L302


        """
        return _casadi.Function_expand(self, *args)

    def n_in(self, *args):
        r"""
        n_in(Function self) -> casadi_int


        [INTERNAL] 
        Get the number of function inputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1v8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L228

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L787-L789


        """
        return _casadi.Function_n_in(self, *args)

    def n_out(self, *args):
        r"""
        n_out(Function self) -> casadi_int


        [INTERNAL] 
        Get the number of function outputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1v9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L233

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L791-L793


        """
        return _casadi.Function_n_out(self, *args)

    def size1_in(self, *args):
        r"""
        size1_in(Function self, casadi_int ind) -> casadi_int
        size1_in(Function self, std::string const & iname) -> casadi_int


        [INTERNAL] 
        Get input dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1va

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L240

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L240-L240


        """
        return _casadi.Function_size1_in(self, *args)

    def size2_in(self, *args):
        r"""
        size2_in(Function self, casadi_int ind) -> casadi_int
        size2_in(Function self, std::string const & iname) -> casadi_int


        [INTERNAL] 
        Get input dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1va

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L242

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L242-L242


        """
        return _casadi.Function_size2_in(self, *args)

    def size_in(self, *args):
        r"""
        size_in(Function self, casadi_int ind) -> std::pair< casadi_int,casadi_int >
        size_in(Function self, std::string const & iname) -> std::pair< casadi_int,casadi_int >


        [INTERNAL] 
        Get input dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1va

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L244

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L244-L246


        """
        return _casadi.Function_size_in(self, *args)

    def size1_out(self, *args):
        r"""
        size1_out(Function self, casadi_int ind) -> casadi_int
        size1_out(Function self, std::string const & oname) -> casadi_int


        [INTERNAL] 
        Get output dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vb

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L254

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L254-L254


        """
        return _casadi.Function_size1_out(self, *args)

    def size2_out(self, *args):
        r"""
        size2_out(Function self, casadi_int ind) -> casadi_int
        size2_out(Function self, std::string const & oname) -> casadi_int


        [INTERNAL] 
        Get output dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vb

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L256

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L256-L256


        """
        return _casadi.Function_size2_out(self, *args)

    def size_out(self, *args):
        r"""
        size_out(Function self, casadi_int ind) -> std::pair< casadi_int,casadi_int >
        size_out(Function self, std::string const & oname) -> std::pair< casadi_int,casadi_int >


        [INTERNAL] 
        Get output dimension.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vb

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L258

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L258-L260


        """
        return _casadi.Function_size_out(self, *args)

    def nnz_in(self, *args):
        r"""
        nnz_in(Function self) -> casadi_int
        nnz_in(Function self, casadi_int ind) -> casadi_int
        nnz_in(Function self, std::string const & iname) -> casadi_int


        [INTERNAL] 
        Get number of input nonzeros.

        For a particular input or for all of the inputs

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vc

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L271

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L271-L271


        """
        return _casadi.Function_nnz_in(self, *args)

    def nnz_out(self, *args):
        r"""
        nnz_out(Function self) -> casadi_int
        nnz_out(Function self, casadi_int ind) -> casadi_int
        nnz_out(Function self, std::string const & oname) -> casadi_int


        [INTERNAL] 
        Get number of output nonzeros.

        For a particular output or for all of the outputs

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vd

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L282

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L282-L282


        """
        return _casadi.Function_nnz_out(self, *args)

    def numel_in(self, *args):
        r"""
        numel_in(Function self) -> casadi_int
        numel_in(Function self, casadi_int ind) -> casadi_int
        numel_in(Function self, std::string const & iname) -> casadi_int


        [INTERNAL] 
        Get number of input elements.

        For a particular input or for all of the inputs

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ve

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L293

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L293-L293


        """
        return _casadi.Function_numel_in(self, *args)

    def numel_out(self, *args):
        r"""
        numel_out(Function self) -> casadi_int
        numel_out(Function self, casadi_int ind) -> casadi_int
        numel_out(Function self, std::string const & oname) -> casadi_int


        [INTERNAL] 
        Get number of output elements.

        For a particular output or for all of the outputs

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vf

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L304

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L304-L304


        """
        return _casadi.Function_numel_out(self, *args)

    def name_in(self, *args):
        r"""
        name_in(Function self) -> std::vector< std::string,std::allocator< std::string > > const
        name_in(Function self, casadi_int ind) -> std::string const &


        [INTERNAL] 
        Get input scheme name by index.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L320

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L943-L949


        """
        return _casadi.Function_name_in(self, *args)

    def name_out(self, *args):
        r"""
        name_out(Function self) -> std::vector< std::string,std::allocator< std::string > > const
        name_out(Function self, casadi_int ind) -> std::string const &


        [INTERNAL] 
        Get output scheme name by index.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vj

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L325

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L951-L957


        """
        return _casadi.Function_name_out(self, *args)

    def index_in(self, *args):
        r"""
        index_in(Function self, std::string const & name) -> casadi_int


        [INTERNAL] 
        Find the index for a string describing a particular entry of an 
        input 
        scheme.

        example: schemeEntry("x_opt") -> returns NLPSOL_X if 
        FunctionInternal 
        adheres to SCHEME_NLPINput

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vk

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L333

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L927-L933


        """
        return _casadi.Function_index_in(self, *args)

    def index_out(self, *args):
        r"""
        index_out(Function self, std::string const & name) -> casadi_int


        [INTERNAL] 
        Find the index for a string describing a particular entry of an 
        output
         scheme.

        example: schemeEntry("x_opt") -> returns NLPSOL_X if 
        FunctionInternal 
        adheres to SCHEME_NLPINput

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vl

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L341

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L935-L941


        """
        return _casadi.Function_index_out(self, *args)

    def default_in(self, *args):
        r"""
        default_in(Function self, casadi_int ind) -> double


        [INTERNAL] 
        Get default input value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vm

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L346

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1423-L1425


        """
        return _casadi.Function_default_in(self, *args)

    def max_in(self, *args):
        r"""
        max_in(Function self, casadi_int ind) -> double


        [INTERNAL] 
        Get largest input value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vn

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L351

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1427-L1429


        """
        return _casadi.Function_max_in(self, *args)

    def min_in(self, *args):
        r"""
        min_in(Function self, casadi_int ind) -> double


        [INTERNAL] 
        Get smallest input value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vo

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L356

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1431-L1433


        """
        return _casadi.Function_min_in(self, *args)

    def nominal_in(self, *args):
        r"""
        nominal_in(Function self, casadi_int ind) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get nominal input value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vp

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L361

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1435-L1437


        """
        return _casadi.Function_nominal_in(self, *args)

    def nominal_out(self, *args):
        r"""
        nominal_out(Function self, casadi_int ind) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get nominal output value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L366

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1439-L1441


        """
        return _casadi.Function_nominal_out(self, *args)

    def sparsity_in(self, *args):
        r"""
        sparsity_in(Function self, casadi_int ind) -> Sparsity
        sparsity_in(Function self, std::string const & iname) -> Sparsity


        [INTERNAL] 
        Get sparsity of a given input.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vr

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L373

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L967-L973


        """
        return _casadi.Function_sparsity_in(self, *args)

    def sparsity_out(self, *args):
        r"""
        sparsity_out(Function self, casadi_int ind) -> Sparsity
        sparsity_out(Function self, std::string const & iname) -> Sparsity


        [INTERNAL] 
        Get sparsity of a given output.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vs

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L381

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L983-L989


        """
        return _casadi.Function_sparsity_out(self, *args)

    def is_diff_in(self, *args):
        r"""
        is_diff_in(Function self, casadi_int ind) -> bool
        is_diff_in(Function self) -> std::vector< bool,std::allocator< bool > >


        [INTERNAL] 
        Get differentiability of inputs/output.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vt

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L390

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1007-L1013


        """
        return _casadi.Function_is_diff_in(self, *args)

    def is_diff_out(self, *args):
        r"""
        is_diff_out(Function self, casadi_int ind) -> bool
        is_diff_out(Function self) -> std::vector< bool,std::allocator< bool > >


        [INTERNAL] 
        Get differentiability of inputs/output.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vt

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L391

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1015-L1021


        """
        return _casadi.Function_is_diff_out(self, *args)

    def factory(self, *args):
        r"""
        factory(Function self, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & s_in, std::vector< std::string,std::allocator< std::string > > const & s_out, casadi::Function::AuxOut const & aux=casadi::Function::AuxOut(), casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        """
        return _casadi.Function_factory(self, *args)

    def oracle(self, *args):
        r"""
        oracle(Function self) -> Function


        [INTERNAL] 
        Get oracle.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vu

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L407

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1846-L1852


        """
        return _casadi.Function_oracle(self, *args)

    def wrap(self, *args):
        r"""
        wrap(Function self) -> Function


        [INTERNAL] 
        Wrap in an  Function instance consisting of only one  MX call.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vv

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L412

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1854-L1856


        """
        return _casadi.Function_wrap(self, *args)

    def wrap_as_needed(self, *args):
        r"""
        wrap_as_needed(Function self, casadi::Dict const & opts) -> Function


        [INTERNAL] 
        Wrap in a  Function with options.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L417

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1858-L1860


        """
        return _casadi.Function_wrap_as_needed(self, *args)

    def which_depends(self, *args):
        r"""
        which_depends(Function self, std::string const & s_in, std::vector< std::string,std::allocator< std::string > > const & s_out, casadi_int order=1, bool tr=False) -> std::vector< bool,std::allocator< bool > >


        [INTERNAL] 
        Which variables enter with some order.

        Parameters:
        -----------

        order: 
        Only 1 (linear) and 2 (nonlinear) allowed

        tr: 
        Flip the relationship. Return which expressions contain the variables

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vx

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L425

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1764-L1771


        """
        return _casadi.Function_which_depends(self, *args)

    def print_dimensions(self, *args):
        r"""
        print_dimensions(Function self)


        [INTERNAL] 
        Print dimensions of inputs and outputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vy

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L432

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1095-L1097


        """
        return _casadi.Function_print_dimensions(self, *args)

    def print_options(self, *args):
        r"""
        print_options(Function self)


        [INTERNAL] 
        Print options to a stream.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1vz

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L437

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1099-L1101


        """
        return _casadi.Function_print_options(self, *args)

    def print_option(self, *args):
        r"""
        print_option(Function self, std::string const & name)


        [INTERNAL] 
        Print all information there is to know about a certain option.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w0

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L442

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1103-L1105


        """
        return _casadi.Function_print_option(self, *args)

    def has_option(self, *args):
        r"""
        has_option(Function self, std::string const & option_name) -> bool


        [INTERNAL] 
        Does a particular option exist.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w1

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L447

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1107-L1114


        """
        return _casadi.Function_has_option(self, *args)

    def change_option(self, *args):
        r"""
        change_option(Function self, std::string const & option_name, GenericType option_value)


        [INTERNAL] 
        Change option after object creation for debugging.

        This is only possible for a selected number of options that do not 
        change 
        the numerical results of the computation, e.g. to enable a more
         verbose 
        output or saving to file.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L455

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1116-L1126


        """
        return _casadi.Function_change_option(self, *args)

    def uses_output(self, *args):
        r"""
        uses_output(Function self) -> bool


        [INTERNAL] 
        Do the derivative functions need nondifferentiated outputs?

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L460

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L851-L853


        """
        return _casadi.Function_uses_output(self, *args)

    def jacobian_old(self, *args):
        r"""
        jacobian_old(Function self, casadi_int iind, casadi_int oind) -> Function


        [DEPRECATED] Replaced by  Function::factory.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L466

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L856-L862


        """
        return _casadi.Function_jacobian_old(self, *args)

    def hessian_old(self, *args):
        r"""
        hessian_old(Function self, casadi_int iind, casadi_int oind) -> Function


        [DEPRECATED] Replaced by  Function::factory.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L471

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L864-L872


        """
        return _casadi.Function_hessian_old(self, *args)

    def sparsity_jac(self, *args):
        r"""
        sparsity_jac(Function self, casadi_int iind, casadi_int oind, bool compact=False, bool symmetric=False) -> Sparsity
        sparsity_jac(Function self, std::string const & iind, casadi_int oind=0, bool compact=False, bool symmetric=False) -> Sparsity
        sparsity_jac(Function self, casadi_int iind, std::string const & oind, bool compact=False, bool symmetric=False) -> Sparsity
        sparsity_jac(Function self, std::string const & iind, std::string const & oind, bool compact=False, bool symmetric=False) -> Sparsity


        [DEPRECATED] Get, if necessary generate, the sparsity of a Jacobian 
        block

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L485

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L485-L488


        """
        return _casadi.Function_sparsity_jac(self, *args)

    def jacobian(self, *args):
        r"""
        jacobian(Function self) -> Function


        [INTERNAL] 
        Calculate all Jacobian blocks.

        Generates a function that takes all non-differentiated inputs and 
        outputs 
        and calculates all Jacobian blocks. Inputs that are not needed
         by the 
        routine are all-zero sparse matrices with the correct 
        dimensions.  Output 
        blocks that are not calculated, e.g. if the corresponding input or 
        output 
        is marked non-differentiated are also all-zero sparse. The 
        Jacobian blocks 
        are sorted starting by all the blocks for the first 
        output, then all the 
        blocks for the second output and so on. E.g. f : 
        (x, y) -> (r, s) results 
        in the function jac_f : (x, y, out_r, out_s) 
        -> (jac_r_x, jac_r_y, jac_s_x,
         jac_s_y)

        This function is cached.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L508

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L884-L890


        """
        return _casadi.Function_jacobian(self, *args)

    def call(self, *args):
        r"""
        call(Function self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg, bool always_inline=False, bool never_inline=False)
        call(Function self, std::vector< casadi::SX,std::allocator< casadi::SX > > const & arg, bool always_inline=False, bool never_inline=False)
        call(Function self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg, bool always_inline=False, bool never_inline=False)
        call(Function self, casadi::DMDict const & arg, bool always_inline=False, bool never_inline=False)
        call(Function self, casadi::SXDict const & arg, bool always_inline=False, bool never_inline=False)
        call(Function self, casadi::MXDict const & arg, bool always_inline=False, bool never_inline=False)


        [INTERNAL] 
        Evaluate the function symbolically or numerically.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L524

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1414-L1421


        """
        return _casadi.Function_call(self, *args)

    def mapsum(self, *args):
        r"""
        mapsum(Function self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & x, std::string const & parallelization="serial") -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Evaluate symbolically in parallel and sum (matrix graph)

        Parameters:
        -----------

        parallelization: 
        Type of parallelization used: unroll|serial|openmp

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L642

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L724-L731


        """
        return _casadi.Function_mapsum(self, *args)

    def mapaccum(self, *args):
        r"""
        mapaccum(Function self, std::string const & name, casadi_int N, casadi::Dict const & opts=casadi::Dict()) -> Function
        mapaccum(Function self, std::string const & name, casadi_int N, casadi_int n_accum, casadi::Dict const & opts=casadi::Dict()) -> Function
        mapaccum(Function self, std::string const & name, casadi_int n, std::vector< casadi_int,std::allocator< casadi_int > > const & accum_in, std::vector< casadi_int,std::allocator< casadi_int > > const & accum_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        mapaccum(Function self, std::string const & name, casadi_int n, std::vector< std::string,std::allocator< std::string > > const & accum_in, std::vector< std::string,std::allocator< std::string > > const & accum_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        mapaccum(Function self, casadi_int N, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Create a mapaccumulated version of this function.

        Suppose the function has a signature of:

        ::

             f: (x, u) -> (x_next , y )




        The the mapaccumulated version has the signature:

        ::

             F: (x0, U) -> (X , Y )

              with
                  U: horzcat([u0, u1, ..., u_(N-1)])
                  X: horzcat([x1, x2, ..., x_N])
                  Y: horzcat([y0, y1, ..., y_(N-1)])

              and
                  x1, y0 <- f(x0, u0)
                  x2, y1 <- f(x1, u1)
                  ...
                  x_N, y_(N-1) <- f(x_(N-1), u_(N-1))




        Mapaccum has the following benefits over writing an equivalent for-
        loop:

        much faster at construction time

        potentially much faster compilation times (for codegen)

        offers a trade-off between memory and evaluation time

        The base (settable through the options dictionary, default 10), is 
        used to 
        create a tower of function calls, containing unrolled for-
        loops of length 
        maximum base.

        This technique is much more scalable in terms of memory-usage, but 
        slightly
         slower at evaluation, than a plain for-loop. The effect is 
        similar to that
         of a for-loop with a check-pointing instruction after 
        each chunk of 
        iterations with size base.

        Set base to -1 to unroll all the way; no gains in memory efficiency 
        here.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L697

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L484-L486


        """
        return _casadi.Function_mapaccum(self, *args)

    def fold(self, *args):
        r"""
        fold(Function self, casadi_int N, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Create a mapaccumulated version of this function.

        Suppose the function has a signature of:

        ::

             f: (x, u) -> (x_next , y )




        The the mapaccumulated version has the signature:

        ::

             F: (x0, U) -> (X , Y )

              with
                  U: horzcat([u0, u1, ..., u_(N-1)])
                  X: horzcat([x1, x2, ..., x_N])
                  Y: horzcat([y0, y1, ..., y_(N-1)])

              and
                  x1, y0 <- f(x0, u0)
                  x2, y1 <- f(x1, u1)
                  ...
                  x_N, y_(N-1) <- f(x_(N-1), u_(N-1))




        Mapaccum has the following benefits over writing an equivalent for-
        loop:

        much faster at construction time

        potentially much faster compilation times (for codegen)

        offers a trade-off between memory and evaluation time

        The base (settable through the options dictionary, default 10), is 
        used to 
        create a tower of function calls, containing unrolled for-
        loops of length 
        maximum base.

        This technique is much more scalable in terms of memory-usage, but 
        slightly
         slower at evaluation, than a plain for-loop. The effect is 
        similar to that
         of a for-loop with a check-pointing instruction after 
        each chunk of 
        iterations with size base.

        Set base to -1 to unroll all the way; no gains in memory efficiency 
        here.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L698

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L477-L483


        """
        return _casadi.Function_fold(self, *args)

    def map(self, *args):
        r"""
        map(Function self, casadi_int n, std::string const & parallelization="serial") -> Function
        map(Function self, casadi_int n, std::string const & parallelization, casadi_int max_num_threads) -> Function
        map(Function self, std::string const & name, std::string const & parallelization, casadi_int n, std::vector< casadi_int,std::allocator< casadi_int > > const & reduce_in, std::vector< casadi_int,std::allocator< casadi_int > > const & reduce_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        map(Function self, std::string const & name, std::string const & parallelization, casadi_int n, std::vector< std::string,std::allocator< std::string > > const & reduce_in, std::vector< std::string,std::allocator< std::string > > const & reduce_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        map(Function self, casadi_int n, std::vector< bool,std::allocator< bool > > const & reduce_in, std::vector< bool,std::allocator< bool > > const & reduce_out=std::vector< bool >(), casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Map with reduction.

        A subset of the inputs are non-repeated and a subset of the outputs 
        summed 
        up.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wk

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L745

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L605-L611


        """
        return _casadi.Function_map(self, *args)

    def slice(self, *args):
        r"""
        slice(Function self, std::string const & name, std::vector< casadi_int,std::allocator< casadi_int > > const & order_in, std::vector< casadi_int,std::allocator< casadi_int > > const & order_out, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        returns a new function with a selection of inputs/outputs of the

        original

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wl

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L754

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L715-L722


        """
        return _casadi.Function_slice(self, *args)

    @staticmethod
    def conditional(*args):
        r"""
        conditional(std::string const & name, std::vector< casadi::Function,std::allocator< casadi::Function > > const & f, Function f_def, casadi::Dict const & opts=casadi::Dict()) -> Function
        conditional(std::string const & name, Function f, casadi::Dict const & opts=casadi::Dict()) -> Function
        """
        return _casadi.Function_conditional(*args)

    @staticmethod
    def bspline(*args):
        r"""bspline(std::string const & name, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & knots, std::vector< double,std::allocator< double > > const & coeffs, std::vector< casadi_int,std::allocator< casadi_int > > const & degree, casadi_int m=1, casadi::Dict const & opts=casadi::Dict()) -> Function"""
        return _casadi.Function_bspline(*args)

    @staticmethod
    def if_else(*args):
        r"""if_else(std::string const & name, Function f_true, Function f_false, casadi::Dict const & opts=casadi::Dict()) -> Function"""
        return _casadi.Function_if_else(*args)

    def forward(self, *args):
        r"""
        forward(Function self, casadi_int nfwd) -> Function


        [INTERNAL] 
        Get a function that calculates  nfwd forward derivatives.



        ::

             Returns a function with <tt>n_in + n_out + n_in</tt> inputs
             and <tt>nfwd</tt> outputs.
             The first <tt>n_in</tt> inputs correspond to nondifferentiated inputs.
             The next <tt>n_out</tt> inputs correspond to nondifferentiated outputs.
             and the last <tt>n_in</tt> inputs correspond to forward seeds,
             stacked horizontally
             The  <tt>n_out</tt> outputs correspond to forward sensitivities,
             stacked horizontally.     *
             <tt>(n_in = n_in(), n_out = n_out())</tt>

            The functions returned are cached, meaning that if called multiple timed
            with the same value, then multiple references to the same function will be returned.


        Extra doc: https://github.com/casadi/casadi/wiki/L_1wq

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L800

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1079-L1085


        """
        return _casadi.Function_forward(self, *args)

    def reverse(self, *args):
        r"""
        reverse(Function self, casadi_int nadj) -> Function


        [INTERNAL] 
        Get a function that calculates  nadj adjoint derivatives.



        ::

             Returns a function with <tt>n_in + n_out + n_out</tt> inputs
             and <tt>n_in</tt> outputs.
             The first <tt>n_in</tt> inputs correspond to nondifferentiated inputs.
             The next <tt>n_out</tt> inputs correspond to nondifferentiated outputs.
             and the last <tt>n_out</tt> inputs correspond to adjoint seeds,
             stacked horizontally
             The  <tt>n_in</tt> outputs correspond to adjoint sensitivities,
             stacked horizontally.     *
             <tt>(n_in = n_in(), n_out = n_out())</tt>

             <tt>(n_in = n_in(), n_out = n_out())</tt>

            The functions returned are cached, meaning that if called multiple timed
            with the same value, then multiple references to the same function will be returned.


        Extra doc: https://github.com/casadi/casadi/wiki/L_1wr

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L820

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1087-L1093


        """
        return _casadi.Function_reverse(self, *args)

    def jac_sparsity(self, *args):
        r"""
        jac_sparsity(Function self, bool compact=False) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const
        jac_sparsity(Function self, casadi_int oind, casadi_int iind, bool compact=False) -> Sparsity


        [INTERNAL] 
        Get, if necessary generate, the sparsity of a single Jacobian 
        block.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wt

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L830

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L911-L917


        """
        return _casadi.Function_jac_sparsity(self, *args)

    def generate(self, *args):
        r"""
        generate(Function self, std::string const & fname, casadi::Dict const & opts=casadi::Dict()) -> std::string
        generate(Function self, casadi::Dict const & opts=casadi::Dict()) -> std::string


        [INTERNAL] 
        Export / Generate C code for the function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wv

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L840

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1132-L1134


        """
        return _casadi.Function_generate(self, *args)

    def generate_dependencies(self, *args):
        r"""
        generate_dependencies(Function self, std::string const & fname, casadi::Dict const & opts=casadi::Dict()) -> std::string


        [INTERNAL] 
        Export / Generate C code for the dependency function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1ww

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L845

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1142-L1144


        """
        return _casadi.Function_generate_dependencies(self, *args)

    def generate_in(self, *args):
        r"""
        generate_in(Function self, std::string const & fname, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg)
        generate_in(Function self, std::string const & fname) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        Export an input file that can be passed to generate C code with 
        a 
        main.

        See: 
         generate_out

        See: 
         convert_in to convert between dict/map and vector

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wx

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L855

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1176-L1186


        """
        return _casadi.Function_generate_in(self, *args)

    def generate_out(self, *args):
        r"""
        generate_out(Function self, std::string const & fname, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg)
        generate_out(Function self, std::string const & fname) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        Export an output file that can be checked with generated C code

        output.

        See: 
         generate_in

        See: 
         convert_out to convert between dict/map and vector

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wy

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L866

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1188-L1198


        """
        return _casadi.Function_generate_out(self, *args)

    def serialize(self, *args):
        r"""
        serialize(Function self, casadi::Dict const & opts=casadi::Dict()) -> std::string


        [INTERNAL] 
        Serialize.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x2

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L893

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1217-L1221


        """
        return _casadi.Function_serialize(self, *args)

    def save(self, *args):
        r"""
        save(Function self, std::string const & fname, casadi::Dict const & opts=casadi::Dict())


        [INTERNAL] 
        Save  Function to a file.

        See: 
         load

        Extra doc: https://github.com/casadi/casadi/wiki/L_240

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L900

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1212-L1215


        """
        return _casadi.Function_save(self, *args)

    def export_code(self, *args):
        r"""
        export_code(Function self, std::string const & lang, std::string const & fname, casadi::Dict const & options=casadi::Dict())
        export_code(Function self, std::string const & lang, casadi::Dict const & options=casadi::Dict()) -> std::string


        [INTERNAL] 
        Export function in specific language.

        Only allowed for (a subset of) SX/MX Functions

        Extra doc: https://github.com/casadi/casadi/wiki/L_1wz

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L902

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1244-L1248


        """
        return _casadi.Function_export_code(self, *args)

    def stats(self, *args):
        r"""
        stats(Function self, int mem=0) -> casadi::Dict


        [INTERNAL] 
        Get all statistics obtained at the end of the last evaluate 
        call.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L932

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L896-L898


        """
        return _casadi.Function_stats(self, *args)

    def sx_in(self, *args):
        r"""
        sx_in(Function self, casadi_int iind) -> SX
        sx_in(Function self, std::string const & iname) -> SX
        sx_in(Function self) -> std::vector< casadi::SX,std::allocator< casadi::SX > > const


        [INTERNAL] 
        Get symbolic primitives equivalent to the input expressions.

        There is no guarantee that subsequent calls return unique answers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L944

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1511-L1517


        """
        return _casadi.Function_sx_in(self, *args)

    def mx_in(self, *args):
        r"""
        mx_in(Function self, casadi_int ind) -> MX
        mx_in(Function self, std::string const & iname) -> MX
        mx_in(Function self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const


        [INTERNAL] 
        Get symbolic primitives equivalent to the input expressions.

        There is no guarantee that subsequent calls return unique answers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L949

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1535-L1537


        """
        return _casadi.Function_mx_in(self, *args)

    def sx_out(self, *args):
        r"""
        sx_out(Function self, casadi_int oind) -> SX
        sx_out(Function self, std::string const & oname) -> SX
        sx_out(Function self) -> std::vector< casadi::SX,std::allocator< casadi::SX > > const


        [INTERNAL] 
        Get symbolic primitives equivalent to the output expressions.

        There is no guarantee that subsequent calls return unique answers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L962

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1519-L1525


        """
        return _casadi.Function_sx_out(self, *args)

    def mx_out(self, *args):
        r"""
        mx_out(Function self, casadi_int ind) -> MX
        mx_out(Function self, std::string const & oname) -> MX
        mx_out(Function self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const


        [INTERNAL] 
        Get symbolic primitives equivalent to the output expressions.

        There is no guarantee that subsequent calls return unique answers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L967

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1539-L1541


        """
        return _casadi.Function_mx_out(self, *args)

    def nz_from_in(self, *args):
        r"""
        nz_from_in(Function self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Convert from/to flat vector of input/output nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L974

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1543-L1545


        """
        return _casadi.Function_nz_from_in(self, *args)

    def nz_from_out(self, *args):
        r"""
        nz_from_out(Function self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Convert from/to flat vector of input/output nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L975

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1547-L1549


        """
        return _casadi.Function_nz_from_out(self, *args)

    def nz_to_in(self, *args):
        r"""
        nz_to_in(Function self, std::vector< double,std::allocator< double > > const & arg) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        Convert from/to flat vector of input/output nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L976

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1551-L1553


        """
        return _casadi.Function_nz_to_in(self, *args)

    def nz_to_out(self, *args):
        r"""
        nz_to_out(Function self, std::vector< double,std::allocator< double > > const & arg) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        Convert from/to flat vector of input/output nonzeros.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L977

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1555-L1557


        """
        return _casadi.Function_nz_to_out(self, *args)

    def convert_in(self, *args):
        r"""
        convert_in(Function self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg) -> casadi::DMDict
        convert_in(Function self, casadi::DMDict const & arg) -> std::vector< casadi::DM,std::allocator< casadi::DM > >
        convert_in(Function self, std::vector< casadi::SX,std::allocator< casadi::SX > > const & arg) -> casadi::SXDict
        convert_in(Function self, casadi::SXDict const & arg) -> std::vector< casadi::SX,std::allocator< casadi::SX > >
        convert_in(Function self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg) -> casadi::MXDict
        convert_in(Function self, casadi::MXDict const & arg) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Convert from/to input/output lists/map.

        Will raise an error when an unknown key is used or a list has 
        incorrect 
        size. Does not perform sparsity checking.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L996

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1595-L1597


        """
        return _casadi.Function_convert_in(self, *args)

    def convert_out(self, *args):
        r"""
        convert_out(Function self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg) -> casadi::DMDict
        convert_out(Function self, casadi::DMDict const & arg) -> std::vector< casadi::DM,std::allocator< casadi::DM > >
        convert_out(Function self, std::vector< casadi::SX,std::allocator< casadi::SX > > const & arg) -> casadi::SXDict
        convert_out(Function self, casadi::SXDict const & arg) -> std::vector< casadi::SX,std::allocator< casadi::SX > >
        convert_out(Function self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg) -> casadi::MXDict
        convert_out(Function self, casadi::MXDict const & arg) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Convert from/to input/output lists/map.

        Will raise an error when an unknown key is used or a list has 
        incorrect 
        size. Does not perform sparsity checking.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L998

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1603-L1605


        """
        return _casadi.Function_convert_out(self, *args)

    def has_free(self, *args):
        r"""
        has_free(Function self) -> bool


        [INTERNAL] 
        Does the function have free variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1004

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1635-L1637


        """
        return _casadi.Function_has_free(self, *args)

    def get_free(self, *args):
        r"""
        get_free(Function self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Get free variables as a string.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1x9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1009

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1128-L1130


        """
        return _casadi.Function_get_free(self, *args)

    def free_sx(self, *args):
        r"""
        free_sx(Function self) -> std::vector< casadi::SX,std::allocator< casadi::SX > >


        [INTERNAL] 
        Get all the free variables of the function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xa

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1014

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1611-L1617


        """
        return _casadi.Function_free_sx(self, *args)

    def free_mx(self, *args):
        r"""
        free_mx(Function self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Get all the free variables of the function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xb

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1019

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1619-L1625


        """
        return _casadi.Function_free_mx(self, *args)

    def generate_lifted(self, *args):
        r"""
        generate_lifted(Function self)


        [INTERNAL] 
        Extract the functions needed for the Lifted  Newton method.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xc

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1024

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1639-L1645


        """
        return _casadi.Function_generate_lifted(self, *args)

    def n_nodes(self, *args):
        r"""
        n_nodes(Function self) -> casadi_int


        [INTERNAL] 
        Number of nodes in the algorithm.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xd

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1030

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1703-L1709


        """
        return _casadi.Function_n_nodes(self, *args)

    def n_instructions(self, *args):
        r"""
        n_instructions(Function self) -> casadi_int


        [INTERNAL] 
        Number of instruction in the algorithm (SXFunction/MXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xe

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1035

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1647-L1653


        """
        return _casadi.Function_n_instructions(self, *args)

    def instruction_id(self, *args):
        r"""
        instruction_id(Function self, casadi_int k) -> casadi_int


        [INTERNAL] 
        Identifier index of the instruction (SXFunction/MXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xf

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1040

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1671-L1677


        """
        return _casadi.Function_instruction_id(self, *args)

    def instruction_input(self, *args):
        r"""
        instruction_input(Function self, casadi_int k) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        Locations in the work vector for the inputs of the instruction.

        (SXFunction/MXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xg

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1047

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1679-L1685


        """
        return _casadi.Function_instruction_input(self, *args)

    def instruction_constant(self, *args):
        r"""
        instruction_constant(Function self, casadi_int k) -> double


        [INTERNAL] 
        Get the floating point output argument of an instruction 
        (SXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1052

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1687-L1693


        """
        return _casadi.Function_instruction_constant(self, *args)

    def instruction_output(self, *args):
        r"""
        instruction_output(Function self, casadi_int k) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        Location in the work vector for the output of the instruction.

        (SXFunction/MXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1059

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1695-L1701


        """
        return _casadi.Function_instruction_output(self, *args)

    def instruction_MX(self, *args):
        r"""
        instruction_MX(Function self, casadi_int k) -> MX


        [INTERNAL] 
        Get the  MX node corresponding to an instruction (MXFunction)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xj

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1064

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1655-L1661


        """
        return _casadi.Function_instruction_MX(self, *args)

    def instructions_sx(self, *args):
        r"""
        instructions_sx(Function self) -> SX


        [INTERNAL] 
        Get the SX node corresponding to all instructions (SXFunction)

        Note: input and output instructions have no SX representation. This 
        method 
        returns nan for those instructions.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xk

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1072

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1663-L1669


        """
        return _casadi.Function_instructions_sx(self, *args)

    def has_spfwd(self, *args):
        r"""
        has_spfwd(Function self) -> bool


        [INTERNAL] 
        Is the class able to propagate seeds through the algorithm?

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xl

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1078

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1627-L1629


        """
        return _casadi.Function_has_spfwd(self, *args)

    def has_sprev(self, *args):
        r"""
        has_sprev(Function self) -> bool


        [INTERNAL] 
        Is the class able to propagate seeds through the algorithm?

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xl

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1079

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1631-L1633


        """
        return _casadi.Function_has_sprev(self, *args)

    def sz_arg(self, *args):
        r"""
        sz_arg(Function self) -> size_t


        [INTERNAL] 
        Get required length of arg field.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xm

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1085

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1027-L1027


        """
        return _casadi.Function_sz_arg(self, *args)

    def sz_res(self, *args):
        r"""
        sz_res(Function self) -> size_t


        [INTERNAL] 
        Get required length of res field.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xn

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1090

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1029-L1029


        """
        return _casadi.Function_sz_res(self, *args)

    def sz_iw(self, *args):
        r"""
        sz_iw(Function self) -> size_t


        [INTERNAL] 
        Get required length of iw field.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xo

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1095

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1031-L1031


        """
        return _casadi.Function_sz_iw(self, *args)

    def sz_w(self, *args):
        r"""
        sz_w(Function self) -> size_t


        [INTERNAL] 
        Get required length of w field.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xp

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1100

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1033-L1033


        """
        return _casadi.Function_sz_w(self, *args)

    def name(self, *args):
        r"""
        name(Function self) -> std::string const &


        [INTERNAL] 
        Name of the function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xv

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1137

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1250-L1257


        """
        return _casadi.Function_name(self, *args)

    def is_a(self, *args):
        r"""
        is_a(Function self, std::string const & type, bool recursive=True) -> bool


        [INTERNAL] 
        Check if the function is of a particular type.

        Optionally check if name matches one of the base classes (default 
        true)

        Extra doc: https://github.com/casadi/casadi/wiki/L_1xw

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1144

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1607-L1609


        """
        return _casadi.Function_is_a(self, *args)

    @staticmethod
    def check_name(*args):
        r"""check_name(std::string const & name) -> bool"""
        return _casadi.Function_check_name(*args)

    @staticmethod
    def fix_name(*args):
        r"""fix_name(std::string const & name) -> std::string"""
        return _casadi.Function_fix_name(*args)

    @staticmethod
    def load(*args):
        r"""load(std::string const & filename) -> Function"""
        return _casadi.Function_load(*args)

    @staticmethod
    def deserialize(*args):
        r"""
        deserialize(std::istream & stream) -> Function
        deserialize(std::string const & s) -> Function
        deserialize(casadi::DeserializingStream & s) -> Function
        """
        return _casadi.Function_deserialize(*args)

    def assert_size_in(self, *args):
        r"""
        assert_size_in(Function self, casadi_int i, casadi_int nrow, casadi_int ncol)


        [INTERNAL] 
        Assert that an input dimension is equal so some given value.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1189

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1723-L1729


        """
        return _casadi.Function_assert_size_in(self, *args)

    def assert_size_out(self, *args):
        r"""
        assert_size_out(Function self, casadi_int i, casadi_int nrow, casadi_int ncol)


        [INTERNAL] 
        Assert that an output dimension is equal so some given value.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1192

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1731-L1736


        """
        return _casadi.Function_assert_size_out(self, *args)

    def assert_sparsity_out(self, *args):
        r"""
        assert_sparsity_out(Function self, casadi_int i, Sparsity sp, casadi_int n=1, bool allow_all_zero_sparse=True)


        [INTERNAL] 
        Assert that an output sparsity is a multiple of some given 
        sparsity.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1195

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1738-L1747


        """
        return _casadi.Function_assert_sparsity_out(self, *args)

    def checkout(self, *args):
        r"""
        checkout(Function self) -> casadi_int


        [INTERNAL] 
        Checkout a memory object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1199

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1711-L1713


        """
        return _casadi.Function_checkout(self, *args)

    def release(self, *args):
        r"""
        release(Function self, int mem)


        [INTERNAL] 
        Release a memory object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1202

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1715-L1717


        """
        return _casadi.Function_release(self, *args)

    def cache(self, *args):
        r"""
        cache(Function self) -> casadi::Dict


        [INTERNAL] 
        Get all functions in the cache.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26i

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1212

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1773-L1780


        """
        return _casadi.Function_cache(self, *args)

    def get_function(self, *args):
        r"""
        get_function(Function self) -> std::vector< std::string,std::allocator< std::string > >
        get_function(Function self, std::string const & name) -> Function


        [INTERNAL] 
        Get a dependency function.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1y4

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1222

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1791-L1797


        """
        return _casadi.Function_get_function(self, *args)

    def has_function(self, *args):
        r"""
        has_function(Function self, std::string const & fname) -> bool


        [INTERNAL] 
        Check if a particular dependency exists.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1y5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1227

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1799-L1806


        """
        return _casadi.Function_has_function(self, *args)

    def find_functions(self, *args):
        r"""
        find_functions(Function self, casadi_int max_depth=-1) -> std::vector< casadi::Function,std::allocator< casadi::Function > >


        [INTERNAL] 
        Get all functions embedded in the expression graphs.

        Parameters:
        -----------

        max_depth: 
        Maximum depth - a negative number indicates no maximum

        Extra doc: https://github.com/casadi/casadi/wiki/L_1y6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1234

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1808-L1824


        """
        return _casadi.Function_find_functions(self, *args)

    def find_function(self, *args):
        r"""
        find_function(Function self, std::string const & name, casadi_int max_depth=-1) -> Function


        [INTERNAL] 
        Get a specific function embedded in the expression graphs.

        Parameters:
        -----------

        name: 
        Name of function needed

        max_depth: 
        Maximum depth - a negative number indicates no maximum

        Extra doc: https://github.com/casadi/casadi/wiki/L_1y7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1242

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1826-L1843


        """
        return _casadi.Function_find_function(self, *args)

    def info(self, *args):
        r"""
        info(Function self) -> casadi::Dict


        [INTERNAL] 
        Obtain information about function

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1245

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1872-L1874


        """
        return _casadi.Function_info(self, *args)

    def __setstate__(self, state):
        self.__init__(Function.deserialize(state["serialization"]))

    def __getstate__(self):
        return {"serialization": self.serialize()}


    def __call__(self, *args, **kwargs):
    # Either named inputs or ordered inputs
      if len(args)>0 and len(kwargs)>0:
        raise SyntaxError('Function evaluation requires all arguments to be named or none')
      if len(args)>0:
    # Ordered inputs -> return tuple
        ret = self.call(args)
        if len(ret)==0:
          return None
        elif len(ret)==1:
          return ret[0]
        else:
          return tuple(ret)
      else:
    # Named inputs -> return dictionary
        return self.call(kwargs)

    def buffer(self):
      """
      Create a FunctionBuffer object for evaluating with minimal overhead

      """
      import functools
      fb = FunctionBuffer(self)
      caller = functools.partial(_casadi._function_buffer_eval, fb._self())
      return (fb, caller)


    def __init__(self, *args):
        r"""
        __init__(Function self) -> Function
        __init__(Function self, std::string const & fname) -> Function
        __init__(Function self, std::string const & name, std::vector< casadi::SX,std::allocator< casadi::SX > > const & ex_in, std::vector< casadi::SX,std::allocator< casadi::SX > > const & ex_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, std::string const & name, std::vector< casadi::SX,std::allocator< casadi::SX > > const & ex_in, std::vector< casadi::SX,std::allocator< casadi::SX > > const & ex_out, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, std::string const & name, std::map< std::string,casadi::SX,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::SX > > > const & dict, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, std::string const & name, std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex_in, std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, std::string const & name, std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex_in, std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex_out, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, std::string const & name, std::map< std::string,casadi::MX,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::MX > > > const & dict, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        __init__(Function self, Function other) -> Function
        """
        _casadi.Function_swiginit(self, _casadi.new_Function(*args))

# Register Function in _casadi:
_casadi.Function_swigregister(Function)
class FunctionBuffer(object):
    r"""


    [INTERNAL] 
    Class to achieve minimal overhead function evaluations.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1y9

    C++ includes: function.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_arg(self, *args):
        r"""
        set_arg(FunctionBuffer self, casadi_int i, double const * a)


        [INTERNAL] 
        Set input buffer for input i.

        mem.set_arg(0, memoryview(a))

        Note that CasADi uses 'fortran' order: column-by-column

        Extra doc: https://github.com/casadi/casadi/wiki/L_1yb

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1323

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1912-L1917


        """
        return _casadi.FunctionBuffer_set_arg(self, *args)

    def set_res(self, *args):
        r"""
        set_res(FunctionBuffer self, casadi_int i, double * a)


        [INTERNAL] 
        Set output buffer for ouput i.

        mem.set_res(0, memoryview(a))

        Note that CasADi uses 'fortran' order: column-by-column

        Extra doc: https://github.com/casadi/casadi/wiki/L_1yc

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1332

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1918-L1923


        """
        return _casadi.FunctionBuffer_set_res(self, *args)

    def ret(self, *args):
        r"""
        ret(FunctionBuffer self) -> int


        [INTERNAL] 
        Get last return value.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.hpp#L1334

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/function.cpp#L1931-L1933


        """
        return _casadi.FunctionBuffer_ret(self, *args)

    def _eval(self, *args):
        r"""
        _eval(FunctionBuffer self)


        [INTERNAL] 
        """
        return _casadi.FunctionBuffer__eval(self, *args)

    def _self(self, *args):
        r"""
        _self(FunctionBuffer self) -> void *


        [INTERNAL] 
        """
        return _casadi.FunctionBuffer__self(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FunctionBuffer self, Function f) -> FunctionBuffer
        __init__(FunctionBuffer self, FunctionBuffer other) -> FunctionBuffer
        """
        _casadi.FunctionBuffer_swiginit(self, _casadi.new_FunctionBuffer(*args))
    __swig_destroy__ = _casadi.delete_FunctionBuffer

# Register FunctionBuffer in _casadi:
_casadi.FunctionBuffer_swigregister(FunctionBuffer)

def _function_buffer_eval(*args):
    r"""_function_buffer_eval(void * raw)"""
    return _casadi._function_buffer_eval(*args)

def external(*args):
    r"""
    external(std::string const & name, casadi::Dict const & opts=casadi::Dict()) -> Function
    external(std::string const & name, std::string const & bin_name, casadi::Dict const & opts=casadi::Dict()) -> Function
    external(std::string const & name, Importer li, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    Load a just-in-time compiled external function.

    File name given

    Extra doc: https://github.com/casadi/casadi/wiki/L_i2

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/external.hpp#L42

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/external.cpp#L42-L45


    """
    return _casadi.external(*args)

def integrator(*args):
    r"""
    integrator(std::string const & name, std::string const & solver, casadi::SXDict const & dae, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, casadi::MXDict const & dae, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, Function dae, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, casadi::SXDict const & dae, double t0, std::vector< double,std::allocator< double > > const & tout, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, casadi::MXDict const & dae, double t0, std::vector< double,std::allocator< double > > const & tout, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, Function dae, double t0, std::vector< double,std::allocator< double > > const & tout, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, casadi::SXDict const & dae, double t0, double tf, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, casadi::MXDict const & dae, double t0, double tf, casadi::Dict const & opts=casadi::Dict()) -> Function
    integrator(std::string const & name, std::string const & solver, Function dae, double t0, double tf, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    """
    return _casadi.integrator(*args)

def has_integrator(*args):
    r"""
    has_integrator(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L97

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L97-L99


    """
    return _casadi.has_integrator(*args)

def load_integrator(*args):
    r"""
    load_integrator(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L101

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L101-L103


    """
    return _casadi.load_integrator(*args)

def doc_integrator(*args):
    r"""
    doc_integrator(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L105

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L105-L107


    """
    return _casadi.doc_integrator(*args)

def integrator_in(*args):
    r"""
    integrator_in() -> std::vector< std::string,std::allocator< std::string > >
    integrator_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get integrator input scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_7d

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L171

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L171-L183


    """
    return _casadi.integrator_in(*args)

def integrator_out(*args):
    r"""
    integrator_out() -> std::vector< std::string,std::allocator< std::string > >
    integrator_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get output scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_7e

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L185

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L185-L197


    """
    return _casadi.integrator_out(*args)

def integrator_n_in(*args):
    r"""
    integrator_n_in() -> casadi_int


    [INTERNAL] 
    Get the number of integrator inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_7f

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L199

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L199-L201


    """
    return _casadi.integrator_n_in(*args)

def integrator_n_out(*args):
    r"""
    integrator_n_out() -> casadi_int


    [INTERNAL] 
    Get the number of integrator outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_7g

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L203

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L203-L205


    """
    return _casadi.integrator_n_out(*args)

def dyn_in(*args):
    r"""
    dyn_in() -> std::vector< std::string,std::allocator< std::string > >
    dyn_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get simulator input scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_25r

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L215

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L215-L217


    """
    return _casadi.dyn_in(*args)

def dyn_out(*args):
    r"""
    dyn_out() -> std::vector< std::string,std::allocator< std::string > >
    dyn_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get output scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_25s

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L219

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L219-L221


    """
    return _casadi.dyn_out(*args)

def dyn_n_in(*args):
    r"""
    dyn_n_in() -> casadi_int


    [INTERNAL] 
    Get the number of simulator inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_25t

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L223

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L223-L225


    """
    return _casadi.dyn_n_in(*args)

def dyn_n_out(*args):
    r"""
    dyn_n_out() -> casadi_int


    [INTERNAL] 
    Get the number of simulator outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_25u

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.hpp#L227

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integrator.cpp#L227-L229


    """
    return _casadi.dyn_n_out(*args)

def conic(*args):
    r"""
    conic(std::string const & name, std::string const & solver, casadi::SpDict const & qp, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL]

    Create a QP solver Solves the following strictly convex problem:



    ::

      min          1/2 x' H x + g' x
      x

      subject to
      LBA <= A x <= UBA
      LBX <= x   <= UBX

      resize(Q x, np, np) + P >= 0 (psd)

      with :
      H sparse (n x n) positive definite
      g dense  (n x 1)
      A sparse (nc x n)
      Q sparse symmetric (np^2 x n)
      P sparse symmetric (np x nq)

      n: number of decision variables (x)
      nc: number of constraints (A)
      nq: shape of psd constraint matrix



    If H is not positive-definite, the solver should throw an error.

    Second-order cone constraints can be added as psd constraints through 
    a 
    helper function 'soc':

    x in R^n y in R

    || x ||_2 <= y

    <=>

    soc(x, y) psd

    This can be proven with soc(x, y)=[y*I x; x' y] using the Shur 
    complement.

    General information

    >List of available options

    +------------------+-----------------+------------------+------------------+
    |        Id        |      Type       |   Description    |     Used in      |
    +==================+=================+==================+==================+
    | ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for derivative   | Internal         |
    |                  |                 | calculation.When |                  |
    |                  |                 | there is an      |                  |
    |                  |                 | option of either |                  |
    |                  |                 | using forward or |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | directional      |                  |
    |                  |                 | derivatives, the |                  |
    |                  |                 | condition ad_wei |                  |
    |                  |                 | ght*nf<=(1-      |                  |
    |                  |                 | ad_weight)*na is |                  |
    |                  |                 | used where nf    |                  |
    |                  |                 | and na are       |                  |
    |                  |                 | estimates of the |                  |
    |                  |                 | number of        |                  |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | mode directional |                  |
    |                  |                 | derivatives      |                  |
    |                  |                 | needed. By       |                  |
    |                  |                 | default,         |                  |
    |                  |                 | ad_weight is     |                  |
    |                  |                 | calculated       |                  |
    |                  |                 | automatically,   |                  |
    |                  |                 | but this can be  |                  |
    |                  |                 | overridden by    |                  |
    |                  |                 | setting this     |                  |
    |                  |                 | option. In       |                  |
    |                  |                 | particular, 0    |                  |
    |                  |                 | means forcing    |                  |
    |                  |                 | forward mode and |                  |
    |                  |                 | 1 forcing        |                  |
    |                  |                 | reverse mode.    |                  |
    |                  |                 | Leave unset for  |                  |
    |                  |                 | (class specific) |                  |
    |                  |                 | heuristics.      |                  |
    +------------------+-----------------+------------------+------------------+
    | ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for sparsity     | Internal         |
    |                  |                 | pattern          |                  |
    |                  |                 | calculation calc |                  |
    |                  |                 | ulation.Override |                  |
    |                  |                 | s default        |                  |
    |                  |                 | behavior. Set to |                  |
    |                  |                 | 0 and 1 to force |                  |
    |                  |                 | forward and      |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | respectively.    |                  |
    |                  |                 | Cf. option       |                  |
    |                  |                 | "ad_weight".     |                  |
    |                  |                 | When set to -1,  |                  |
    |                  |                 | sparsity is      |                  |
    |                  |                 | completely       |                  |
    |                  |                 | ignored and      |                  |
    |                  |                 | dense matrices   |                  |
    |                  |                 | are used.        |                  |
    +------------------+-----------------+------------------+------------------+
    | always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | cache            | OT_DICT         | Prepopulate the  | casadi::Function |
    |                  |                 | function cache.  | Internal         |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | compiler         | OT_STRING       | Just-in-time     | casadi::Function |
    |                  |                 | compiler plugin  | Internal         |
    |                  |                 | to be used.      |                  |
    +------------------+-----------------+------------------+------------------+
    | custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
    |                  |                 | CasADi's AD. Use | Internal         |
    |                  |                 | together with    |                  |
    |                  |                 | 'jac_penalty':   |                  |
    |                  |                 | 0. Note: Highly  |                  |
    |                  |                 | experimental.    |                  |
    |                  |                 | Syntax may break |                  |
    |                  |                 | often.           |                  |
    +------------------+-----------------+------------------+------------------+
    | der_options      | OT_DICT         | Default options  | casadi::Function |
    |                  |                 | to be used to    | Internal         |
    |                  |                 | populate         |                  |
    |                  |                 | forward_options, |                  |
    |                  |                 | reverse_options, |                  |
    |                  |                 | and              |                  |
    |                  |                 | jacobian_options |                  |
    |                  |                 | before those     |                  |
    |                  |                 | options are      |                  |
    |                  |                 | merged in.       |                  |
    +------------------+-----------------+------------------+------------------+
    | derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
    |                  |                 | a derivative of  | Internal         |
    |                  |                 | another          |                  |
    |                  |                 | function. The    |                  |
    |                  |                 | type of          |                  |
    |                  |                 | derivative       |                  |
    |                  |                 | (directional     |                  |
    |                  |                 | derivative,      |                  |
    |                  |                 | Jacobian) is     |                  |
    |                  |                 | inferred from    |                  |
    |                  |                 | the function     |                  |
    |                  |                 | name.            |                  |
    +------------------+-----------------+------------------+------------------+
    | discrete         | OT_BOOLVECTOR   | Indicates which  | casadi::Conic    |
    |                  |                 | of the variables |                  |
    |                  |                 | are discrete,    |                  |
    |                  |                 | i.e. integer-    |                  |
    |                  |                 | valued           |                  |
    +------------------+-----------------+------------------+------------------+
    | dump             | OT_BOOL         | Dump function to | casadi::Function |
    |                  |                 | file upon first  | Internal         |
    |                  |                 | evaluation.      |                  |
    |                  |                 | [false]          |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_dir         | OT_STRING       | Directory to     | casadi::Function |
    |                  |                 | dump             | Internal         |
    |                  |                 | inputs/outputs   |                  |
    |                  |                 | to. Make sure    |                  |
    |                  |                 | the directory    |                  |
    |                  |                 | exists [.]       |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_format      | OT_STRING       | Choose file      | casadi::Function |
    |                  |                 | format to dump   | Internal         |
    |                  |                 | matrices. See    |                  |
    |                  |                 | DM.from_file     |                  |
    |                  |                 | [mtx]            |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | to file          |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs to file  |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_fd        | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation by   |                  |
    |                  |                 | finite           |                  |
    |                  |                 | differencing.    |                  |
    |                  |                 | [default:        |                  |
    |                  |                 | false]]          |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_forward   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using forward    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobians of all |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | outputs with     |                  |
    |                  |                 | respect to all   |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | inputs - if      |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | transposed       |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using reverse    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | error_on_fail    | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when function    | ction            |
    |                  |                 | evaluation fails |                  |
    |                  |                 | (default true).  |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_method        | OT_STRING       | Method for       | casadi::Function |
    |                  |                 | finite           | Internal         |
    |                  |                 | differencing     |                  |
    |                  |                 | [default         |                  |
    |                  |                 | 'central']       |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_options       | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | finite           |                  |
    |                  |                 | difference       |                  |
    |                  |                 | instance         |                  |
    +------------------+-----------------+------------------+------------------+
    | forward_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | forward mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
    |                  |                 | option           | Internal         |
    |                  |                 | (ignored):       |                  |
    |                  |                 | Statistics are   |                  |
    |                  |                 | now always       |                  |
    |                  |                 | collected.       |                  |
    +------------------+-----------------+------------------+------------------+
    | input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
    |                  |                 | when the         | Internal         |
    |                  |                 | numerical values |                  |
    |                  |                 | of the inputs    |                  |
    |                  |                 | don't make sense |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each input if it | Internal         |
    |                  |                 | should be        |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each output if   | Internal         |
    |                  |                 | it should be     |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
    |                  |                 | for a number of  | Internal         |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | directions, it   |                  |
    |                  |                 | may be cheaper   |                  |
    |                  |                 | to compute first |                  |
    |                  |                 | the full         |                  |
    |                  |                 | jacobian and     |                  |
    |                  |                 | then multiply    |                  |
    |                  |                 | with seeds,      |                  |
    |                  |                 | rather than      |                  |
    |                  |                 | obtain the       |                  |
    |                  |                 | requested        |                  |
    |                  |                 | directions in a  |                  |
    |                  |                 | straightforward  |                  |
    |                  |                 | manner. Casadi   |                  |
    |                  |                 | uses a heuristic |                  |
    |                  |                 | to decide which  |                  |
    |                  |                 | is cheaper. A    |                  |
    |                  |                 | high value of    |                  |
    |                  |                 | 'jac_penalty'    |                  |
    |                  |                 | makes it less    |                  |
    |                  |                 | likely for the   |                  |
    |                  |                 | heurstic to      |                  |
    |                  |                 | chose the full   |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy. The    |                  |
    |                  |                 | special value -1 |                  |
    |                  |                 | indicates never  |                  |
    |                  |                 | to use the full  |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy         |                  |
    +------------------+-----------------+------------------+------------------+
    | jacobian_options | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | Jacobian         |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | jit              | OT_BOOL         | Use just-in-time | casadi::Function |
    |                  |                 | compiler to      | Internal         |
    |                  |                 | speed up the     |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
    |                  |                 | temporary source | Internal         |
    |                  |                 | file that jit    |                  |
    |                  |                 | creates.         |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_name         | OT_STRING       | The file name    | casadi::Function |
    |                  |                 | used to write    | Internal         |
    |                  |                 | out code. The    |                  |
    |                  |                 | actual file      |                  |
    |                  |                 | names used       |                  |
    |                  |                 | depend on 'jit_t |                  |
    |                  |                 | emp_suffix' and  |                  |
    |                  |                 | include          |                  |
    |                  |                 | extensions.      |                  |
    |                  |                 | Default:         |                  |
    |                  |                 | 'jit_tmp'        |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_options      | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | jit compiler.    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_serialize    | OT_STRING       | Specify          | casadi::Function |
    |                  |                 | behaviour when   | Internal         |
    |                  |                 | serializing a    |                  |
    |                  |                 | jitted function: |                  |
    |                  |                 | SOURCE|link|embe |                  |
    |                  |                 | d.               |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
    |                  |                 | (seemingly       | Internal         |
    |                  |                 | random) filename |                  |
    |                  |                 | suffix for       |                  |
    |                  |                 | generated code   |                  |
    |                  |                 | and libraries.   |                  |
    |                  |                 | This is desired  |                  |
    |                  |                 | for thread-      |                  |
    |                  |                 | safety. This     |                  |
    |                  |                 | behaviour may    |                  |
    |                  |                 | defeat caching   |                  |
    |                  |                 | compiler         |                  |
    |                  |                 | wrappers.        |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | max_io           | OT_INT          | Acceptable       | casadi::Function |
    |                  |                 | number of inputs | Internal         |
    |                  |                 | and outputs.     |                  |
    |                  |                 | Warn if          |                  |
    |                  |                 | exceeded.        |                  |
    +------------------+-----------------+------------------+------------------+
    | max_num_dir      | OT_INT          | Specify the      | casadi::Function |
    |                  |                 | maximum number   | Internal         |
    |                  |                 | of directions    |                  |
    |                  |                 | for derivative   |                  |
    |                  |                 | functions.       |                  |
    |                  |                 | Overrules the    |                  |
    |                  |                 | builtin optimize |                  |
    |                  |                 | d_num_dir.       |                  |
    +------------------+-----------------+------------------+------------------+
    | never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | post_expand      | OT_BOOL         | After            | casadi::Function |
    |                  |                 | construction,    | Internal         |
    |                  |                 | expand this      |                  |
    |                  |                 | Function .       |                  |
    |                  |                 | Default: False   |                  |
    +------------------+-----------------+------------------+------------------+
    | post_expand_opti | OT_DICT         | Options to be    | casadi::Function |
    | ons              |                 | passed to post-  | Internal         |
    |                  |                 | construction     |                  |
    |                  |                 | expansion.       |                  |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | print_in         | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_out        | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs          |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_problem    | OT_BOOL         | Print a numeric  | casadi::Conic    |
    |                  |                 | description of   |                  |
    |                  |                 | the problem      |                  |
    +------------------+-----------------+------------------+------------------+
    | print_time       | OT_BOOL         | print            | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time. Implies    |                  |
    |                  |                 | record_time.     |                  |
    +------------------+-----------------+------------------+------------------+
    | record_time      | OT_BOOL         | record           | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time, for        |                  |
    |                  |                 | retrieval with   |                  |
    |                  |                 | stats().         |                  |
    +------------------+-----------------+------------------+------------------+
    | regularity_check | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when NaN or Inf  | ction            |
    |                  |                 | appears during   |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | reverse_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | reverse mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
    |                  |                 | field that can   | Internal         |
    |                  |                 | be used to       |                  |
    |                  |                 | identify the     |                  |
    |                  |                 | function or pass |                  |
    |                  |                 | additional       |                  |
    |                  |                 | information      |                  |
    +------------------+-----------------+------------------+------------------+
    | verbose          | OT_BOOL         | Verbose          | casadi::ProtoFun |
    |                  |                 | evaluation  for  | ction            |
    |                  |                 | debugging        |                  |
    +------------------+-----------------+------------------+------------------+

    >Input scheme: casadi::ConicInput (CONIC_NUM_IN = 12)

    +--------------+--------+--------------------------------------------------+
    |  Full name   | Short  |                   Description                    |
    +==============+========+==================================================+
    | CONIC_H      | h      | The square matrix H: sparse, (n x n). Only the   |
    |              |        | lower triangular part is actually used. The      |
    |              |        | matrix is assumed to be symmetrical.             |
    +--------------+--------+--------------------------------------------------+
    | CONIC_G      | g      | The vector g: dense, (n x 1)                     |
    +--------------+--------+--------------------------------------------------+
    | CONIC_A      | a      | The matrix A: sparse, (nc x n) - product with x  |
    |              |        | must be dense.                                   |
    +--------------+--------+--------------------------------------------------+
    | CONIC_LBA    | lba    | dense, (nc x 1)                                  |
    +--------------+--------+--------------------------------------------------+
    | CONIC_UBA    | uba    | dense, (nc x 1)                                  |
    +--------------+--------+--------------------------------------------------+
    | CONIC_LBX    | lbx    | dense, (n x 1)                                   |
    +--------------+--------+--------------------------------------------------+
    | CONIC_UBX    | ubx    | dense, (n x 1)                                   |
    +--------------+--------+--------------------------------------------------+
    | CONIC_X0     | x0     | dense, (n x 1)                                   |
    +--------------+--------+--------------------------------------------------+
    | CONIC_LAM_X0 | lam_x0 | dense                                            |
    +--------------+--------+--------------------------------------------------+
    | CONIC_LAM_A0 | lam_a0 | dense                                            |
    +--------------+--------+--------------------------------------------------+
    | CONIC_Q      | q      | The matrix Q: sparse symmetric, (np^2 x n)       |
    +--------------+--------+--------------------------------------------------+
    | CONIC_P      | p      | The matrix P: sparse symmetric, (np x np)        |
    +--------------+--------+--------------------------------------------------+

    >Output scheme: casadi::ConicOutput (CONIC_NUM_OUT = 4)

    +-------------+-------+---------------------------------------------------+
    |  Full name  | Short |                    Description                    |
    +=============+=======+===================================================+
    | CONIC_X     | x     | The primal solution.                              |
    +-------------+-------+---------------------------------------------------+
    | CONIC_COST  | cost  | The optimal cost.                                 |
    +-------------+-------+---------------------------------------------------+
    | CONIC_LAM_A | lam_a | The dual solution corresponding to linear bounds. |
    +-------------+-------+---------------------------------------------------+
    | CONIC_LAM_X | lam_x | The dual solution corresponding to simple bounds. |
    +-------------+-------+---------------------------------------------------+

    List of plugins
    - cbc

    - clp

    - cplex

    - fatrop

    - gurobi

    - highs

    - hpipm

    - hpmpc

    - ooqp

    - osqp

    - proxqp

    - qpoases

    - sqic

    - superscs

    - ipqp

    - nlpsol

    - qrqp

    Note: some of the plugins in this list might not be available on your 

    system.  Also, there might be extra plugins available to you that are 
    not 
    listed here. You can obtain their documentation with  
    Conic.doc("myextraplugin")



    --------------------------------------------------------------------------------

    cbc
    ---



    Interface to Cbc solver for sparse Quadratic Programs

    Extra doc: https://github.com/casadi/casadi/wiki/L_221

    >List of available options

    +-------------+-----------------------+------------------------------------+
    |     Id      |         Type          |            Description             |
    +=============+=======================+====================================+
    | cbc         | OT_DICT               | Options to be passed to CBC.Three  |
    |             |                       | sets of options are supported. The |
    |             |                       | first can be found in              |
    |             |                       | OsiSolverParameters.hpp. The       |
    |             |                       | second can be found in             |
    |             |                       | CbcModel.hpp. The third are        |
    |             |                       | options that can be passed to      |
    |             |                       | CbcMain1.                          |
    +-------------+-----------------------+------------------------------------+
    | hot_start   | OT_BOOL               | Hot start with x0 [Default false]. |
    +-------------+-----------------------+------------------------------------+
    | sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
    |             |                       | indices.                           |
    +-------------+-----------------------+------------------------------------+
    | sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
    +-------------+-----------------------+------------------------------------+
    | sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
    |             |                       | entries.                           |
    +-------------+-----------------------+------------------------------------+



    --------------------------------------------------------------------------------

    clp
    ---



    Interface to Clp solver for sparse Quadratic Programs

    Extra doc: https://github.com/casadi/casadi/wiki/L_22d

    >List of available options

    +-----+---------+----------------------------------------------------------+
    | Id  |  Type   |                       Description                        |
    +=====+=========+==========================================================+
    | clp | OT_DICT | Options to be passed to CLP. A first set of options can  |
    |     |         | be found in ClpParameters.hpp. eg. 'PrimalTolerance'.    |
    |     |         | There are other options in additions. 'AutomaticScaling' |
    |     |         | (bool) is recognised. 'initial_solve' (default off)      |
    |     |         | activates the use of Clp's initialSolve.                 |
    |     |         | 'initial_solve_options' takes a dictionary with          |
    |     |         | following keys (see ClpSolve.hpp): SolveType (string),   |
    |     |         | PresolveType (string), NumberPasses, SpecialOptions      |
    |     |         | (intvectorvector), IndependentOptions (intvectorvector). |
    +-----+---------+----------------------------------------------------------+



    --------------------------------------------------------------------------------

    cplex
    -----



    Interface to Cplex solver for sparse Quadratic Programs

    Extra doc: https://github.com/casadi/casadi/wiki/L_22a

    >List of available options

    +----------------+-----------------------+---------------------------------+
    |       Id       |         Type          |           Description           |
    +================+=======================+=================================+
    | cplex          | OT_DICT               | Options to be passed to CPLEX   |
    +----------------+-----------------------+---------------------------------+
    | dep_check      | OT_INT                | Detect redundant constraints.   |
    +----------------+-----------------------+---------------------------------+
    | dump_filename  | OT_STRING             | The filename to dump to.        |
    +----------------+-----------------------+---------------------------------+
    | dump_to_file   | OT_BOOL               | Dumps QP to file in CPLEX       |
    |                |                       | format.                         |
    +----------------+-----------------------+---------------------------------+
    | mip_start      | OT_BOOL               | Hot start integers with x0      |
    |                |                       | [Default false].                |
    +----------------+-----------------------+---------------------------------+
    | qp_method      | OT_INT                | Determines which CPLEX          |
    |                |                       | algorithm to use.               |
    +----------------+-----------------------+---------------------------------+
    | sos_groups     | OT_INTVECTORVECTOR    | Definition of SOS groups by     |
    |                |                       | indices.                        |
    +----------------+-----------------------+---------------------------------+
    | sos_types      | OT_INTVECTOR          | Specify 1 or 2 for each SOS     |
    |                |                       | group.                          |
    +----------------+-----------------------+---------------------------------+
    | sos_weights    | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS    |
    |                |                       | entries.                        |
    +----------------+-----------------------+---------------------------------+
    | tol            | OT_DOUBLE             | Tolerance of solver             |
    +----------------+-----------------------+---------------------------------+
    | version_suffix | OT_STRING             | Specify version of cplex to     |
    |                |                       | load. We will attempt to load l |
    |                |                       | ibcplex<version_suffix>.[so|dll |
    |                |                       | |dylib]. Default value is taken |
    |                |                       | from CPLEX_VERSION env          |
    |                |                       | variable.                       |
    +----------------+-----------------------+---------------------------------+
    | warm_start     | OT_BOOL               | Use warm start with simplex     |
    |                |                       | methods (affects only the       |
    |                |                       | simplex methods).               |
    +----------------+-----------------------+---------------------------------+



    --------------------------------------------------------------------------------

    fatrop
    ------



    Interface to Fatrop Solver

    In order to use this interface, you must:

    Decision variables must only by state and control, and the variable 

    ordering must be [x0 u0 x1 u1 ...]

    The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

    gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



    ::

             A0 B0 -I
             C0 D0
                    A1 B1 -I
                    C1 D1



    where I must be a diagonal sparse matrix
    Either supply all of N, nx, ng, nu 
    options or rely on automatic 
    detection

    Extra doc: https://github.com/casadi/casadi/wiki/L_27g

    >List of available options

    +--------+--------------+-----------------------------------------------+
    |   Id   |     Type     |                  Description                  |
    +========+==============+===============================================+
    | N      | OT_INT       | OCP horizon                                   |
    +--------+--------------+-----------------------------------------------+
    | fatrop | OT_DICT      | Options to be passed to fatrop                |
    +--------+--------------+-----------------------------------------------+
    | ng     | OT_INTVECTOR | Number of non-dynamic constraints, length N+1 |
    +--------+--------------+-----------------------------------------------+
    | nu     | OT_INTVECTOR | Number of controls, length N                  |
    +--------+--------------+-----------------------------------------------+
    | nx     | OT_INTVECTOR | Number of states, length N+1                  |
    +--------+--------------+-----------------------------------------------+



    --------------------------------------------------------------------------------

    gurobi
    ------



    Interface to the GUROBI Solver for quadratic programming

    Extra doc: https://github.com/casadi/casadi/wiki/L_22q

    >List of available options

    +-------------+-----------------------+------------------------------------+
    |     Id      |         Type          |            Description             |
    +=============+=======================+====================================+
    | gurobi      | OT_DICT               | Options to be passed to gurobi.    |
    +-------------+-----------------------+------------------------------------+
    | sos_groups  | OT_INTVECTORVECTOR    | Definition of SOS groups by        |
    |             |                       | indices.                           |
    +-------------+-----------------------+------------------------------------+
    | sos_types   | OT_INTVECTOR          | Specify 1 or 2 for each SOS group. |
    +-------------+-----------------------+------------------------------------+
    | sos_weights | OT_DOUBLEVECTORVECTOR | Weights corresponding to SOS       |
    |             |                       | entries.                           |
    +-------------+-----------------------+------------------------------------+
    | vtype       | OT_STRINGVECTOR       | Type of variables: [CONTINUOUS|bin |
    |             |                       | ary|integer|semicont|semiint]      |
    +-------------+-----------------------+------------------------------------+



    --------------------------------------------------------------------------------

    highs
    -----



    Interface to HiGHS solver for sparse Quadratic Programs, see 
    highs.dev for 
    more information and https://www.maths.ed.ac.uk/hall/HiGHS/HighsOptions.html
      for a list of options.

    Extra doc: https://github.com/casadi/casadi/wiki/L_22f

    >List of available options

    +-------+---------+--------------------------------+
    |  Id   |  Type   |          Description           |
    +=======+=========+================================+
    | highs | OT_DICT | Options to be passed to HiGHS. |
    +-------+---------+--------------------------------+



    --------------------------------------------------------------------------------

    hpipm
    -----



    Interface to HPIPM Solver

    In order to use this interface, you must:

    Decision variables must only by state and control, and the variable 

    ordering must be [x0 u0 x1 u1 ...]

    The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

    gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



    ::

             A0 B0 -I
             C0 D0
                    A1 B1 -I
                    C1 D1



    where I must be a diagonal sparse matrix
    Either supply all of N, nx, ng, nu 
    options or rely on automatic 
    detection

    Extra doc: https://github.com/casadi/casadi/wiki/L_242

    >List of available options

    +-------+--------------+--------------------------------------------------+
    |  Id   |     Type     |                   Description                    |
    +=======+==============+==================================================+
    | N     | OT_INT       | OCP horizon                                      |
    +-------+--------------+--------------------------------------------------+
    | hpipm | OT_DICT      | Options to be passed to hpipm                    |
    +-------+--------------+--------------------------------------------------+
    | inf   | OT_DOUBLE    | Replace infinities by this amount [default: 1e8] |
    +-------+--------------+--------------------------------------------------+
    | ng    | OT_INTVECTOR | Number of non-dynamic constraints, length N+1    |
    +-------+--------------+--------------------------------------------------+
    | nu    | OT_INTVECTOR | Number of controls, length N                     |
    +-------+--------------+--------------------------------------------------+
    | nx    | OT_INTVECTOR | Number of states, length N+1                     |
    +-------+--------------+--------------------------------------------------+



    --------------------------------------------------------------------------------

    hpmpc
    -----



    Interface to HMPC Solver

    In order to use this interface, you must:

    Decision variables must only by state and control, and the variable 

    ordering must be [x0 u0 x1 u1 ...]

    The constraints must be in order: [ gap0 lincon0 gap1 lincon1 ]

    gap: Ak+1 = Ak xk + Bk uk lincon: yk= Ck xk + Dk uk



    ::

             A0 B0 -I
             C0 D0
                    A1 B1 -I
                    C1 D1



    where I must be a diagonal sparse matrix
    Either supply all of N, nx, ng, nu 
    options or rely on automatic 
    detection

    Extra doc: https://github.com/casadi/casadi/wiki/L_22p

    >List of available options

    +----------------+--------------+------------------------------------------+
    |       Id       |     Type     |               Description                |
    +================+==============+==========================================+
    | N              | OT_INT       | OCP horizon                              |
    +----------------+--------------+------------------------------------------+
    | blasfeo_target | OT_STRING    | hpmpc target                             |
    +----------------+--------------+------------------------------------------+
    | inf            | OT_DOUBLE    | HPMPC cannot handle infinities.          |
    |                |              | Infinities will be replaced by this      |
    |                |              | option's value.                          |
    +----------------+--------------+------------------------------------------+
    | max_iter       | OT_INT       | Max number of iterations                 |
    +----------------+--------------+------------------------------------------+
    | mu0            | OT_DOUBLE    | Max element in cost function as estimate |
    |                |              | of max multiplier                        |
    +----------------+--------------+------------------------------------------+
    | ng             | OT_INTVECTOR | Number of non-dynamic constraints,       |
    |                |              | length N+1                               |
    +----------------+--------------+------------------------------------------+
    | nu             | OT_INTVECTOR | Number of controls, length N             |
    +----------------+--------------+------------------------------------------+
    | nx             | OT_INTVECTOR | Number of states, length N+1             |
    +----------------+--------------+------------------------------------------+
    | print_level    | OT_INT       | Amount of diagnostic printing [Default:  |
    |                |              | 1].                                      |
    +----------------+--------------+------------------------------------------+
    | target         | OT_STRING    | hpmpc target                             |
    +----------------+--------------+------------------------------------------+
    | tol            | OT_DOUBLE    | Tolerance in the duality measure         |
    +----------------+--------------+------------------------------------------+
    | warm_start     | OT_BOOL      | Use warm-starting                        |
    +----------------+--------------+------------------------------------------+



    --------------------------------------------------------------------------------

    ooqp
    ----



    Interface to the OOQP Solver for quadratic programming The current 

    implementation assumes that OOQP is configured with the MA27 sparse 
    linear 
    solver.

    NOTE: when doing multiple calls to evaluate(), check if you need to 

    reInit();

    Extra doc: https://github.com/casadi/casadi/wiki/L_222

    >List of available options

    +-------------+-----------+------------------------------------------------+
    |     Id      |   Type    |                  Description                   |
    +=============+===========+================================================+
    | artol       | OT_DOUBLE | tolerance as provided with setArTol to OOQP    |
    +-------------+-----------+------------------------------------------------+
    | mutol       | OT_DOUBLE | tolerance as provided with setMuTol to OOQP    |
    +-------------+-----------+------------------------------------------------+
    | print_level | OT_INT    | Print level. OOQP listens to print_level 0, 10 |
    |             |           | and 100                                        |
    +-------------+-----------+------------------------------------------------+



    --------------------------------------------------------------------------------

    osqp
    ----



    Interface to the OSQP Solver for quadratic programming

    Extra doc: https://github.com/casadi/casadi/wiki/L_220

    Interface to the PROXQP Solver for quadratic programming

    Extra doc: https://github.com/casadi/casadi/wiki/L_243

    >List of available options

    +-------------------+---------+--------------------------------------------+
    |        Id         |  Type   |                Description                 |
    +===================+=========+============================================+
    | osqp              | OT_DICT | const Options to be passed to osqp.        |
    +-------------------+---------+--------------------------------------------+
    | warm_start_dual   | OT_BOOL | Use lam_a0 and lam_x0 input to warmstart   |
    |                   |         | [Default: truw].                           |
    +-------------------+---------+--------------------------------------------+
    | warm_start_primal | OT_BOOL | Use x0 input to warmstart [Default: true]. |
    +-------------------+---------+--------------------------------------------+



    --------------------------------------------------------------------------------

    proxqp
    ------



    >List of available options

    +-------------------+---------+--------------------------------------------+
    |        Id         |  Type   |                Description                 |
    +===================+=========+============================================+
    | proxqp            | OT_DICT | const proxqp options.                      |
    +-------------------+---------+--------------------------------------------+
    | warm_start_dual   | OT_BOOL | Use y and z input to warmstart [Default:   |
    |                   |         | true].                                     |
    +-------------------+---------+--------------------------------------------+
    | warm_start_primal | OT_BOOL | Use x input to warmstart [Default: true].  |
    +-------------------+---------+--------------------------------------------+



    --------------------------------------------------------------------------------

    qpoases
    -------



    Interface to QPOases Solver for quadratic programming

    ::

      Extra doc: https://github.com/casadi/casadi/wiki/L_22o 




    >List of available options

    +-------------------------------+-----------+------------------------------+
    |              Id               |   Type    |         Description          |
    +===============================+===========+==============================+
    | CPUtime                       | OT_DOUBLE | The maximum allowed CPU time |
    |                               |           | in seconds for the whole     |
    |                               |           | initialisation (and the      |
    |                               |           | actually required one on     |
    |                               |           | output). Disabled if unset.  |
    +-------------------------------+-----------+------------------------------+
    | boundRelaxation               | OT_DOUBLE | Initial relaxation of bounds |
    |                               |           | to start homotopy and        |
    |                               |           | initial value for far        |
    |                               |           | bounds.                      |
    +-------------------------------+-----------+------------------------------+
    | boundTolerance                | OT_DOUBLE | If upper and lower bounds    |
    |                               |           | differ less than this        |
    |                               |           | tolerance, they are regarded |
    |                               |           | equal, i.e. as equality      |
    |                               |           | constraint.                  |
    +-------------------------------+-----------+------------------------------+
    | enableCholeskyRefactorisation | OT_INT    | Specifies the frequency of a |
    |                               |           | full re-factorisation of     |
    |                               |           | projected Hessian matrix: 0: |
    |                               |           | turns them off, 1: uses them |
    |                               |           | at each iteration etc.       |
    +-------------------------------+-----------+------------------------------+
    | enableDriftCorrection         | OT_INT    | Specifies the frequency of   |
    |                               |           | drift corrections: 0: turns  |
    |                               |           | them off.                    |
    +-------------------------------+-----------+------------------------------+
    | enableEqualities              | OT_BOOL   | Specifies whether equalities |
    |                               |           | should be treated as always  |
    |                               |           | active (True) or not (False) |
    +-------------------------------+-----------+------------------------------+
    | enableFarBounds               | OT_BOOL   | Enables the use of far       |
    |                               |           | bounds.                      |
    +-------------------------------+-----------+------------------------------+
    | enableFlippingBounds          | OT_BOOL   | Enables the use of flipping  |
    |                               |           | bounds.                      |
    +-------------------------------+-----------+------------------------------+
    | enableFullLITests             | OT_BOOL   | Enables condition-hardened   |
    |                               |           | (but more expensive) LI      |
    |                               |           | test.                        |
    +-------------------------------+-----------+------------------------------+
    | enableInertiaCorrection       | OT_BOOL   | Should working set be        |
    |                               |           | repaired when negative       |
    |                               |           | curvature is discovered      |
    |                               |           | during hotstart.             |
    +-------------------------------+-----------+------------------------------+
    | enableNZCTests                | OT_BOOL   | Enables nonzero curvature    |
    |                               |           | tests.                       |
    +-------------------------------+-----------+------------------------------+
    | enableRamping                 | OT_BOOL   | Enables ramping.             |
    +-------------------------------+-----------+------------------------------+
    | enableRegularisation          | OT_BOOL   | Enables automatic Hessian    |
    |                               |           | regularisation.              |
    +-------------------------------+-----------+------------------------------+
    | epsDen                        | OT_DOUBLE | Denominator tolerance for    |
    |                               |           | ratio tests.                 |
    +-------------------------------+-----------+------------------------------+
    | epsFlipping                   | OT_DOUBLE | Tolerance of squared         |
    |                               |           | Cholesky diagonal factor     |
    |                               |           | which triggers flipping      |
    |                               |           | bound.                       |
    +-------------------------------+-----------+------------------------------+
    | epsIterRef                    | OT_DOUBLE | Early termination tolerance  |
    |                               |           | for iterative refinement.    |
    +-------------------------------+-----------+------------------------------+
    | epsLITests                    | OT_DOUBLE | Tolerance for linear         |
    |                               |           | independence tests.          |
    +-------------------------------+-----------+------------------------------+
    | epsNZCTests                   | OT_DOUBLE | Tolerance for nonzero        |
    |                               |           | curvature tests.             |
    +-------------------------------+-----------+------------------------------+
    | epsNum                        | OT_DOUBLE | Numerator tolerance for      |
    |                               |           | ratio tests.                 |
    +-------------------------------+-----------+------------------------------+
    | epsRegularisation             | OT_DOUBLE | Scaling factor of identity   |
    |                               |           | matrix used for Hessian      |
    |                               |           | regularisation.              |
    +-------------------------------+-----------+------------------------------+
    | finalRamping                  | OT_DOUBLE | Final value for ramping      |
    |                               |           | strategy.                    |
    +-------------------------------+-----------+------------------------------+
    | growFarBounds                 | OT_DOUBLE | Factor to grow far bounds.   |
    +-------------------------------+-----------+------------------------------+
    | hessian_type                  | OT_STRING | Type of Hessian - see        |
    |                               |           | qpOASES documentation [UNKNO |
    |                               |           | WN|posdef|semidef|indef|zero |
    |                               |           | |identity]]                  |
    +-------------------------------+-----------+------------------------------+
    | initialFarBounds              | OT_DOUBLE | Initial size for far bounds. |
    +-------------------------------+-----------+------------------------------+
    | initialRamping                | OT_DOUBLE | Start value for ramping      |
    |                               |           | strategy.                    |
    +-------------------------------+-----------+------------------------------+
    | initialStatusBounds           | OT_STRING | Initial status of bounds at  |
    |                               |           | first iteration.             |
    +-------------------------------+-----------+------------------------------+
    | linsol_plugin                 | OT_STRING | Linear solver plugin         |
    +-------------------------------+-----------+------------------------------+
    | maxDualJump                   | OT_DOUBLE | Maximum allowed jump in dual |
    |                               |           | variables in linear          |
    |                               |           | independence tests.          |
    +-------------------------------+-----------+------------------------------+
    | maxPrimalJump                 | OT_DOUBLE | Maximum allowed jump in      |
    |                               |           | primal variables in nonzero  |
    |                               |           | curvature tests.             |
    +-------------------------------+-----------+------------------------------+
    | max_schur                     | OT_INT    | Maximal number of Schur      |
    |                               |           | updates [75]                 |
    +-------------------------------+-----------+------------------------------+
    | nWSR                          | OT_INT    | The maximum number of        |
    |                               |           | working set recalculations   |
    |                               |           | to be performed during the   |
    |                               |           | initial homotopy. Default is |
    |                               |           | 5(nx + nc)                   |
    +-------------------------------+-----------+------------------------------+
    | numRefinementSteps            | OT_INT    | Maximum number of iterative  |
    |                               |           | refinement steps.            |
    +-------------------------------+-----------+------------------------------+
    | numRegularisationSteps        | OT_INT    | Maximum number of successive |
    |                               |           | regularisation steps.        |
    +-------------------------------+-----------+------------------------------+
    | printLevel                    | OT_STRING | Defines the amount of text   |
    |                               |           | output during QP solution,   |
    |                               |           | see Section 5.7              |
    +-------------------------------+-----------+------------------------------+
    | schur                         | OT_BOOL   | Use Schur Complement         |
    |                               |           | Approach [false]             |
    +-------------------------------+-----------+------------------------------+
    | sparse                        | OT_BOOL   | Formulate the QP using       |
    |                               |           | sparse matrices. [false]     |
    +-------------------------------+-----------+------------------------------+
    | terminationTolerance          | OT_DOUBLE | Relative termination         |
    |                               |           | tolerance to stop homotopy.  |
    +-------------------------------+-----------+------------------------------+



    --------------------------------------------------------------------------------

    sqic
    ----



    Interface to the SQIC solver for quadratic programming

    Extra doc: https://github.com/casadi/casadi/wiki/L_21s



    --------------------------------------------------------------------------------

    superscs
    --------



    Interface to the SuperSCS solver for conic programming

    Joris Gillis, 2019

    Extra doc: https://github.com/casadi/casadi/wiki/L_21z

    >List of available options

    +----------+---------+-----------------------------------+
    |    Id    |  Type   |            Description            |
    +==========+=========+===================================+
    | superscs | OT_DICT | Options to be passed to superscs. |
    +----------+---------+-----------------------------------+



    --------------------------------------------------------------------------------

    ipqp
    ----



    Solves QPs using a Mehrotra predictor-corrector interior point method

    Extra doc: https://github.com/casadi/casadi/wiki/L_23c

    >List of available options

    +-----------------------+-----------+--------------------------------------+
    |          Id           |   Type    |             Description              |
    +=======================+===========+======================================+
    | constr_viol_tol       | OT_DOUBLE | Constraint violation tolerance       |
    |                       |           | [1e-8].                              |
    +-----------------------+-----------+--------------------------------------+
    | dual_inf_tol          | OT_DOUBLE | Dual feasibility violation tolerance |
    |                       |           | [1e-8]                               |
    +-----------------------+-----------+--------------------------------------+
    | linear_solver         | OT_STRING | A custom linear solver creator       |
    |                       |           | function [default: ldl]              |
    +-----------------------+-----------+--------------------------------------+
    | linear_solver_options | OT_DICT   | Options to be passed to the linear   |
    |                       |           | solver                               |
    +-----------------------+-----------+--------------------------------------+
    | max_iter              | OT_INT    | Maximum number of iterations [1000]. |
    +-----------------------+-----------+--------------------------------------+
    | min_lam               | OT_DOUBLE | Smallest multiplier treated as       |
    |                       |           | inactive for the initial active set  |
    |                       |           | [0].                                 |
    +-----------------------+-----------+--------------------------------------+
    | print_header          | OT_BOOL   | Print header [true].                 |
    +-----------------------+-----------+--------------------------------------+
    | print_info            | OT_BOOL   | Print info [true].                   |
    +-----------------------+-----------+--------------------------------------+
    | print_iter            | OT_BOOL   | Print iterations [true].             |
    +-----------------------+-----------+--------------------------------------+



    --------------------------------------------------------------------------------

    nlpsol
    ------



    Solve QPs using an  Nlpsol Use the 'nlpsol' option to specify the NLP solver
     to use.

    Extra doc: https://github.com/casadi/casadi/wiki/L_235

    >List of available options

    +----------------+-----------+---------------------------------+
    |       Id       |   Type    |           Description           |
    +================+===========+=================================+
    | nlpsol         | OT_STRING | Name of solver.                 |
    +----------------+-----------+---------------------------------+
    | nlpsol_options | OT_DICT   | Options to be passed to solver. |
    +----------------+-----------+---------------------------------+



    --------------------------------------------------------------------------------

    qrqp
    ----



    Solve QPs using an active-set method

    Extra doc: https://github.com/casadi/casadi/wiki/L_22y

    >List of available options

    +-----------------+-----------+--------------------------------------------+
    |       Id        |   Type    |                Description                 |
    +=================+===========+============================================+
    | constr_viol_tol | OT_DOUBLE | Constraint violation tolerance [1e-8].     |
    +-----------------+-----------+--------------------------------------------+
    | dual_inf_tol    | OT_DOUBLE | Dual feasibility violation tolerance       |
    |                 |           | [1e-8]                                     |
    +-----------------+-----------+--------------------------------------------+
    | max_iter        | OT_INT    | Maximum number of iterations [1000].       |
    +-----------------+-----------+--------------------------------------------+
    | min_lam         | OT_DOUBLE | Smallest multiplier treated as inactive    |
    |                 |           | for the initial active set [0].            |
    +-----------------+-----------+--------------------------------------------+
    | print_header    | OT_BOOL   | Print header [true].                       |
    +-----------------+-----------+--------------------------------------------+
    | print_info      | OT_BOOL   | Print info [true].                         |
    +-----------------+-----------+--------------------------------------------+
    | print_iter      | OT_BOOL   | Print iterations [true].                   |
    +-----------------+-----------+--------------------------------------------+
    | print_lincomb   | OT_BOOL   | Print dependant linear combinations of     |
    |                 |           | constraints [false]. Printed numbers are   |
    |                 |           | 0-based indices into the vector of [simple |
    |                 |           | bounds;linear bounds]                      |
    +-----------------+-----------+--------------------------------------------+

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_21n

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L43

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L43-L46


    """
    return _casadi.conic(*args)

def qpsol(*args):
    r"""
    qpsol(std::string const & name, std::string const & solver, casadi::SXDict const & qp, casadi::Dict const & opts=casadi::Dict()) -> Function
    qpsol(std::string const & name, std::string const & solver, casadi::MXDict const & qp, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    """
    return _casadi.qpsol(*args)

def conic_in(*args):
    r"""
    conic_in() -> std::vector< std::string,std::allocator< std::string > >
    conic_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get QP solver input scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1eg

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L72

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L72-L89


    """
    return _casadi.conic_in(*args)

def conic_out(*args):
    r"""
    conic_out() -> std::vector< std::string,std::allocator< std::string > >
    conic_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get output scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1eh

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L91

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L91-L100


    """
    return _casadi.conic_out(*args)

def conic_n_in(*args):
    r"""
    conic_n_in() -> casadi_int


    [INTERNAL] 
    Get the number of QP solver inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ei

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L102

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L102-L104


    """
    return _casadi.conic_n_in(*args)

def conic_n_out(*args):
    r"""
    conic_n_out() -> casadi_int


    [INTERNAL] 
    Get the number of QP solver outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ej

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L106

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L106-L108


    """
    return _casadi.conic_n_out(*args)

def conic_options(*args):
    r"""
    conic_options(std::string const & name) -> std::vector< std::string,std::allocator< std::string > >


    [INTERNAL] 
    Get all options for a plugin.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ek

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L542

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L542-L544


    """
    return _casadi.conic_options(*args)

def conic_option_type(*args):
    r"""
    conic_option_type(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get type info for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1el

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L546

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L546-L548


    """
    return _casadi.conic_option_type(*args)

def conic_option_info(*args):
    r"""
    conic_option_info(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get documentation for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1em

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L550

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L550-L552


    """
    return _casadi.conic_option_info(*args)

def has_conic(*args):
    r"""
    has_conic(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L31

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L31-L33


    """
    return _casadi.has_conic(*args)

def load_conic(*args):
    r"""
    load_conic(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L35

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L35-L37


    """
    return _casadi.load_conic(*args)

def doc_conic(*args):
    r"""
    doc_conic(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L39

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L39-L41


    """
    return _casadi.doc_conic(*args)

def conic_debug(*args):
    r"""
    conic_debug(Function f, std::string const & filename)
    conic_debug(Function f, std::ostream & file)


    [INTERNAL] 
    Generate native code in the interfaced language for debugging

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.hpp#L54

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/conic.cpp#L54-L58


    """
    return _casadi.conic_debug(*args)

def nlpsol(*args):
    r"""
    nlpsol(std::string const & name, std::string const & solver, casadi::SXDict const & nlp, casadi::Dict const & opts=casadi::Dict()) -> Function
    nlpsol(std::string const & name, std::string const & solver, casadi::MXDict const & nlp, casadi::Dict const & opts=casadi::Dict()) -> Function
    nlpsol(std::string const & name, std::string const & solver, std::string const & fname, casadi::Dict const & opts=casadi::Dict()) -> Function
    nlpsol(std::string const & name, std::string const & solver, Importer compiler, casadi::Dict const & opts=casadi::Dict()) -> Function
    nlpsol(std::string const & name, std::string const & solver, NlpBuilder nl, casadi::Dict const & opts=casadi::Dict()) -> Function
    nlpsol(std::string const & name, std::string const & solver, Function nlp, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    """
    return _casadi.nlpsol(*args)

def nlpsol_in(*args):
    r"""
    nlpsol_in() -> std::vector< std::string,std::allocator< std::string > >
    nlpsol_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get NLP solver input scheme name by index.

    >Input scheme: casadi::NlpsolInput (NLPSOL_NUM_IN = 8)

    +---------------+--------+-------------------------------------------------+
    |   Full name   | Short  |                   Description                   |
    +===============+========+=================================================+
    | NLPSOL_X0     | x0     | Decision variables, initial guess (nx x 1)      |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_P      | p      | Value of fixed parameters (np x 1)              |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_LBX    | lbx    | Decision variables lower bound (nx x 1),        |
    |               |        | default -inf.                                   |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_UBX    | ubx    | Decision variables upper bound (nx x 1),        |
    |               |        | default +inf.                                   |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_LBG    | lbg    | Constraints lower bound (ng x 1), default -inf. |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_UBG    | ubg    | Constraints upper bound (ng x 1), default +inf. |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_LAM_X0 | lam_x0 | Lagrange multipliers for bounds on X, initial   |
    |               |        | guess (nx x 1)                                  |
    +---------------+--------+-------------------------------------------------+
    | NLPSOL_LAM_G0 | lam_g0 | Lagrange multipliers for bounds on G, initial   |
    |               |        | guess (ng x 1)                                  |
    +---------------+--------+-------------------------------------------------+

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t0

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L228

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L228-L241


    """
    return _casadi.nlpsol_in(*args)

def nlpsol_out(*args):
    r"""
    nlpsol_out() -> std::vector< std::string,std::allocator< std::string > >
    nlpsol_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get output scheme name by index.

    >Output scheme: casadi::NlpsolOutput (NLPSOL_NUM_OUT = 6)

    +--------------+-------+---------------------------------------------------+
    |  Full name   | Short |                    Description                    |
    +==============+=======+===================================================+
    | NLPSOL_X     | x     | Decision variables at the optimal solution (nx x  |
    |              |       | 1)                                                |
    +--------------+-------+---------------------------------------------------+
    | NLPSOL_F     | f     | Cost function value at the optimal solution (1 x  |
    |              |       | 1)                                                |
    +--------------+-------+---------------------------------------------------+
    | NLPSOL_G     | g     | Constraints function at the optimal solution (ng  |
    |              |       | x 1)                                              |
    +--------------+-------+---------------------------------------------------+
    | NLPSOL_LAM_X | lam_x | Lagrange multipliers for bounds on X at the       |
    |              |       | solution (nx x 1)                                 |
    +--------------+-------+---------------------------------------------------+
    | NLPSOL_LAM_G | lam_g | Lagrange multipliers for bounds on G at the       |
    |              |       | solution (ng x 1)                                 |
    +--------------+-------+---------------------------------------------------+
    | NLPSOL_LAM_P | lam_p | Lagrange multipliers for bounds on P at the       |
    |              |       | solution (np x 1)                                 |
    +--------------+-------+---------------------------------------------------+

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t1

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L243

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L243-L254


    """
    return _casadi.nlpsol_out(*args)

def nlpsol_n_in(*args):
    r"""
    nlpsol_n_in() -> casadi_int


    [INTERNAL] 
    Number of NLP solver inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t2

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L256

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L256-L258


    """
    return _casadi.nlpsol_n_in(*args)

def nlpsol_n_out(*args):
    r"""
    nlpsol_n_out() -> casadi_int


    [INTERNAL] 
    Number of NLP solver outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t3

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L260

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L260-L262


    """
    return _casadi.nlpsol_n_out(*args)

def nlpsol_default_in(*args):
    r"""
    nlpsol_default_in(casadi_int ind) -> double
    nlpsol_default_in() -> std::vector< double,std::allocator< double > >


    [INTERNAL] 
    Default input for an NLP solver.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t4

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L222

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L222-L226


    """
    return _casadi.nlpsol_default_in(*args)

def nlpsol_options(*args):
    r"""
    nlpsol_options(std::string const & name) -> std::vector< std::string,std::allocator< std::string > >


    [INTERNAL] 
    Get all options for a plugin.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L900

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L900-L902


    """
    return _casadi.nlpsol_options(*args)

def nlpsol_option_type(*args):
    r"""
    nlpsol_option_type(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get type info for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t6

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L904

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L904-L906


    """
    return _casadi.nlpsol_option_type(*args)

def nlpsol_option_info(*args):
    r"""
    nlpsol_option_info(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get documentation for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1t7

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L908

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L908-L910


    """
    return _casadi.nlpsol_option_info(*args)

def has_nlpsol(*args):
    r"""
    has_nlpsol(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L34

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L34-L36


    """
    return _casadi.has_nlpsol(*args)

def load_nlpsol(*args):
    r"""
    load_nlpsol(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L38

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L38-L40


    """
    return _casadi.load_nlpsol(*args)

def doc_nlpsol(*args):
    r"""
    doc_nlpsol(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.hpp#L42

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/nlpsol.cpp#L42-L44


    """
    return _casadi.doc_nlpsol(*args)

def rootfinder(*args):
    r"""
    rootfinder(std::string const & name, std::string const & solver, casadi::SXDict const & rfp, casadi::Dict const & opts=casadi::Dict()) -> Function
    rootfinder(std::string const & name, std::string const & solver, casadi::MXDict const & rfp, casadi::Dict const & opts=casadi::Dict()) -> Function
    rootfinder(std::string const & name, std::string const & solver, Function f, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    """
    return _casadi.rootfinder(*args)

def rootfinder_in(*args):
    r"""
    rootfinder_in() -> std::vector< std::string,std::allocator< std::string > >
    rootfinder_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get rootfinder input scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u0

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L47

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L47-L54


    """
    return _casadi.rootfinder_in(*args)

def rootfinder_out(*args):
    r"""
    rootfinder_out() -> std::vector< std::string,std::allocator< std::string > >
    rootfinder_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get rootfinder output scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u1

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L56

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L56-L62


    """
    return _casadi.rootfinder_out(*args)

def rootfinder_n_in(*args):
    r"""
    rootfinder_n_in() -> casadi_int


    [INTERNAL] 
    Number of rootfinder inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u2

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L64

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L64-L66


    """
    return _casadi.rootfinder_n_in(*args)

def rootfinder_n_out(*args):
    r"""
    rootfinder_n_out() -> casadi_int


    [INTERNAL] 
    Number of rootfinder outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u3

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L68

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L68-L70


    """
    return _casadi.rootfinder_n_out(*args)

def rootfinder_options(*args):
    r"""
    rootfinder_options(std::string const & name) -> std::vector< std::string,std::allocator< std::string > >


    [INTERNAL] 
    Get all options for a plugin.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u4

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L72

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L72-L74


    """
    return _casadi.rootfinder_options(*args)

def rootfinder_option_type(*args):
    r"""
    rootfinder_option_type(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get type info for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L76

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L76-L78


    """
    return _casadi.rootfinder_option_type(*args)

def rootfinder_option_info(*args):
    r"""
    rootfinder_option_info(std::string const & name, std::string const & op) -> std::string


    [INTERNAL] 
    Get documentation for a particular option.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u6

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L80

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L80-L82


    """
    return _casadi.rootfinder_option_info(*args)

def has_rootfinder(*args):
    r"""
    has_rootfinder(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L84

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L84-L86


    """
    return _casadi.has_rootfinder(*args)

def load_rootfinder(*args):
    r"""
    load_rootfinder(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L88

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L88-L90


    """
    return _casadi.load_rootfinder(*args)

def doc_rootfinder(*args):
    r"""
    doc_rootfinder(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.hpp#L92

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/rootfinder.cpp#L92-L94


    """
    return _casadi.doc_rootfinder(*args)
class Linsol(SharedObject, PrintableCommon):
    r"""


    [INTERNAL] 
    Linear solver.

    Create a solver for linear systems of equations Solves the linear 
    system 
    A*X = B or A^T*X = B for X with A square and non-singular

    If A is structurally singular, an error will be thrown during init. If
     A is
     numerically singular, the prepare step will fail.
    General informationList 
    of plugins
    - csparsecholesky

    - csparse

    - ma27

    - lapacklu

    - lapackqr

    - mumps

    - ldl

    - qr

    - tridiag

    - symbolicqr

    Note: some of the plugins in this list might not be available on your 

    system.  Also, there might be extra plugins available to you that are 
    not 
    listed here. You can obtain their documentation with   
    Linsol.doc("myextraplugin")



    --------------------------------------------------------------------------------

    csparsecholesky
    ---------------



    Linsol with CSparseCholesky Interface

    Extra doc: https://github.com/casadi/casadi/wiki/L_21u



    --------------------------------------------------------------------------------

    csparse
    -------



    Linsol with CSparse Interface

    Extra doc: https://github.com/casadi/casadi/wiki/L_21t



    --------------------------------------------------------------------------------

    ma27
    ----



    Interface to the sparse direct linear solver MA27 Works for symmetric

    indefinite systems Partly adopted from qpOASES 3.2 
    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_229



    --------------------------------------------------------------------------------

    lapacklu
    --------



    This class solves the linear system  A.x=b by making an LU factorization of 
    A:  A = L.U, with L lower and U upper triangular

    Extra doc: https://github.com/casadi/casadi/wiki/L_22h

    >List of available options

    +-----------------------------+---------+----------------------------------+
    |             Id              |  Type   |           Description            |
    +=============================+=========+==================================+
    | allow_equilibration_failure | OT_BOOL | Non-fatal error when             |
    |                             |         | equilibration fails              |
    +-----------------------------+---------+----------------------------------+
    | equilibration               | OT_BOOL | Equilibrate the matrix           |
    +-----------------------------+---------+----------------------------------+



    --------------------------------------------------------------------------------

    lapackqr
    --------



    This class solves the linear system  A.x=b by making an QR factorization of 
    A:  A = Q.R, with Q orthogonal and R upper triangular

    Extra doc: https://github.com/casadi/casadi/wiki/L_22g

    >List of available options

    +----------+--------+------------------------------------------------------+
    |    Id    |  Type  |                     Description                      |
    +==========+========+======================================================+
    | max_nrhs | OT_INT | Maximum number of right-hand-sides that get          |
    |          |        | processed in a single pass [default:10].             |
    +----------+--------+------------------------------------------------------+



    --------------------------------------------------------------------------------

    mumps
    -----



    Interface to the sparse direct linear solver MUMPS Works for 
    symmetric 
    indefinite systems 
    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_22t

    >List of available options

    +-----------+---------+-------------------+
    |    Id     |  Type   |    Description    |
    +===========+=========+===================+
    | posdef    | OT_BOOL | Positive definite |
    +-----------+---------+-------------------+
    | symmetric | OT_BOOL | Symmetric matrix  |
    +-----------+---------+-------------------+



    --------------------------------------------------------------------------------

    ldl
    ---



    Linear solver using sparse direct LDL factorization

    Extra doc: https://github.com/casadi/casadi/wiki/L_233



    --------------------------------------------------------------------------------

    qr
    --



    Linear solver using sparse direct QR factorization

    Extra doc: https://github.com/casadi/casadi/wiki/L_22z



    --------------------------------------------------------------------------------

    tridiag
    -------



    Linear solver for tridiagonal matrices

    Extra doc: https://github.com/casadi/casadi/wiki/L_22v



    --------------------------------------------------------------------------------

    symbolicqr
    ----------



    Linear solver for sparse least-squares problems Inspired from 
    https://github.com/scipy/scipy/blob/v0.14.0/scipy/sparse/linalg/isolve/lsqr.py#L96

    Extra doc: https://github.com/casadi/casadi/wiki/L_230

    Linsol based on QR factorization with sparsity pattern based reordering  
    without partial pivoting

    Extra doc: https://github.com/casadi/casadi/wiki/L_231

    >List of available options

    +-------+---------+----------------------------------------------------+
    |  Id   |  Type   |                    Description                     |
    +=======+=========+====================================================+
    | fopts | OT_DICT | Options to be passed to generated function objects |
    +-------+---------+----------------------------------------------------+

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_1kh

    C++ includes: linsol.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.Linsol_type_name(*args)

    @staticmethod
    def has_plugin(*args):
        r"""has_plugin(std::string const & name) -> bool"""
        return _casadi.Linsol_has_plugin(*args)

    @staticmethod
    def load_plugin(*args):
        r"""load_plugin(std::string const & name)"""
        return _casadi.Linsol_load_plugin(*args)

    @staticmethod
    def doc(*args):
        r"""doc(std::string const & name) -> std::string"""
        return _casadi.Linsol_doc(*args)

    def plugin_name(self, *args):
        r"""
        plugin_name(Linsol self) -> std::string


        [INTERNAL] 
        Query plugin name.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L97

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L64-L66


        """
        return _casadi.Linsol_plugin_name(self, *args)

    def sparsity(self, *args):
        r"""
        sparsity(Linsol self) -> Sparsity


        [INTERNAL] 
        Get linear system sparsity.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L100

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L68-L70


        """
        return _casadi.Linsol_sparsity(self, *args)

    def sfact(self, *args):
        r"""
        sfact(Linsol self, DM A)


        [INTERNAL] 
        Symbolic factorization of the linear system, e.g. selecting 
        pivots.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L103

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L104-L107


        """
        return _casadi.Linsol_sfact(self, *args)

    def nfact(self, *args):
        r"""
        nfact(Linsol self, DM A)


        [INTERNAL] 
        Numeric factorization of the linear system.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L106

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L126-L129


        """
        return _casadi.Linsol_nfact(self, *args)

    def solve(self, *args):
        r"""
        solve(Linsol self, DM A, DM B, bool tr=False) -> DM
        solve(Linsol self, MX A, MX B, bool tr=False) -> MX


        [INTERNAL] 
         Solve linear system of equations

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L111

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L100-L102


        """
        return _casadi.Linsol_solve(self, *args)

    def neig(self, *args):
        r"""
        neig(Linsol self, DM A) -> casadi_int


        [INTERNAL] 
        Number of negative eigenvalues.

        Not available for all solvers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1kk

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L119

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L165-L170


        """
        return _casadi.Linsol_neig(self, *args)

    def rank(self, *args):
        r"""
        rank(Linsol self, DM A) -> casadi_int


        [INTERNAL] 
         Matrix rank.

        Not available for all solvers

        Extra doc: https://github.com/casadi/casadi/wiki/L_1kl

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L126

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L176-L181


        """
        return _casadi.Linsol_rank(self, *args)

    def stats(self, *args):
        r"""
        stats(Linsol self, int mem=1) -> casadi::Dict


        [INTERNAL] 
        Get all statistics obtained at the end of the last evaluate 
        call.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L129

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L217-L219


        """
        return _casadi.Linsol_stats(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Linsol self) -> Linsol
        __init__(Linsol self, std::string const & name, std::string const & solver, Sparsity sp, casadi::Dict const & opts=casadi::Dict()) -> Linsol
        __init__(Linsol self, Linsol other) -> Linsol
        """
        _casadi.Linsol_swiginit(self, _casadi.new_Linsol(*args))
    __swig_destroy__ = _casadi.delete_Linsol

# Register Linsol in _casadi:
_casadi.Linsol_swigregister(Linsol)

def has_linsol(*args):
    r"""
    has_linsol(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L205

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L205-L207


    """
    return _casadi.has_linsol(*args)

def load_linsol(*args):
    r"""
    load_linsol(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L209

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L209-L211


    """
    return _casadi.load_linsol(*args)

def doc_linsol(*args):
    r"""
    doc_linsol(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.hpp#L213

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/linsol.cpp#L213-L215


    """
    return _casadi.doc_linsol(*args)

def dplesol(*args):
    r"""
    dplesol(std::string const & name, std::string const & solver, casadi::SpDict const & st, casadi::Dict const & opts=casadi::Dict()) -> Function
    dplesol(MX A, MX V, std::string const & solver, casadi::Dict const & opts=casadi::Dict()) -> MX
    dplesol(casadi::MXVector const & A, casadi::MXVector const & V, std::string const & solver, casadi::Dict const & opts=casadi::Dict()) -> casadi::MXVector
    dplesol(casadi::DMVector const & A, casadi::DMVector const & V, std::string const & solver, casadi::Dict const & opts=casadi::Dict()) -> casadi::DMVector


    [INTERNAL] 
    """
    return _casadi.dplesol(*args)

def dple_in(*args):
    r"""
    dple_in() -> std::vector< std::string,std::allocator< std::string > >
    dple_in(casadi_int ind) -> std::string


    [INTERNAL] 
    Get DPLE input scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ne

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L114

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L114-L121


    """
    return _casadi.dple_in(*args)

def dple_out(*args):
    r"""
    dple_out() -> std::vector< std::string,std::allocator< std::string > >
    dple_out(casadi_int ind) -> std::string


    [INTERNAL] 
    Get DPLE output scheme name by index.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1nf

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L123

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L123-L129


    """
    return _casadi.dple_out(*args)

def dple_n_in(*args):
    r"""
    dple_n_in() -> casadi_int


    [INTERNAL] 
    Get the number of QP solver inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ng

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L131

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L131-L133


    """
    return _casadi.dple_n_in(*args)

def dple_n_out(*args):
    r"""
    dple_n_out() -> casadi_int


    [INTERNAL] 
    Get the number of QP solver outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1nh

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L135

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L135-L137


    """
    return _casadi.dple_n_out(*args)

def has_dple(*args):
    r"""
    has_dple(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L31

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L31-L33


    """
    return _casadi.has_dple(*args)

def load_dple(*args):
    r"""
    load_dple(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L35

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L35-L37


    """
    return _casadi.load_dple(*args)

def doc_dple(*args):
    r"""
    doc_dple(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.hpp#L39

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/dple.cpp#L39-L41


    """
    return _casadi.doc_dple(*args)

def expmsol(*args):
    r"""
    expmsol(std::string const & name, std::string const & solver, Sparsity A, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL]

    Performs a matrix exponentiation expm(A)
    General information

    >List of available options

    +------------------+-----------------+------------------+------------------+
    |        Id        |      Type       |   Description    |     Used in      |
    +==================+=================+==================+==================+
    | ad_weight        | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for derivative   | Internal         |
    |                  |                 | calculation.When |                  |
    |                  |                 | there is an      |                  |
    |                  |                 | option of either |                  |
    |                  |                 | using forward or |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | directional      |                  |
    |                  |                 | derivatives, the |                  |
    |                  |                 | condition ad_wei |                  |
    |                  |                 | ght*nf<=(1-      |                  |
    |                  |                 | ad_weight)*na is |                  |
    |                  |                 | used where nf    |                  |
    |                  |                 | and na are       |                  |
    |                  |                 | estimates of the |                  |
    |                  |                 | number of        |                  |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | mode directional |                  |
    |                  |                 | derivatives      |                  |
    |                  |                 | needed. By       |                  |
    |                  |                 | default,         |                  |
    |                  |                 | ad_weight is     |                  |
    |                  |                 | calculated       |                  |
    |                  |                 | automatically,   |                  |
    |                  |                 | but this can be  |                  |
    |                  |                 | overridden by    |                  |
    |                  |                 | setting this     |                  |
    |                  |                 | option. In       |                  |
    |                  |                 | particular, 0    |                  |
    |                  |                 | means forcing    |                  |
    |                  |                 | forward mode and |                  |
    |                  |                 | 1 forcing        |                  |
    |                  |                 | reverse mode.    |                  |
    |                  |                 | Leave unset for  |                  |
    |                  |                 | (class specific) |                  |
    |                  |                 | heuristics.      |                  |
    +------------------+-----------------+------------------+------------------+
    | ad_weight_sp     | OT_DOUBLE       | Weighting factor | casadi::Function |
    |                  |                 | for sparsity     | Internal         |
    |                  |                 | pattern          |                  |
    |                  |                 | calculation calc |                  |
    |                  |                 | ulation.Override |                  |
    |                  |                 | s default        |                  |
    |                  |                 | behavior. Set to |                  |
    |                  |                 | 0 and 1 to force |                  |
    |                  |                 | forward and      |                  |
    |                  |                 | reverse mode     |                  |
    |                  |                 | respectively.    |                  |
    |                  |                 | Cf. option       |                  |
    |                  |                 | "ad_weight".     |                  |
    |                  |                 | When set to -1,  |                  |
    |                  |                 | sparsity is      |                  |
    |                  |                 | completely       |                  |
    |                  |                 | ignored and      |                  |
    |                  |                 | dense matrices   |                  |
    |                  |                 | are used.        |                  |
    +------------------+-----------------+------------------+------------------+
    | always_inline    | OT_BOOL         | Force inlining.  | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | cache            | OT_DICT         | Prepopulate the  | casadi::Function |
    |                  |                 | function cache.  | Internal         |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | compiler         | OT_STRING       | Just-in-time     | casadi::Function |
    |                  |                 | compiler plugin  | Internal         |
    |                  |                 | to be used.      |                  |
    +------------------+-----------------+------------------+------------------+
    | const_A          | OT_BOOL         | Assume A is      | casadi::Expm     |
    |                  |                 | constant.        |                  |
    |                  |                 | Default: false.  |                  |
    +------------------+-----------------+------------------+------------------+
    | custom_jacobian  | OT_FUNCTION     | Override         | casadi::Function |
    |                  |                 | CasADi's AD. Use | Internal         |
    |                  |                 | together with    |                  |
    |                  |                 | 'jac_penalty':   |                  |
    |                  |                 | 0. Note: Highly  |                  |
    |                  |                 | experimental.    |                  |
    |                  |                 | Syntax may break |                  |
    |                  |                 | often.           |                  |
    +------------------+-----------------+------------------+------------------+
    | der_options      | OT_DICT         | Default options  | casadi::Function |
    |                  |                 | to be used to    | Internal         |
    |                  |                 | populate         |                  |
    |                  |                 | forward_options, |                  |
    |                  |                 | reverse_options, |                  |
    |                  |                 | and              |                  |
    |                  |                 | jacobian_options |                  |
    |                  |                 | before those     |                  |
    |                  |                 | options are      |                  |
    |                  |                 | merged in.       |                  |
    +------------------+-----------------+------------------+------------------+
    | derivative_of    | OT_FUNCTION     | The function is  | casadi::Function |
    |                  |                 | a derivative of  | Internal         |
    |                  |                 | another          |                  |
    |                  |                 | function. The    |                  |
    |                  |                 | type of          |                  |
    |                  |                 | derivative       |                  |
    |                  |                 | (directional     |                  |
    |                  |                 | derivative,      |                  |
    |                  |                 | Jacobian) is     |                  |
    |                  |                 | inferred from    |                  |
    |                  |                 | the function     |                  |
    |                  |                 | name.            |                  |
    +------------------+-----------------+------------------+------------------+
    | dump             | OT_BOOL         | Dump function to | casadi::Function |
    |                  |                 | file upon first  | Internal         |
    |                  |                 | evaluation.      |                  |
    |                  |                 | [false]          |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_dir         | OT_STRING       | Directory to     | casadi::Function |
    |                  |                 | dump             | Internal         |
    |                  |                 | inputs/outputs   |                  |
    |                  |                 | to. Make sure    |                  |
    |                  |                 | the directory    |                  |
    |                  |                 | exists [.]       |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_format      | OT_STRING       | Choose file      | casadi::Function |
    |                  |                 | format to dump   | Internal         |
    |                  |                 | matrices. See    |                  |
    |                  |                 | DM.from_file     |                  |
    |                  |                 | [mtx]            |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_in          | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | to file          |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | dump_out         | OT_BOOL         | Dump numerical   | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs to file  |                  |
    |                  |                 | (readable with   |                  |
    |                  |                 | DM.from_file )   |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_fd        | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation by   |                  |
    |                  |                 | finite           |                  |
    |                  |                 | differencing.    |                  |
    |                  |                 | [default:        |                  |
    |                  |                 | false]]          |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_forward   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using forward    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_jacobian  | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | Jacobians of all |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | outputs with     |                  |
    |                  |                 | respect to all   |                  |
    |                  |                 | differentiable   |                  |
    |                  |                 | inputs - if      |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | enable_reverse   | OT_BOOL         | Enable           | casadi::Function |
    |                  |                 | derivative       | Internal         |
    |                  |                 | calculation      |                  |
    |                  |                 | using generated  |                  |
    |                  |                 | functions for    |                  |
    |                  |                 | transposed       |                  |
    |                  |                 | Jacobian-times-  |                  |
    |                  |                 | vector products  |                  |
    |                  |                 | - typically      |                  |
    |                  |                 | using reverse    |                  |
    |                  |                 | mode AD - if     |                  |
    |                  |                 | available.       |                  |
    |                  |                 | [default: true]  |                  |
    +------------------+-----------------+------------------+------------------+
    | error_on_fail    | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when function    | ction            |
    |                  |                 | evaluation fails |                  |
    |                  |                 | (default true).  |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_method        | OT_STRING       | Method for       | casadi::Function |
    |                  |                 | finite           | Internal         |
    |                  |                 | differencing     |                  |
    |                  |                 | [default         |                  |
    |                  |                 | 'central']       |                  |
    +------------------+-----------------+------------------+------------------+
    | fd_options       | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | finite           |                  |
    |                  |                 | difference       |                  |
    |                  |                 | instance         |                  |
    +------------------+-----------------+------------------+------------------+
    | forward_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | forward mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | gather_stats     | OT_BOOL         | Deprecated       | casadi::Function |
    |                  |                 | option           | Internal         |
    |                  |                 | (ignored):       |                  |
    |                  |                 | Statistics are   |                  |
    |                  |                 | now always       |                  |
    |                  |                 | collected.       |                  |
    +------------------+-----------------+------------------+------------------+
    | input_scheme     | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | inputs_check     | OT_BOOL         | Throw exceptions | casadi::Function |
    |                  |                 | when the         | Internal         |
    |                  |                 | numerical values |                  |
    |                  |                 | of the inputs    |                  |
    |                  |                 | don't make sense |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_in       | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each input if it | Internal         |
    |                  |                 | should be        |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | is_diff_out      | OT_BOOLVECTOR   | Indicate for     | casadi::Function |
    |                  |                 | each output if   | Internal         |
    |                  |                 | it should be     |                  |
    |                  |                 | differentiable.  |                  |
    +------------------+-----------------+------------------+------------------+
    | jac_penalty      | OT_DOUBLE       | When requested   | casadi::Function |
    |                  |                 | for a number of  | Internal         |
    |                  |                 | forward/reverse  |                  |
    |                  |                 | directions, it   |                  |
    |                  |                 | may be cheaper   |                  |
    |                  |                 | to compute first |                  |
    |                  |                 | the full         |                  |
    |                  |                 | jacobian and     |                  |
    |                  |                 | then multiply    |                  |
    |                  |                 | with seeds,      |                  |
    |                  |                 | rather than      |                  |
    |                  |                 | obtain the       |                  |
    |                  |                 | requested        |                  |
    |                  |                 | directions in a  |                  |
    |                  |                 | straightforward  |                  |
    |                  |                 | manner. Casadi   |                  |
    |                  |                 | uses a heuristic |                  |
    |                  |                 | to decide which  |                  |
    |                  |                 | is cheaper. A    |                  |
    |                  |                 | high value of    |                  |
    |                  |                 | 'jac_penalty'    |                  |
    |                  |                 | makes it less    |                  |
    |                  |                 | likely for the   |                  |
    |                  |                 | heurstic to      |                  |
    |                  |                 | chose the full   |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy. The    |                  |
    |                  |                 | special value -1 |                  |
    |                  |                 | indicates never  |                  |
    |                  |                 | to use the full  |                  |
    |                  |                 | Jacobian         |                  |
    |                  |                 | strategy         |                  |
    +------------------+-----------------+------------------+------------------+
    | jacobian_options | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | Jacobian         |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | jit              | OT_BOOL         | Use just-in-time | casadi::Function |
    |                  |                 | compiler to      | Internal         |
    |                  |                 | speed up the     |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_cleanup      | OT_BOOL         | Cleanup up the   | casadi::Function |
    |                  |                 | temporary source | Internal         |
    |                  |                 | file that jit    |                  |
    |                  |                 | creates.         |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_name         | OT_STRING       | The file name    | casadi::Function |
    |                  |                 | used to write    | Internal         |
    |                  |                 | out code. The    |                  |
    |                  |                 | actual file      |                  |
    |                  |                 | names used       |                  |
    |                  |                 | depend on 'jit_t |                  |
    |                  |                 | emp_suffix' and  |                  |
    |                  |                 | include          |                  |
    |                  |                 | extensions.      |                  |
    |                  |                 | Default:         |                  |
    |                  |                 | 'jit_tmp'        |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_options      | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to the    | Internal         |
    |                  |                 | jit compiler.    |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_serialize    | OT_STRING       | Specify          | casadi::Function |
    |                  |                 | behaviour when   | Internal         |
    |                  |                 | serializing a    |                  |
    |                  |                 | jitted function: |                  |
    |                  |                 | SOURCE|link|embe |                  |
    |                  |                 | d.               |                  |
    +------------------+-----------------+------------------+------------------+
    | jit_temp_suffix  | OT_BOOL         | Use a temporary  | casadi::Function |
    |                  |                 | (seemingly       | Internal         |
    |                  |                 | random) filename |                  |
    |                  |                 | suffix for       |                  |
    |                  |                 | generated code   |                  |
    |                  |                 | and libraries.   |                  |
    |                  |                 | This is desired  |                  |
    |                  |                 | for thread-      |                  |
    |                  |                 | safety. This     |                  |
    |                  |                 | behaviour may    |                  |
    |                  |                 | defeat caching   |                  |
    |                  |                 | compiler         |                  |
    |                  |                 | wrappers.        |                  |
    |                  |                 | Default: true    |                  |
    +------------------+-----------------+------------------+------------------+
    | max_io           | OT_INT          | Acceptable       | casadi::Function |
    |                  |                 | number of inputs | Internal         |
    |                  |                 | and outputs.     |                  |
    |                  |                 | Warn if          |                  |
    |                  |                 | exceeded.        |                  |
    +------------------+-----------------+------------------+------------------+
    | max_num_dir      | OT_INT          | Specify the      | casadi::Function |
    |                  |                 | maximum number   | Internal         |
    |                  |                 | of directions    |                  |
    |                  |                 | for derivative   |                  |
    |                  |                 | functions.       |                  |
    |                  |                 | Overrules the    |                  |
    |                  |                 | builtin optimize |                  |
    |                  |                 | d_num_dir.       |                  |
    +------------------+-----------------+------------------+------------------+
    | never_inline     | OT_BOOL         | Forbid inlining. | casadi::Function |
    |                  |                 |                  | Internal         |
    +------------------+-----------------+------------------+------------------+
    | output_scheme    | OT_STRINGVECTOR | Deprecated       | casadi::Function |
    |                  |                 | option (ignored) | Internal         |
    +------------------+-----------------+------------------+------------------+
    | post_expand      | OT_BOOL         | After            | casadi::Function |
    |                  |                 | construction,    | Internal         |
    |                  |                 | expand this      |                  |
    |                  |                 | Function .       |                  |
    |                  |                 | Default: False   |                  |
    +------------------+-----------------+------------------+------------------+
    | post_expand_opti | OT_DICT         | Options to be    | casadi::Function |
    | ons              |                 | passed to post-  | Internal         |
    |                  |                 | construction     |                  |
    |                  |                 | expansion.       |                  |
    |                  |                 | Default: empty   |                  |
    +------------------+-----------------+------------------+------------------+
    | print_in         | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of inputs | Internal         |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_out        | OT_BOOL         | Print numerical  | casadi::Function |
    |                  |                 | values of        | Internal         |
    |                  |                 | outputs          |                  |
    |                  |                 | [default: false] |                  |
    +------------------+-----------------+------------------+------------------+
    | print_time       | OT_BOOL         | print            | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time. Implies    |                  |
    |                  |                 | record_time.     |                  |
    +------------------+-----------------+------------------+------------------+
    | record_time      | OT_BOOL         | record           | casadi::ProtoFun |
    |                  |                 | information      | ction            |
    |                  |                 | about execution  |                  |
    |                  |                 | time, for        |                  |
    |                  |                 | retrieval with   |                  |
    |                  |                 | stats().         |                  |
    +------------------+-----------------+------------------+------------------+
    | regularity_check | OT_BOOL         | Throw exceptions | casadi::ProtoFun |
    |                  |                 | when NaN or Inf  | ction            |
    |                  |                 | appears during   |                  |
    |                  |                 | evaluation       |                  |
    +------------------+-----------------+------------------+------------------+
    | reverse_options  | OT_DICT         | Options to be    | casadi::Function |
    |                  |                 | passed to a      | Internal         |
    |                  |                 | reverse mode     |                  |
    |                  |                 | constructor      |                  |
    +------------------+-----------------+------------------+------------------+
    | user_data        | OT_VOIDPTR      | A user-defined   | casadi::Function |
    |                  |                 | field that can   | Internal         |
    |                  |                 | be used to       |                  |
    |                  |                 | identify the     |                  |
    |                  |                 | function or pass |                  |
    |                  |                 | additional       |                  |
    |                  |                 | information      |                  |
    +------------------+-----------------+------------------+------------------+
    | verbose          | OT_BOOL         | Verbose          | casadi::ProtoFun |
    |                  |                 | evaluation  for  | ction            |
    |                  |                 | debugging        |                  |
    +------------------+-----------------+------------------+------------------+

    List of plugins
    - slicot

    Note: some of the plugins in this list might not be available on your 

    system.  Also, there might be extra plugins available to you that are 
    not 
    listed here. You can obtain their documentation with  
    Expm.doc("myextraplugin")



    --------------------------------------------------------------------------------

    slicot
    ------



    Extra doc: https://github.com/casadi/casadi/wiki/L_22l

    Joris Gillis

    Extra doc: https://github.com/casadi/casadi/wiki/L_21l

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L44

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L44-L47


    """
    return _casadi.expmsol(*args)

def expm_n_in(*args):
    r"""
    expm_n_in() -> casadi_int


    [INTERNAL] 
    Get the number of expm solver inputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_rs

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L49

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L49-L51


    """
    return _casadi.expm_n_in(*args)

def expm_n_out(*args):
    r"""
    expm_n_out() -> casadi_int


    [INTERNAL] 
    Get the number of expm solver outputs.

    Extra doc: https://github.com/casadi/casadi/wiki/L_rt

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L53

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L53-L55


    """
    return _casadi.expm_n_out(*args)

def has_expm(*args):
    r"""
    has_expm(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L32

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L32-L34


    """
    return _casadi.has_expm(*args)

def load_expm(*args):
    r"""
    load_expm(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L36

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L36-L38


    """
    return _casadi.load_expm(*args)

def doc_expm(*args):
    r"""
    doc_expm(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.hpp#L40

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/expm.cpp#L40-L42


    """
    return _casadi.doc_expm(*args)

def interpolant(*args):
    r"""
    interpolant(std::string const & name, std::string const & solver, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & grid, std::vector< double,std::allocator< double > > const & values, casadi::Dict const & opts=casadi::Dict()) -> Function
    interpolant(std::string const & name, std::string const & solver, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & grid, casadi_int m=1, casadi::Dict const & opts=casadi::Dict()) -> Function
    interpolant(std::string const & name, std::string const & solver, std::vector< casadi_int,std::allocator< casadi_int > > const & grid_dims, casadi_int m=1, casadi::Dict const & opts=casadi::Dict()) -> Function
    interpolant(std::string const & name, std::string const & solver, std::vector< casadi_int,std::allocator< casadi_int > > const & grid_dims, std::vector< double,std::allocator< double > > const & values, casadi::Dict const & opts=casadi::Dict()) -> Function


    [INTERNAL] 
    Parametric variant of interpolant.

    The resulting function will have an additional argument for the grid

    By default, derivatives wrt the coefficients are not supported (zero).
     Some
     interpolant plugins may support the  inline=true which enables correct 
    derivatives

    Extra doc: https://github.com/casadi/casadi/wiki/L_1p5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.hpp#L171

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.cpp#L171-L187


    """
    return _casadi.interpolant(*args)

def has_interpolant(*args):
    r"""
    has_interpolant(std::string const & name) -> bool


    [INTERNAL] 
    Check if a particular plugin is available.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.hpp#L34

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.cpp#L34-L36


    """
    return _casadi.has_interpolant(*args)

def load_interpolant(*args):
    r"""
    load_interpolant(std::string const & name)


    [INTERNAL] 
    Explicitly load a plugin dynamically.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.hpp#L38

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.cpp#L38-L40


    """
    return _casadi.load_interpolant(*args)

def doc_interpolant(*args):
    r"""
    doc_interpolant(std::string const & name) -> std::string


    [INTERNAL] 
    Get the documentation string for a plugin.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.hpp#L42

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/interpolant.cpp#L42-L44


    """
    return _casadi.doc_interpolant(*args)
class CodeGenerator(object):
    r"""


    [INTERNAL] 
    Helper class for C code generation.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_ru

    C++ includes: code_generator.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CodeGenerator self, std::string const & name, casadi::Dict const & opts=casadi::Dict()) -> CodeGenerator


        [INTERNAL] 
        Constructor.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.hpp#L46

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.cpp#L35-L180


        """
        _casadi.CodeGenerator_swiginit(self, _casadi.new_CodeGenerator(*args))

    def add(self, *args):
        r"""
        add(CodeGenerator self, Function f, bool with_jac_sparsity=False)


        [INTERNAL] 
        Add a function (name generated)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.hpp#L49

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.cpp#L288-L316


        """
        return _casadi.CodeGenerator_add(self, *args)

    def dump(self, *args):
        r"""
        dump(CodeGenerator self) -> std::string


        [INTERNAL] 
        Generate a file, return code as string.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.hpp#L57

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.cpp#L318-L322


        """
        return _casadi.CodeGenerator_dump(self, *args)

    def generate(self, *args):
        r"""
        generate(CodeGenerator self, std::string const & prefix="") -> std::string


        [INTERNAL] 
        Generate file(s)

        The "prefix" argument will be prepended to the generated files and 
        may be
         a directory or a file prefix. returns the filename

        Extra doc: https://github.com/casadi/casadi/wiki/L_rv

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.hpp#L66

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.cpp#L410-L464


        """
        return _casadi.CodeGenerator_generate(self, *args)

    def add_include(self, *args):
        r"""
        add_include(CodeGenerator self, std::string const & new_include, bool relative_path=False, std::string const & use_ifdef=std::string())


        [INTERNAL] 
        Add an include file optionally using a relative path "..." 
        instead 
        of an absolute path <...>

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.hpp#L69

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/code_generator.cpp#L942-L962


        """
        return _casadi.CodeGenerator_add_include(self, *args)
    __swig_destroy__ = _casadi.delete_CodeGenerator

# Register CodeGenerator in _casadi:
_casadi.CodeGenerator_swigregister(CodeGenerator)
FLAG = _casadi.FLAG


def _horzcat(*args):
    r"""
    _horzcat(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & v) -> Sparsity
    _horzcat(std::vector< casadi::MX,std::allocator< casadi::MX > > const & v) -> MX
    _horzcat(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & v) -> DM
    _horzcat(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & v) -> SX


    Concatenate horizontally, six matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_4e

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L502

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L502-L505


    """
    return _casadi._horzcat(*args)

def _vertcat(*args):
    r"""
    _vertcat(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & v) -> Sparsity
    _vertcat(std::vector< casadi::MX,std::allocator< casadi::MX > > const & v) -> MX
    _vertcat(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & v) -> DM
    _vertcat(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & v) -> SX


    Concatenate vertically, six matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_4j

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L540

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L540-L543


    """
    return _casadi._vertcat(*args)

def horzsplit(*args):
    r"""
    horzsplit(Sparsity v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    horzsplit(Sparsity v, casadi_int incr=1) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    horzsplit(MX v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    horzsplit(MX v, casadi_int incr=1) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    horzsplit(DM v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    horzsplit(DM v, casadi_int incr=1) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    horzsplit(SX v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    horzsplit(SX v, casadi_int incr=1) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    split horizontally, retaining fixed-sized groups of columns

    Parameters:
    -----------

    incr: 
    Size (width) of each group of columns

    horzcat(horzsplit(x, ...)) = x

    \\seealso horzsplit_n

    Extra doc: https://github.com/casadi/casadi/wiki/L_3h

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L134

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L134-L136


    """
    return _casadi.horzsplit(*args)

def horzsplit_n(*args):
    r"""
    horzsplit_n(Sparsity v, casadi_int n) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    horzsplit_n(MX v, casadi_int n) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    horzsplit_n(DM v, casadi_int n) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    horzsplit_n(SX v, casadi_int n) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    split horizontally, retaining fixed-sized groups of columns

    Parameters:
    -----------

    n: 
    Number of groups of columns

    Will error when the number of columns is not a multiple of n

    horzcat(horzsplit(x, ...)) = x

    \\seealso horzsplit

    Extra doc: https://github.com/casadi/casadi/wiki/L_277

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L149

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L149-L151


    """
    return _casadi.horzsplit_n(*args)

def offset(*args):
    r"""
    offset(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & v, bool vert=True) -> std::vector< casadi_int,std::allocator< casadi_int > >
    offset(std::vector< casadi::MX,std::allocator< casadi::MX > > const & v, bool vert=True) -> std::vector< casadi_int,std::allocator< casadi_int > >
    offset(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & v, bool vert=True) -> std::vector< casadi_int,std::allocator< casadi_int > >
    offset(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & v, bool vert=True) -> std::vector< casadi_int,std::allocator< casadi_int > >


    Helper function, get offsets corresponding to a vector of matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_3j

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L169

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L169-L171


    """
    return _casadi.offset(*args)

def vertsplit(*args):
    r"""
    vertsplit(Sparsity v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    vertsplit(Sparsity v, casadi_int incr=1) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    vertsplit(MX v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    vertsplit(MX v, casadi_int incr=1) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    vertsplit(DM v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    vertsplit(DM v, casadi_int incr=1) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    vertsplit(SX v, std::vector< casadi_int,std::allocator< casadi_int > > const & offset) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    vertsplit(SX v, casadi_int incr=1) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    split vertically, retaining fixed-sized groups of rows

    Parameters:
    -----------

    incr: 
    Size of each group of rows

    vertcat(vertsplit(x, ...)) = x



    ::

      >>> print vertsplit(SX.sym("a",4))
      [SX(a_0), SX(a_1), SX(a_2), SX(a_3)]






    ::

      >>> print vertsplit(SX.sym("a",4),2)
      [SX([a_0, a_1]), SX([a_2, a_3])]




    If the number of rows is not a multiple of  incr, the last entry returned 
    will have a size smaller than  incr.



    ::

      >>> print vertsplit(DM([0,1,2,3,4]),2)
      [DM([0, 1]), DM([2, 3]), DM(4)]




    \\seealso vertsplit_n

    Extra doc: https://github.com/casadi/casadi/wiki/L_3k

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L204

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L204-L206


    """
    return _casadi.vertsplit(*args)

def vertsplit_n(*args):
    r"""
    vertsplit_n(Sparsity v, casadi_int n) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    vertsplit_n(MX v, casadi_int n) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    vertsplit_n(DM v, casadi_int n) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    vertsplit_n(SX v, casadi_int n) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    split vertically, retaining fixed-sized groups of rows

    Parameters:
    -----------

    n: 
    Number of groups of rows

    Will error when the number of rows is not a multiple of n

    vertcat(vertsplit(x, ...)) = x

    \\seealso vertsplit

    Extra doc: https://github.com/casadi/casadi/wiki/L_278

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L219

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L219-L221


    """
    return _casadi.vertsplit_n(*args)

def blocksplit(*args):
    r"""
    blocksplit(Sparsity x, std::vector< casadi_int,std::allocator< casadi_int > > const & vert_offset, std::vector< casadi_int,std::allocator< casadi_int > > const & horz_offset) -> std::vector< std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >,std::allocator< std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > > >
    blocksplit(Sparsity x, casadi_int vert_incr=1, casadi_int horz_incr=1) -> std::vector< std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >,std::allocator< std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > > >
    blocksplit(MX x, std::vector< casadi_int,std::allocator< casadi_int > > const & vert_offset, std::vector< casadi_int,std::allocator< casadi_int > > const & horz_offset) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >
    blocksplit(MX x, casadi_int vert_incr=1, casadi_int horz_incr=1) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >
    blocksplit(DM x, std::vector< casadi_int,std::allocator< casadi_int > > const & vert_offset, std::vector< casadi_int,std::allocator< casadi_int > > const & horz_offset) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >
    blocksplit(DM x, casadi_int vert_incr=1, casadi_int horz_incr=1) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >
    blocksplit(SX x, std::vector< casadi_int,std::allocator< casadi_int > > const & vert_offset, std::vector< casadi_int,std::allocator< casadi_int > > const & horz_offset) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >
    blocksplit(SX x, casadi_int vert_incr=1, casadi_int horz_incr=1) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >


    chop up into blocks

    Parameters:
    -----------

    vert_incr: 
    Defines the increment for block boundaries in row dimension

    horz_incr: 
    Defines the increment for block boundaries in column dimension

    blockcat(blocksplit(x,..., ...)) = x

    Extra doc: https://github.com/casadi/casadi/wiki/L_3o

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L262

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L262-L264


    """
    return _casadi.blocksplit(*args)

def _diagcat(*args):
    r"""
    _diagcat(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & A) -> Sparsity
    _diagcat(std::vector< casadi::MX,std::allocator< casadi::MX > > const & A) -> MX
    _diagcat(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & A) -> DM
    _diagcat(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & A) -> SX


    Concatenate along diagonal, six matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_4o

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L578

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L578-L581


    """
    return _casadi._diagcat(*args)

def diagsplit(*args):
    r"""
    diagsplit(Sparsity x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset1, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset2) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    diagsplit(Sparsity x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    diagsplit(Sparsity x, casadi_int incr=1) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    diagsplit(Sparsity x, casadi_int incr1, casadi_int incr2) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >
    diagsplit(MX x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset1, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset2) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    diagsplit(MX x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    diagsplit(MX x, casadi_int incr=1) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    diagsplit(MX x, casadi_int incr1, casadi_int incr2) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    diagsplit(DM x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset1, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset2) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    diagsplit(DM x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    diagsplit(DM x, casadi_int incr=1) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    diagsplit(DM x, casadi_int incr1, casadi_int incr2) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    diagsplit(SX x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset1, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset2) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    diagsplit(SX x, std::vector< casadi_int,std::allocator< casadi_int > > const & output_offset) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    diagsplit(SX x, casadi_int incr=1) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    diagsplit(SX x, casadi_int incr1, casadi_int incr2) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    split diagonally, retaining fixed-sized matrices

    Parameters:
    -----------

    incr1: 
    Row dimension of each matrix

    incr2: 
    Column dimension of each matrix

    diagsplit(diagsplit(x, ...)) = x

    Extra doc: https://github.com/casadi/casadi/wiki/L_3t

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L324

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L324-L326


    """
    return _casadi.diagsplit(*args)

def _veccat(*args):
    r"""
    _veccat(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & x) -> Sparsity
    _veccat(std::vector< casadi::MX,std::allocator< casadi::MX > > const & x) -> MX
    _veccat(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & x) -> DM
    _veccat(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & x) -> SX


    concatenate vertically while vectorizing all arguments with vec

    Extra doc: https://github.com/casadi/casadi/wiki/L_3u

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L331

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L331-L333


    """
    return _casadi._veccat(*args)

def mtimes(*args):
    r"""
    mtimes(Sparsity x, Sparsity y) -> Sparsity
    mtimes(std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & args) -> Sparsity
    mtimes(MX x, MX y) -> MX
    mtimes(std::vector< casadi::MX,std::allocator< casadi::MX > > const & args) -> MX
    mtimes(DM x, DM y) -> DM
    mtimes(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & args) -> DM
    mtimes(SX x, SX y) -> SX
    mtimes(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & args) -> SX


    Matrix product of n matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_3w

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L345

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L345-L347


    """
    return _casadi.mtimes(*args)

def mac(*args):
    r"""
    mac(Sparsity X, Sparsity Y, Sparsity Z) -> Sparsity
    mac(MX X, MX Y, MX Z) -> MX
    mac(DM X, DM Y, DM Z) -> DM
    mac(SX X, SX Y, SX Z) -> SX


    Multiply-accumulate operation.

    Matrix product of two matrices (x and y), adding the result to a third 

    matrix z. The result has the same sparsity pattern as C meaning that 
    other 
    entries of (x*y) are ignored. The operation is equivalent to: 

    z+mtimes(x,y).project(z.sparsity()).

    Extra doc: https://github.com/casadi/casadi/wiki/L_3x

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L358

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L358-L360


    """
    return _casadi.mac(*args)

def transpose(*args):
    r"""
    transpose(Sparsity X) -> Sparsity
    transpose(MX X) -> MX
    transpose(DM X) -> DM
    transpose(SX X) -> SX


    Transpose.

    Extra doc: https://github.com/casadi/casadi/wiki/L_3y

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L365

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L365-L367


    """
    return _casadi.transpose(*args)

def vec(*args):
    r"""
    vec(Sparsity a) -> Sparsity
    vec(MX a) -> MX
    vec(DM a) -> DM
    vec(SX a) -> SX


    make a vector

    Reshapes/vectorizes the matrix such that the shape becomes 
    (expr.numel(), 
    1). Columns are stacked on top of each other. Same as 
    reshape(expr, 
    expr.numel(), 1)

    a c 
    b d 
     turns into

    a 
    b 
    c 
    d 
     Extra doc: https://github.com/casadi/casadi/wiki/L_3z

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L386

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L386-L388


    """
    return _casadi.vec(*args)

def reshape(*args):
    r"""
    reshape(Sparsity a, casadi_int nrow, casadi_int ncol) -> Sparsity
    reshape(Sparsity a, std::pair< casadi_int,casadi_int > rc) -> Sparsity
    reshape(Sparsity a, Sparsity sp) -> Sparsity
    reshape(MX a, casadi_int nrow, casadi_int ncol) -> MX
    reshape(MX a, std::pair< casadi_int,casadi_int > rc) -> MX
    reshape(MX a, Sparsity sp) -> MX
    reshape(DM a, casadi_int nrow, casadi_int ncol) -> DM
    reshape(DM a, std::pair< casadi_int,casadi_int > rc) -> DM
    reshape(DM a, Sparsity sp) -> DM
    reshape(SX a, casadi_int nrow, casadi_int ncol) -> SX
    reshape(SX a, std::pair< casadi_int,casadi_int > rc) -> SX
    reshape(SX a, Sparsity sp) -> SX


    Reshape the matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_42

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L407

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L407-L409


    """
    return _casadi.reshape(*args)

def sparsity_cast(*args):
    r"""
    sparsity_cast(Sparsity a, Sparsity sp) -> Sparsity
    sparsity_cast(MX a, Sparsity sp) -> MX
    sparsity_cast(DM a, Sparsity sp) -> DM
    sparsity_cast(SX a, Sparsity sp) -> SX


    Cast matrix nonzeros to different Sparsity.

    Extra doc: https://github.com/casadi/casadi/wiki/L_24z

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L414

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L414-L416


    """
    return _casadi.sparsity_cast(*args)

def sprank(*args):
    r"""
    sprank(Sparsity A) -> casadi_int
    sprank(MX A) -> casadi_int
    sprank(DM A) -> casadi_int
    sprank(SX A) -> casadi_int
    """
    return _casadi.sprank(*args)

def norm_0_mul(*args):
    r"""
    norm_0_mul(Sparsity x, Sparsity y) -> casadi_int
    norm_0_mul(MX x, MX y) -> casadi_int
    norm_0_mul(DM x, DM y) -> casadi_int
    norm_0_mul(SX x, SX y) -> casadi_int
    """
    return _casadi.norm_0_mul(*args)

def triu(*args):
    r"""
    triu(Sparsity a, bool includeDiagonal=True) -> Sparsity
    triu(MX a, bool includeDiagonal=True) -> MX
    triu(DM a, bool includeDiagonal=True) -> DM
    triu(SX a, bool includeDiagonal=True) -> SX


    Get the upper triangular part of a matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_45

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L435

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L435-L437


    """
    return _casadi.triu(*args)

def tril(*args):
    r"""
    tril(Sparsity a, bool includeDiagonal=True) -> Sparsity
    tril(MX a, bool includeDiagonal=True) -> MX
    tril(DM a, bool includeDiagonal=True) -> DM
    tril(SX a, bool includeDiagonal=True) -> SX


    Get the lower triangular part of a matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_46

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L442

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L442-L444


    """
    return _casadi.tril(*args)

def kron(*args):
    r"""
    kron(Sparsity a, Sparsity b) -> Sparsity
    kron(MX a, MX b) -> MX
    kron(DM a, DM b) -> DM
    kron(SX a, SX b) -> SX


    Kronecker tensor product.

    Creates a block matrix in which each element (i, j) is a_ij*b

    Extra doc: https://github.com/casadi/casadi/wiki/L_47

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L451

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L451-L453


    """
    return _casadi.kron(*args)

def repmat(*args):
    r"""
    repmat(Sparsity A, casadi_int n, casadi_int m=1) -> Sparsity
    repmat(Sparsity A, std::pair< casadi_int,casadi_int > const & rc) -> Sparsity
    repmat(MX A, casadi_int n, casadi_int m=1) -> MX
    repmat(MX A, std::pair< casadi_int,casadi_int > const & rc) -> MX
    repmat(DM A, casadi_int n, casadi_int m=1) -> DM
    repmat(DM A, std::pair< casadi_int,casadi_int > const & rc) -> DM
    repmat(SX A, casadi_int n, casadi_int m=1) -> SX
    repmat(SX A, std::pair< casadi_int,casadi_int > const & rc) -> SX


    Repeat matrix A n times vertically and m times horizontally.

    Extra doc: https://github.com/casadi/casadi/wiki/L_49

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L465

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L465-L467


    """
    return _casadi.repmat(*args)

def sum2(*args):
    r"""
    sum2(Sparsity x) -> Sparsity
    sum2(MX x) -> MX
    sum2(DM x) -> DM
    sum2(SX x) -> SX


    Return a column-wise summation of elements.

    Extra doc: https://github.com/casadi/casadi/wiki/L_4q

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L591

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L591-L591


    """
    return _casadi.sum2(*args)

def sum1(*args):
    r"""
    sum1(Sparsity x) -> Sparsity
    sum1(MX x) -> MX
    sum1(DM x) -> DM
    sum1(SX x) -> SX


    Return a row-wise summation of elements.

    Extra doc: https://github.com/casadi/casadi/wiki/L_4p

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L586

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L586-L586


    """
    return _casadi.sum1(*args)

def plus(*args):
    r"""
    plus(MX x, MX y) -> MX
    plus(DM x, DM y) -> DM
    plus(SX x, SX y) -> SX
    plus(double const & x, double const & y) -> double
    """
    return _casadi.plus(*args)

def minus(*args):
    r"""
    minus(MX x, MX y) -> MX
    minus(DM x, DM y) -> DM
    minus(SX x, SX y) -> SX
    minus(double const & x, double const & y) -> double


    Subtraction: (x,y) -> x - y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_oo

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L83

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L83-L85


    """
    return _casadi.minus(*args)

def times(*args):
    r"""
    times(MX x, MX y) -> MX
    times(DM x, DM y) -> DM
    times(SX x, SX y) -> SX
    times(double const & x, double const & y) -> double


    Elementwise multiplication: (x,y) -> x .* y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_op

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L99

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L99-L101


    """
    return _casadi.times(*args)

def rdivide(*args):
    r"""
    rdivide(MX x, MX y) -> MX
    rdivide(DM x, DM y) -> DM
    rdivide(SX x, SX y) -> SX
    rdivide(double const & x, double const & y) -> double


    Elementwise division: (x,y) -> x ./ y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_oq

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L115

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L115-L117


    """
    return _casadi.rdivide(*args)

def ldivide(*args):
    r"""
    ldivide(MX x, MX y) -> MX
    ldivide(DM x, DM y) -> DM
    ldivide(SX x, SX y) -> SX
    ldivide(double const & x, double const & y) -> double
    """
    return _casadi.ldivide(*args)

def lt(*args):
    r"""
    lt(MX x, MX y) -> MX
    lt(DM x, DM y) -> DM
    lt(SX x, SX y) -> SX
    lt(double const & x, double const & y) -> double


    Logical less than: (x,y) -> x < y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_or

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L131

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L131-L133


    """
    return _casadi.lt(*args)

def le(*args):
    r"""
    le(MX x, MX y) -> MX
    le(DM x, DM y) -> DM
    le(SX x, SX y) -> SX
    le(double const & x, double const & y) -> double


    Logical less or equal to: (x,y) -> x <= y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_os

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L146

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L146-L148


    """
    return _casadi.le(*args)

def gt(*args):
    r"""
    gt(MX x, MX y) -> MX
    gt(DM x, DM y) -> DM
    gt(SX x, SX y) -> SX
    gt(double const & x, double const & y) -> double


    Logical greater than: (x,y) -> x > y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_ot

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L161

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L161-L163


    """
    return _casadi.gt(*args)

def ge(*args):
    r"""
    ge(MX x, MX y) -> MX
    ge(DM x, DM y) -> DM
    ge(SX x, SX y) -> SX
    ge(double const & x, double const & y) -> double


    Logical greater or equal to: (x,y) -> x <= y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_ou

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L176

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L176-L178


    """
    return _casadi.ge(*args)

def eq(*args):
    r"""
    eq(MX x, MX y) -> MX
    eq(DM x, DM y) -> DM
    eq(SX x, SX y) -> SX
    eq(double const & x, double const & y) -> double


    Logical equal to: (x,y) -> x == y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_ov

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L191

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L191-L193


    """
    return _casadi.eq(*args)

def ne(*args):
    r"""
    ne(MX x, MX y) -> MX
    ne(DM x, DM y) -> DM
    ne(SX x, SX y) -> SX
    ne(double const & x, double const & y) -> double


    Logical not equal to: (x,y) -> x != y.

    Extra doc: https://github.com/casadi/casadi/wiki/L_ow

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L206

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L206-L208


    """
    return _casadi.ne(*args)

def logic_and(*args):
    r"""
    logic_and(MX x, MX y) -> MX
    logic_and(DM x, DM y) -> DM
    logic_and(SX x, SX y) -> SX
    logic_and(double const & x, double const & y) -> double
    """
    return _casadi.logic_and(*args)

def logic_or(*args):
    r"""
    logic_or(MX x, MX y) -> MX
    logic_or(DM x, DM y) -> DM
    logic_or(SX x, SX y) -> SX
    logic_or(double const & x, double const & y) -> double
    """
    return _casadi.logic_or(*args)

def logic_not(*args):
    r"""
    logic_not(MX x) -> MX
    logic_not(DM x) -> DM
    logic_not(SX x) -> SX
    logic_not(double const & x) -> double
    """
    return _casadi.logic_not(*args)

def fabs(*args):
    r"""
    fabs(MX x) -> MX
    fabs(DM x) -> DM
    fabs(SX x) -> SX
    fabs(double const & x) -> double


    Absolute value: x -> abs(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p0

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L275

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L275-L277


    """
    return _casadi.fabs(*args)

def sqrt(*args):
    r"""
    sqrt(MX x) -> MX
    sqrt(DM x) -> DM
    sqrt(SX x) -> SX
    sqrt(double const & x) -> double


    Square root: x -> sqrt(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p1

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L290

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L290-L292


    """
    return _casadi.sqrt(*args)

def sin(*args):
    r"""
    sin(MX x) -> MX
    sin(DM x) -> DM
    sin(SX x) -> SX
    sin(double const & x) -> double


    Sine: x -> sin(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p3

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L314

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L314-L316


    """
    return _casadi.sin(*args)

def cos(*args):
    r"""
    cos(MX x) -> MX
    cos(DM x) -> DM
    cos(SX x) -> SX
    cos(double const & x) -> double


    Cosine: x -> cos(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p4

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L326

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L326-L328


    """
    return _casadi.cos(*args)

def tan(*args):
    r"""
    tan(MX x) -> MX
    tan(DM x) -> DM
    tan(SX x) -> SX
    tan(double const & x) -> double


    Tangent: x -> tan(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L338

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L338-L340


    """
    return _casadi.tan(*args)

def atan(*args):
    r"""
    atan(MX x) -> MX
    atan(DM x) -> DM
    atan(SX x) -> SX
    atan(double const & x) -> double


    Arc tangent: x -> atan(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p6

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L350

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L350-L352


    """
    return _casadi.atan(*args)

def asin(*args):
    r"""
    asin(MX x) -> MX
    asin(DM x) -> DM
    asin(SX x) -> SX
    asin(double const & x) -> double


    Arc sine: x -> asin(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p7

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L362

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L362-L364


    """
    return _casadi.asin(*args)

def acos(*args):
    r"""
    acos(MX x) -> MX
    acos(DM x) -> DM
    acos(SX x) -> SX
    acos(double const & x) -> double


    Arc cosine: x -> acos(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p8

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L374

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L374-L376


    """
    return _casadi.acos(*args)

def tanh(*args):
    r"""
    tanh(MX x) -> MX
    tanh(DM x) -> DM
    tanh(SX x) -> SX
    tanh(double const & x) -> double


    Hyperbolic tangent: x -> tanh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_p9

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L386

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L386-L388


    """
    return _casadi.tanh(*args)

def sinh(*args):
    r"""
    sinh(MX x) -> MX
    sinh(DM x) -> DM
    sinh(SX x) -> SX
    sinh(double const & x) -> double


    Hyperbolic sin: x -> sinh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pa

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L398

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L398-L400


    """
    return _casadi.sinh(*args)

def cosh(*args):
    r"""
    cosh(MX x) -> MX
    cosh(DM x) -> DM
    cosh(SX x) -> SX
    cosh(double const & x) -> double


    Hyperbolic cosine: x -> cosh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pb

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L410

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L410-L412


    """
    return _casadi.cosh(*args)

def atanh(*args):
    r"""
    atanh(MX x) -> MX
    atanh(DM x) -> DM
    atanh(SX x) -> SX
    atanh(double const & x) -> double


    Inverse hyperbolic tangent: x -> atanh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pc

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L422

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L422-L424


    """
    return _casadi.atanh(*args)

def asinh(*args):
    r"""
    asinh(MX x) -> MX
    asinh(DM x) -> DM
    asinh(SX x) -> SX
    asinh(double const & x) -> double


    Inverse hyperbolic sin: x -> asinh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pd

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L434

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L434-L436


    """
    return _casadi.asinh(*args)

def acosh(*args):
    r"""
    acosh(MX x) -> MX
    acosh(DM x) -> DM
    acosh(SX x) -> SX
    acosh(double const & x) -> double


    Inverse hyperbolic cosine: x -> acosh(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pe

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L446

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L446-L448


    """
    return _casadi.acosh(*args)

def exp(*args):
    r"""
    exp(MX x) -> MX
    exp(DM x) -> DM
    exp(SX x) -> SX
    exp(double const & x) -> double


    Elementwise exponential: x -> exp(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pf

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L458

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L458-L460


    """
    return _casadi.exp(*args)

def log(*args):
    r"""
    log(MX x) -> MX
    log(DM x) -> DM
    log(SX x) -> SX
    log(double const & x) -> double


    Natural logarithm: x -> log(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pg

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L470

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L470-L472


    """
    return _casadi.log(*args)

def log10(*args):
    r"""
    log10(MX x) -> MX
    log10(DM x) -> DM
    log10(SX x) -> SX
    log10(double const & x) -> double


    Base-10 logarithm: x -> log10(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_ph

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L482

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L482-L484


    """
    return _casadi.log10(*args)

def log1p(*args):
    r"""
    log1p(MX x) -> MX
    log1p(DM x) -> DM
    log1p(SX x) -> SX
    log1p(double const & x) -> double


    Precision variant for natural logarithm: x -> log(x+1)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pi

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L494

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L494-L496


    """
    return _casadi.log1p(*args)

def expm1(*args):
    r"""
    expm1(MX x) -> MX
    expm1(DM x) -> DM
    expm1(SX x) -> SX
    expm1(double const & x) -> double


    Precision variant for elementwise exponential: x -> exp(x)-1.

    Extra doc: https://github.com/casadi/casadi/wiki/L_pj

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L506

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L506-L508


    """
    return _casadi.expm1(*args)

def floor(*args):
    r"""
    floor(MX x) -> MX
    floor(DM x) -> DM
    floor(SX x) -> SX
    floor(double const & x) -> double


    Round down to nearest integer: x -> floor(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pk

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L518

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L518-L520


    """
    return _casadi.floor(*args)

def ceil(*args):
    r"""
    ceil(MX x) -> MX
    ceil(DM x) -> DM
    ceil(SX x) -> SX
    ceil(double const & x) -> double


    Round up to nearest integer: x -> ceil(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pl

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L530

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L530-L532


    """
    return _casadi.ceil(*args)

def erf(*args):
    r"""
    erf(MX x) -> MX
    erf(DM x) -> DM
    erf(SX x) -> SX
    erf(double const & x) -> double


    Error function: x -> erf(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pm

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L542

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L542-L544


    """
    return _casadi.erf(*args)

def erfinv(*args):
    r"""
    erfinv(MX x) -> MX
    erfinv(DM x) -> DM
    erfinv(SX x) -> SX
    erfinv(double const & x) -> double


    Inverse error function: x -> erfinv(x)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pn

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L554

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L554-L556


    """
    return _casadi.erfinv(*args)

def sign(*args):
    r"""
    sign(MX x) -> MX
    sign(DM x) -> DM
    sign(SX x) -> SX
    sign(double const & x) -> double


    Sign function:

    sign(x) := -1 for x<0 sign(x) := 1 for x>0, sign(0) := 0 sign(NaN) := 
    NaN

    Extra doc: https://github.com/casadi/casadi/wiki/L_po

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L571

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L571-L573


    """
    return _casadi.sign(*args)

def power(*args):
    r"""
    power(MX x, MX n) -> MX
    power(DM x, DM n) -> DM
    power(SX x, SX n) -> SX
    power(double const & x, double const & n) -> double
    """
    return _casadi.power(*args)

def fmod(*args):
    r"""
    fmod(MX x, MX y) -> MX
    fmod(DM x, DM y) -> DM
    fmod(SX x, SX y) -> SX
    fmod(double const & x, double const & y) -> double


    Remainder after division: (x,y) -> fmod(x,y)

    This  Function follows the convention of 
    https://en.cppreference.com/w/c/numeric/math/fmod

    Notably:
    fmod(5,3) -> 2

    fmod(5,-3) -> 2

    fmod(-5,3) -> -2

    fmod(-5,-3) -> -2

    This is equivalent to Python's numpy.fmod and Matlab's rem.

    \\seealso remainder

    ::

      Extra doc: https://github.com/casadi/casadi/wiki/L_pq 




    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L613

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L613-L615


    """
    return _casadi.fmod(*args)

def remainder(*args):
    r"""
    remainder(MX x, MX y) -> MX
    remainder(DM x, DM y) -> DM
    remainder(SX x, SX y) -> SX
    remainder(double const & x, double const & y) -> double


    Remainder after division: (x,y) -> remainder(x,y)

    This Function follows the convention of 
    https://en.cppreference.com/w/c/numeric/math/remainder

    Notably:
    remainder(5,3) -> -1

    remainder(5,-3) -> -1

    remainder(-5,3) -> 1

    remainder(-5,-3) -> 1

    This is equivalent to Python's math.remainder. There is no equivalence
     in 
    Matlab.

    \\seealso fmod

    ::

      Extra doc: https://github.com/casadi/casadi/wiki/L_24x 




    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L634

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L634-L636


    """
    return _casadi.remainder(*args)

def atan2(*args):
    r"""
    atan2(MX x, MX y) -> MX
    atan2(DM x, DM y) -> DM
    atan2(SX x, SX y) -> SX
    atan2(double const & x, double const & y) -> double


    Two argument arc tangent: (y,x) -> atan2(y,x)

    theta = atan2(y,x) corresponds to x = r cos(theta), y = r sin(theta)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pr

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L648

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L648-L650


    """
    return _casadi.atan2(*args)

def fmin(*args):
    r"""
    fmin(MX x, MX y) -> MX
    fmin(DM x, DM y) -> DM
    fmin(SX x, SX y) -> SX
    fmin(double const & x, double const & y) -> double


    Smallest of two values: (x,y) -> min(x,y)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pt

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L672

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L672-L674


    """
    return _casadi.fmin(*args)

def fmax(*args):
    r"""
    fmax(MX x, MX y) -> MX
    fmax(DM x, DM y) -> DM
    fmax(SX x, SX y) -> SX
    fmax(double const & x, double const & y) -> double


    Largest of two values: (x,y) -> max(x,y)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pu

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L684

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L684-L686


    """
    return _casadi.fmax(*args)

def hypot(*args):
    r"""
    hypot(MX x, MX y) -> MX
    hypot(DM x, DM y) -> DM
    hypot(SX x, SX y) -> SX
    hypot(double const & x, double const & y) -> double


    Precision variant for 2 norm: (x,y) -> sqrt(x^2+y^2)

    Extra doc: https://github.com/casadi/casadi/wiki/L_pw

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L742

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L742-L744


    """
    return _casadi.hypot(*args)

def simplify(*args):
    r"""
    simplify(MX x) -> MX
    simplify(DM x) -> DM
    simplify(SX x) -> SX
    simplify(double const & x) -> double


    Simplify an expression.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L944

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L944-L946


    """
    return _casadi.simplify(*args)

def is_equal(*args):
    r"""
    is_equal(MX x, MX y, casadi_int depth=0) -> bool
    is_equal(DM x, DM y, casadi_int depth=0) -> bool
    is_equal(SX x, SX y, casadi_int depth=0) -> bool
    is_equal(double const & x, double const & y, casadi_int depth=0) -> bool


    Check if two nodes are equivalent up to a given depth.

    Depth=0 checks if the expressions are identical, i.e. points to the 
    same 
    node.

    a = x*x b = x*x

    is_equal(a,b,0) will return false, but a.is_equal(a,b,1) will return 
    true

    Extra doc: https://github.com/casadi/casadi/wiki/L_pv

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L703

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L703-L705


    """
    return _casadi.is_equal(*args)

def copysign(*args):
    r"""
    copysign(MX x, MX y) -> MX
    copysign(DM x, DM y) -> DM
    copysign(SX x, SX y) -> SX
    copysign(double const & x, double const & y) -> double


    Copy sign

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L710

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L710-L712


    """
    return _casadi.copysign(*args)

def constpow(*args):
    r"""
    constpow(MX x, MX y) -> MX
    constpow(DM x, DM y) -> DM
    constpow(SX x, SX y) -> SX
    constpow(double const & x, double const & y) -> double


    Elementwise power with const power

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L720

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_expression.hpp#L720-L722


    """
    return _casadi.constpow(*args)

def mpower(*args):
    r"""
    mpower(MX x, MX n) -> MX
    mpower(DM x, DM n) -> DM
    mpower(SX x, SX n) -> SX


    Matrix power x^n.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bi

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L319

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L319-L321


    """
    return _casadi.mpower(*args)

def mrdivide(*args):
    r"""
    mrdivide(MX x, MX y) -> MX
    mrdivide(DM x, DM y) -> DM
    mrdivide(SX x, SX y) -> SX


    Matrix divide (cf. slash '/' in MATLAB)

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bl

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L376

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L376-L378


    """
    return _casadi.mrdivide(*args)

def mldivide(*args):
    r"""
    mldivide(MX x, MX y) -> MX
    mldivide(DM x, DM y) -> DM
    mldivide(SX x, SX y) -> SX


    Matrix divide (cf. backslash '\\' in MATLAB)

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bm

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L383

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L383-L385


    """
    return _casadi.mldivide(*args)

def symvar(*args):
    r"""
    symvar(MX x) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    symvar(DM x) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    symvar(SX x) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    Get symbols present in expression.

    Returned vector is ordered according to the order of  variable()/parameter()
     calls used to create the variables

    Extra doc: https://github.com/casadi/casadi/wiki/L_1u

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L525

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L432-L438


    """
    return _casadi.symvar(*args)

def bilin(*args):
    r"""
    bilin(MX A, MX x, MX y) -> MX
    bilin(MX A, MX x) -> MX
    bilin(DM A, DM x, DM y) -> DM
    bilin(DM A, DM x) -> DM
    bilin(SX A, SX x, SX y) -> SX
    bilin(SX A, SX x) -> SX


    Calculate bilinear/quadratic form x^T A y.

    Parameters:
    -----------

    y: 
    can be omitted, in which case x^T A x is calculated

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bo

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L409


    """
    return _casadi.bilin(*args)

def rank1(*args):
    r"""
    rank1(MX A, MX alpha, MX x, MX y) -> MX
    rank1(DM A, DM alpha, DM x, DM y) -> DM
    rank1(SX A, SX alpha, SX x, SX y) -> SX


    Make a rank-1 update to a matrix A.

    Calculates A + 1/2 * alpha * x*y'

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bp

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L422


    """
    return _casadi.rank1(*args)

def sumsqr(*args):
    r"""
    sumsqr(MX X) -> MX
    sumsqr(DM X) -> DM
    sumsqr(SX X) -> SX


    Calculate sum of squares: sum_ij X_ij^2.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bq

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L429

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L429-L431


    """
    return _casadi.sumsqr(*args)

def linspace(*args):
    r"""
    linspace(MX a, MX b, casadi_int nsteps) -> MX
    linspace(DM a, DM b, casadi_int nsteps) -> DM
    linspace(SX a, SX b, casadi_int nsteps) -> SX


    Matlab's linspace.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L784

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L784-L795


    """
    return _casadi.linspace(*args)

def logsumexp(*args):
    r"""
    logsumexp(MX a) -> MX
    logsumexp(MX a, MX margin) -> MX
    logsumexp(DM a) -> DM
    logsumexp(DM a, DM margin) -> DM
    logsumexp(SX a) -> SX
    logsumexp(SX a, SX margin) -> SX


    Scaled version of logsumexp.

    Scaled such that max(x) <= logsumexp(x, margin) <= max(x)+margin

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bs

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L451

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L451-L454


    """
    return _casadi.logsumexp(*args)

def interp1d(*args):
    r"""
    interp1d(std::vector< double,std::allocator< double > > const & x, MX v, std::vector< double,std::allocator< double > > const & xq, std::string const & mode="linear", bool equidistant=False) -> MX
    interp1d(std::vector< double,std::allocator< double > > const & x, DM v, std::vector< double,std::allocator< double > > const & xq, std::string const & mode="linear", bool equidistant=False) -> DM
    interp1d(std::vector< double,std::allocator< double > > const & x, SX v, std::vector< double,std::allocator< double > > const & xq, std::string const & mode="linear", bool equidistant=False) -> SX


    Performs 1d linear interpolation.

    The data-points to be interpolated are given as (x[i], v[i]). xq[j] is
     used
     as interplating value

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bh

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L311

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L311-L314


    """
    return _casadi.interp1d(*args)

def soc(*args):
    r"""
    soc(MX x, MX y) -> MX
    soc(DM x, DM y) -> DM
    soc(SX x, SX y) -> SX


    Construct second-order-convex.

    Parameters:
    -----------

    x: 
    vector expression of size n

    y: 
    scalar expression

    soc(x,y) computes [y*eye(n) x; x' y]

    soc(x,y) positive semi definite <=> || x ||_2 <= y

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bj

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L334

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L334-L336


    """
    return _casadi.soc(*args)

def cross(*args):
    r"""
    cross(MX a, MX b, casadi_int dim=-1) -> MX
    cross(DM a, DM b, casadi_int dim=-1) -> DM
    cross(SX a, SX b, casadi_int dim=-1) -> SX


    Matlab's  cross command.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bu

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L467

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L467-L469


    """
    return _casadi.cross(*args)

def skew(*args):
    r"""
    skew(MX a) -> MX
    skew(DM a) -> DM
    skew(SX a) -> SX


    Generate a skew symmetric matrix from a 3-vector.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bv

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L474

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L474-L476


    """
    return _casadi.skew(*args)

def inv_skew(*args):
    r"""
    inv_skew(MX a) -> MX
    inv_skew(DM a) -> DM
    inv_skew(SX a) -> SX


    Generate the 3-vector progenitor of a skew symmetric matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bw

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L481

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L481-L483


    """
    return _casadi.inv_skew(*args)

def det(*args):
    r"""
    det(MX A) -> MX
    det(DM A) -> DM
    det(SX A) -> SX


    Matrix determinant (experimental)

    Extra doc: https://github.com/casadi/casadi/wiki/L_1bx

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L488

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L488-L488


    """
    return _casadi.det(*args)

def inv_minor(*args):
    r"""
    inv_minor(MX A) -> MX
    inv_minor(DM A) -> DM
    inv_minor(SX A) -> SX


    Matrix inverse (experimental)

    Extra doc: https://github.com/casadi/casadi/wiki/L_1by

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L493

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L493-L493


    """
    return _casadi.inv_minor(*args)

def inv(*args):
    r"""
    inv(MX A) -> MX
    inv(MX A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> MX
    inv(DM A) -> DM
    inv(DM A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> DM
    inv(SX A) -> SX
    inv(SX A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> SX


    Element-wise inverse.

    Extra doc: https://github.com/casadi/casadi/wiki/L_10y

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sx_elem.hpp#L222

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sx_elem.cpp#L159-L165


    """
    return _casadi.inv(*args)

def trace(*args):
    r"""
    trace(MX a) -> MX
    trace(DM a) -> DM
    trace(SX a) -> SX


    Matrix trace.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c1

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L514

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L514-L514


    """
    return _casadi.trace(*args)

def tril2symm(*args):
    r"""
    tril2symm(MX a) -> MX
    tril2symm(DM a) -> DM
    tril2symm(SX a) -> SX


    Convert a lower triangular matrix to a symmetric one.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c2

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L519

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L519-L519


    """
    return _casadi.tril2symm(*args)

def triu2symm(*args):
    r"""
    triu2symm(MX a) -> MX
    triu2symm(DM a) -> DM
    triu2symm(SX a) -> SX


    Convert a upper triangular matrix to a symmetric one.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c3

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L524

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L524-L524


    """
    return _casadi.triu2symm(*args)

def norm_fro(*args):
    r"""
    norm_fro(MX x) -> MX
    norm_fro(DM x) -> DM
    norm_fro(SX x) -> SX


    Frobenius norm.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c4

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L529

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L529-L529


    """
    return _casadi.norm_fro(*args)

def norm_2(*args):
    r"""
    norm_2(MX x) -> MX
    norm_2(DM x) -> DM
    norm_2(SX x) -> SX


    2-norm

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L534

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L534-L534


    """
    return _casadi.norm_2(*args)

def norm_1(*args):
    r"""
    norm_1(MX x) -> MX
    norm_1(DM x) -> DM
    norm_1(SX x) -> SX


    1-norm

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c6

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L539

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L539-L539


    """
    return _casadi.norm_1(*args)

def norm_inf(*args):
    r"""
    norm_inf(MX x) -> MX
    norm_inf(DM x) -> DM
    norm_inf(SX x) -> SX


    Infinity-norm.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1c7

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L544

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L544-L544


    """
    return _casadi.norm_inf(*args)

def dot(*args):
    r"""
    dot(MX x, MX y) -> MX
    dot(DM x, DM y) -> DM
    dot(SX x, SX y) -> SX


    Inner product of two matrices.

    with x and y matrices of the same dimension

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ca

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L565

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L565-L567


    """
    return _casadi.dot(*args)

def nullspace(*args):
    r"""
    nullspace(MX A) -> MX
    nullspace(DM A) -> DM
    nullspace(SX A) -> SX


    Computes the nullspace of a matrix A.

    Finds Z m-by-(m-n) such that AZ = 0 with A n-by-m with m > n

    Assumes A is full rank

    Inspired by Numerical Methods in Scientific Computing by Ake Bjorck

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cb

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L579

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L579-L581


    """
    return _casadi.nullspace(*args)

def polyval(*args):
    r"""
    polyval(MX p, MX x) -> MX
    polyval(DM p, DM x) -> DM
    polyval(SX p, SX x) -> SX


    Evaluate a polynomial with coefficients p in x.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cc

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L586

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L586-L588


    """
    return _casadi.polyval(*args)

def diag(*args):
    r"""
    diag(MX A) -> MX
    diag(DM A) -> DM
    diag(SX A) -> SX


    Get the diagonal of a matrix or construct a diagonal.

    When the input is square, the diagonal elements are returned. If the 
    input 
    is vector-like, a diagonal matrix is constructed with it.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cd

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L596

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L596-L598


    """
    return _casadi.diag(*args)

def unite(*args):
    r"""
    unite(MX A, MX B) -> MX
    unite(DM A, DM B) -> DM
    unite(SX A, SX B) -> SX


    Unite two matrices no overlapping sparsity.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ce

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L603

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L603-L605


    """
    return _casadi.unite(*args)

def densify(*args):
    r"""
    densify(MX x) -> MX
    densify(DM x) -> DM
    densify(SX x) -> SX


    Make the matrix dense and assign nonzeros to a value.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cg

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L617

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L617-L619


    """
    return _casadi.densify(*args)

def project(*args):
    r"""
    project(MX A, Sparsity sp, bool intersect=False) -> MX
    project(DM A, Sparsity sp, bool intersect=False) -> DM
    project(SX A, Sparsity sp, bool intersect=False) -> SX


    Create a new matrix with a given sparsity pattern but with the.

    nonzeros taken from an existing matrix

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ch

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L626

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L626-L629


    """
    return _casadi.project(*args)

def if_else(*args):
    r"""
    if_else(MX cond, MX if_true, MX if_false, bool short_circuit=False) -> MX
    if_else(DM cond, DM if_true, DM if_false, bool short_circuit=False) -> DM
    if_else(SX cond, SX if_true, SX if_false, bool short_circuit=False) -> SX


    Ternary if_else: x ? y : z.

    Extra doc: https://github.com/casadi/casadi/wiki/L_113

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sx_elem.hpp#L265

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sx_elem.hpp#L265-L267


    """
    return _casadi.if_else(*args)

def conditional(*args):
    r"""
    conditional(MX ind, std::vector< casadi::MX,std::allocator< casadi::MX > > const & x, MX x_default, bool short_circuit=False) -> MX
    conditional(DM ind, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & x, DM x_default, bool short_circuit=False) -> DM
    conditional(SX ind, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & x, SX x_default, bool short_circuit=False) -> SX


    Create a switch.

    If the condition

    Parameters:
    -----------

    ind: 
    evaluates to the integer k, where 0<=k<f.size(), then x[k] will be 

    returned, otherwise

    x_default: 
    will be returned.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cj

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L647

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L647-L650


    """
    return _casadi.conditional(*args)

def depends_on(*args):
    r"""
    depends_on(MX f, MX arg) -> bool
    depends_on(DM f, DM arg) -> bool
    depends_on(SX f, SX arg) -> bool


    Check if expression depends on the argument.

    The argument must be symbolic

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ck

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L657

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L657-L659


    """
    return _casadi.depends_on(*args)

def solve(*args):
    r"""
    solve(MX A, MX b) -> MX
    solve(MX A, MX b, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> MX
    solve(DM A, DM b) -> DM
    solve(DM A, DM b, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> DM
    solve(SX A, SX b) -> SX
    solve(SX A, SX b, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> SX


    Crunch the numbers; solve the problem.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L204

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L153-L159


    """
    return _casadi.solve(*args)

def pinv(*args):
    r"""
    pinv(MX A) -> MX
    pinv(MX A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> MX
    pinv(DM A) -> DM
    pinv(DM A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> DM
    pinv(SX A) -> SX
    pinv(SX A, std::string const & lsolver, casadi::Dict const & opts=casadi::Dict()) -> SX


    Computes the Moore-Penrose pseudo-inverse.

    If the matrix A is fat (size1>size2), mul(A, pinv(A)) is unity. If the

    matrix A is slender (size2<size1), mul(pinv(A), A) is unity.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cu

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L767

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L767-L770


    """
    return _casadi.pinv(*args)

def expm_const(*args):
    r"""
    expm_const(MX A, MX t) -> MX
    expm_const(DM A, DM t) -> DM
    expm_const(SX A, SX t) -> SX


    Calculate  Matrix exponential.

    Computes expm(A*t) with A constant

    Parameters:
    -----------

    A[in]: 
    Square matrix

    t[in]: 
    Scalar

    Extra doc: https://github.com/casadi/casadi/wiki/L_23v

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L782

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L782-L784


    """
    return _casadi.expm_const(*args)

def expm(*args):
    r"""
    expm(MX A) -> MX
    expm(DM A) -> DM
    expm(SX A) -> SX


    Calculate  Matrix exponential.

    Extra doc: https://github.com/casadi/casadi/wiki/L_23w

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L790

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L790-L792


    """
    return _casadi.expm(*args)

def jacobian(*args):
    r"""
    jacobian(MX ex, MX arg, casadi::Dict const & opts=casadi::Dict()) -> MX
    jacobian(DM ex, DM arg, casadi::Dict const & opts=casadi::Dict()) -> DM
    jacobian(SX ex, SX arg, casadi::Dict const & opts=casadi::Dict()) -> SX


    Calculate Jacobian.

    Sparse matrix

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cv

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L799

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L799-L802


    """
    return _casadi.jacobian(*args)

def jtimes(*args):
    r"""
    jtimes(MX ex, MX arg, MX v, bool tr=False) -> MX
    jtimes(DM ex, DM arg, DM v, bool tr=False) -> DM
    jtimes(SX ex, SX arg, SX v, bool tr=False) -> SX


    Calculate the Jacobian and multiply by a vector from the right.

    This is equivalent to  mul(jacobian(ex, arg), v) or  mul(jacobian(ex, 
    arg).T, v) for tr set to false and true respectively. If contrast to these 

    expressions, it will use directional derivatives which is typically 
    (but 
    not necessarily) more efficient if the complete Jacobian is not 
    needed and 
    v has few rows.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cw

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L832

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L832-L835


    """
    return _casadi.jtimes(*args)

def linearize(*args):
    r"""
    linearize(MX f, MX x, MX x0) -> MX
    linearize(DM f, DM x, DM x0) -> DM
    linearize(SX f, SX x, SX x0) -> SX


    Linearize an expression.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cs

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L740

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L740-L743


    """
    return _casadi.linearize(*args)

def which_depends(*args):
    r"""
    which_depends(MX expr, MX var, casadi_int order=1, bool tr=False) -> std::vector< bool,std::allocator< bool > >
    which_depends(DM expr, DM var, casadi_int order=1, bool tr=False) -> std::vector< bool,std::allocator< bool > >
    which_depends(SX expr, SX var, casadi_int order=1, bool tr=False) -> std::vector< bool,std::allocator< bool > >


    Find out which variables enter with some order.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cz

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L874

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L874-L877


    """
    return _casadi.which_depends(*args)

def jacobian_sparsity(*args):
    r"""
    jacobian_sparsity(MX f, MX x) -> Sparsity
    jacobian_sparsity(DM f, DM x) -> Sparsity
    jacobian_sparsity(SX f, SX x) -> Sparsity


    Get the sparsity pattern of a jacobian.

    Equivalent to, but cheaper to compute than, jacobian(f,x). sparsity()

    Extra doc: https://github.com/casadi/casadi/wiki/L_259

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L884

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L884-L886


    """
    return _casadi.jacobian_sparsity(*args)

def is_linear(*args):
    r"""
    is_linear(MX expr, MX var) -> bool
    is_linear(DM expr, DM var) -> bool
    is_linear(SX expr, SX var) -> bool


    Is expr linear in var?

    False negatives are possible (an expression may not be recognised as 
    linear
     while it really is), false positives not.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d0

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L895

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L895-L897


    """
    return _casadi.is_linear(*args)

def is_quadratic(*args):
    r"""
    is_quadratic(MX expr, MX var) -> bool
    is_quadratic(DM expr, DM var) -> bool
    is_quadratic(SX expr, SX var) -> bool


    Is expr quadratic in var?

    False negatives are possible (an expression may not be recognised as 

    quadratic while it really is), false positives not.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d1

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L906

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L906-L908


    """
    return _casadi.is_quadratic(*args)

def gradient(*args):
    r"""
    gradient(MX ex, MX arg) -> MX
    gradient(DM ex, DM arg) -> DM
    gradient(SX ex, SX arg) -> SX


    Calculate the gradient of an expression.

    Parameters:
    -----------

    ex[in]: 
    Scalar expression to take the gradient of

    arg[in]: 
    Vector expression of symbols

    opts[in]: 
    Options

    Dense column vector

    Extra doc: https://github.com/casadi/casadi/wiki/L_23x

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L812

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L812-L814


    """
    return _casadi.gradient(*args)

def tangent(*args):
    r"""
    tangent(MX ex, MX arg) -> MX
    tangent(DM ex, DM arg) -> DM
    tangent(SX ex, SX arg) -> SX


    Calculate the tangent of an expression.

    Extra doc: https://github.com/casadi/casadi/wiki/L_23y

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L819

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L819-L821


    """
    return _casadi.tangent(*args)

def hessian(*args):
    r"""
    hessian(MX ex, MX arg, casadi::Dict const & opts=casadi::Dict()) -> MX
    hessian(DM ex, DM arg, casadi::Dict const & opts=casadi::Dict()) -> DM
    hessian(SX ex, SX arg, casadi::Dict const & opts=casadi::Dict()) -> SX


    Hessian and (optionally) gradient.

    Extra doc: https://github.com/casadi/casadi/wiki/L_23z

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L865

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L865-L868


    """
    return _casadi.hessian(*args)

def quadratic_coeff(*args):
    r"""
    quadratic_coeff(MX ex, MX arg, bool check=True)
    quadratic_coeff(DM ex, DM arg, bool check=True)
    quadratic_coeff(SX ex, SX arg, bool check=True)


    Recognizes quadratic form in scalar expression.

    1/2*x' A x + b' x + c

    e = 0.5*bilin(A,x,x)+dot(b,x)+c

    Parameters:
    -----------

    check[in]: 
    When true (default), A is checked to be independent of x. 
    Provided to 
    deal with false positive dependency checks.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d2

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L920

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L920-L923


    """
    return _casadi.quadratic_coeff(*args)

def linear_coeff(*args):
    r"""
    linear_coeff(MX ex, MX arg, bool check=True)
    linear_coeff(DM ex, DM arg, bool check=True)
    linear_coeff(SX ex, SX arg, bool check=True)


    Recognizes linear form in vector expression.

    A x + b

    Parameters:
    -----------

    check[in]: 
    When true (default)m, A is checked to be independent of x. 
    Provided to
     deal with false positive dependency checks.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d3

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L933

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L933-L936


    """
    return _casadi.linear_coeff(*args)

def n_nodes(*args):
    r"""
    n_nodes(MX A) -> casadi_int
    n_nodes(DM A) -> casadi_int
    n_nodes(SX A) -> casadi_int
    """
    return _casadi.n_nodes(*args)

def print_operator(*args):
    r"""
    print_operator(MX xb, std::vector< std::string,std::allocator< std::string > > const & args) -> std::string
    print_operator(DM xb, std::vector< std::string,std::allocator< std::string > > const & args) -> std::string
    print_operator(SX xb, std::vector< std::string,std::allocator< std::string > > const & args) -> std::string


    Get a string representation for a binary MatType, using custom 
    arguments.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d4

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L952

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L952-L954


    """
    return _casadi.print_operator(*args)

def repsum(*args):
    r"""
    repsum(MX A, casadi_int n, casadi_int m=1) -> MX
    repsum(DM A, casadi_int n, casadi_int m=1) -> DM
    repsum(SX A, casadi_int n, casadi_int m=1) -> SX


    Given a repeated matrix, computes the sum of repeated parts.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d7

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L980

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L980-L982


    """
    return _casadi.repsum(*args)

def diff(*args):
    r"""
    diff(MX A, casadi_int n=1, casadi_index axis=-1) -> MX
    diff(DM A, casadi_int n=1, casadi_index axis=-1) -> DM
    diff(SX A, casadi_int n=1, casadi_index axis=-1) -> SX


    diff

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ln

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L886

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L886-L893


    """
    return _casadi.diff(*args)

def cumsum(*args):
    r"""
    cumsum(MX A, casadi_index axis=-1) -> MX
    cumsum(DM A, casadi_index axis=-1) -> DM
    cumsum(SX A, casadi_index axis=-1) -> SX


    cumulative sum

    Extra doc: https://github.com/casadi/casadi/wiki/L_1lm

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L864

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L864-L872


    """
    return _casadi.cumsum(*args)

def einstein(*args):
    r"""
    einstein(MX A, MX B, MX C, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> MX
    einstein(MX A, MX B, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> MX
    einstein(DM A, DM B, DM C, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> DM
    einstein(DM A, DM B, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> DM
    einstein(SX A, SX B, SX C, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> SX
    einstein(SX A, SX B, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_a, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_b, std::vector< casadi_int,std::allocator< casadi_int > > const & dim_c, std::vector< casadi_int,std::allocator< casadi_int > > const & a, std::vector< casadi_int,std::allocator< casadi_int > > const & b, std::vector< casadi_int,std::allocator< casadi_int > > const & c) -> SX


    Computes an einstein dense tensor contraction.

    Computes the product: C_c = A_a + B_b where a b c are index/einstein 

    notation in an encoded form

    For example, an matrix-matrix product may be written as: C_ij = A_ik 
    B_kj

    The encoded form uses strictly negative numbers to indicate labels. 
    For the
     above example, we would have: a {-1, -3} b {-3, -2} c {-1 -2}

    Extra doc: https://github.com/casadi/casadi/wiki/L_r5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L520

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.cpp#L646-L652


    """
    return _casadi.einstein(*args)

def mmin(*args):
    r"""
    mmin(MX x) -> MX
    mmin(DM x) -> DM
    mmin(SX x) -> SX


    Smallest element in a matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d8

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L988

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L988-L990


    """
    return _casadi.mmin(*args)

def mmax(*args):
    r"""
    mmax(MX x) -> MX
    mmax(DM x) -> DM
    mmax(SX x) -> SX


    Largest element in a matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d9

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L997

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L997-L999


    """
    return _casadi.mmax(*args)

def evalf(*args):
    r"""
    evalf(MX x) -> DM
    evalf(DM x) -> DM
    evalf(SX x) -> DM


    Evaluates the expression numerically.

    An error is raised when the expression contains symbols

    Extra doc: https://github.com/casadi/casadi/wiki/L_rf

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L802

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L802-L804


    """
    return _casadi.evalf(*args)

def cse(*args):
    r"""
    cse(std::vector< casadi::MX,std::allocator< casadi::MX > > const & e) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    cse(MX e) -> MX
    cse(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & e) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    cse(DM e) -> DM
    cse(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & e) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >
    cse(SX e) -> SX


    Common subexpression elimination.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cp

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L702

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L702-L704


    """
    return _casadi.cse(*args)

def forward(*args):
    r"""
    forward(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg, std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >
    forward(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & ex, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & arg, std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >
    forward(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & ex, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & arg, std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >


    Forward directional derivative.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cx

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L841

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L841-L845


    """
    return _casadi.forward(*args)

def reverse(*args):
    r"""
    reverse(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, std::vector< casadi::MX,std::allocator< casadi::MX > > const & arg, std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > >
    reverse(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & ex, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & arg, std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > >
    reverse(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & ex, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & arg, std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > > const & v, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > >


    Reverse a list.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1la

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L530

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L530-L534


    """
    return _casadi.reverse(*args)

def substitute(*args):
    r"""
    substitute(MX ex, MX v, MX vdef) -> MX
    substitute(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, std::vector< casadi::MX,std::allocator< casadi::MX > > const & v, std::vector< casadi::MX,std::allocator< casadi::MX > > const & vdef) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    substitute(DM ex, DM v, DM vdef) -> DM
    substitute(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & ex, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & v, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & vdef) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >
    substitute(SX ex, SX v, SX vdef) -> SX
    substitute(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & ex, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & v, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & vdef) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


    Substitute variable var with expression expr in multiple expressions.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cm

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L673

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L673-L676


    """
    return _casadi.substitute(*args)

def substitute_inplace(*args):
    r"""
    substitute_inplace(std::vector< casadi::MX,std::allocator< casadi::MX > > const & v, std::vector< casadi::MX,std::allocator< casadi::MX > > & INOUT1, std::vector< casadi::MX,std::allocator< casadi::MX > > & INOUT2, bool reverse=False)
    substitute_inplace(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & v, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > & INOUT1, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > & INOUT2, bool reverse=False)
    substitute_inplace(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & v, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > & INOUT1, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > & INOUT2, bool reverse=False)


    Inplace substitution with piggyback expressions.

    Substitute variables v out of the expressions vdef sequentially, as 
    well as
     out of a number of other expressions piggyback

    Extra doc: https://github.com/casadi/casadi/wiki/L_1cn

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L685

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L685-L689


    """
    return _casadi.substitute_inplace(*args)

def extract(*args):
    r"""
    extract(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, casadi::Dict const & opts=casadi::Dict())
    extract(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & ex, casadi::Dict const & opts=casadi::Dict())
    extract(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & ex, casadi::Dict const & opts=casadi::Dict())


    Introduce intermediate variables for selected nodes in a graph.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1d5

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L959

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/generic_matrix.hpp#L959-L964


    """
    return _casadi.extract(*args)

def shared(*args):
    r"""
    shared(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, std::string const & v_prefix="v_", std::string const & v_suffix="")
    shared(std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & ex, std::string const & v_prefix="v_", std::string const & v_suffix="")
    shared(std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & ex, std::string const & v_prefix="v_", std::string const & v_suffix="")


    Get a shared (owning) reference.

    Extra doc: https://github.com/casadi/casadi/wiki/L_b0

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.hpp#L198

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/shared_object.cpp#L141-L147


    """
    return _casadi.shared(*args)

def blockcat(*args):
    r"""
    blockcat(Sparsity A, Sparsity B, Sparsity C, Sparsity D) -> Sparsity
    blockcat(MX A, MX B, MX C, MX D) -> MX
    blockcat(DM A, DM B, DM C, DM D) -> DM
    blockcat(SX A, SX B, SX C, SX D) -> SX
    blockcat(std::vector< std::vector< casadi::MX,std::allocator< casadi::MX > >,std::allocator< std::vector< casadi::MX,std::allocator< casadi::MX > > > > const & v) -> MX
    blockcat(std::vector< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >,std::allocator< std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > > > const & v) -> DM
    blockcat(std::vector< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >,std::allocator< std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > > > const & v) -> SX


    Construct a matrix from 4 blocks.

    Extra doc: https://github.com/casadi/casadi/wiki/L_3m

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L234

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/sparsity_interface.hpp#L234-L236


    """
    return _casadi.blockcat(*args)

def logic_all(*args):
    r"""
    logic_all(DM x) -> DM
    logic_all(SX x) -> SX


    Check if all arguments are true.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L76

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.cpp#L76-L81


    """
    return _casadi.logic_all(*args)

def logic_any(*args):
    r"""
    logic_any(DM x) -> DM
    logic_any(SX x) -> SX


    Check if any arguments are true.

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L83

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.cpp#L83-L88


    """
    return _casadi.logic_any(*args)

def adj(*args):
    r"""
    adj(DM A) -> DM
    adj(SX A) -> SX


    Matrix adjoint.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18p

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L504

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L504-L506


    """
    return _casadi.adj(*args)

def minor(*args):
    r"""
    minor(DM x, casadi_int i, casadi_int j) -> DM
    minor(SX x, casadi_int i, casadi_int j) -> SX


    Get the (i,j) minor matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18q

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L511

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L511-L513


    """
    return _casadi.minor(*args)

def cofactor(*args):
    r"""
    cofactor(DM x, casadi_int i, casadi_int j) -> DM
    cofactor(SX x, casadi_int i, casadi_int j) -> SX


    Get the (i,j) cofactor matrix.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18r

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L518

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L518-L520


    """
    return _casadi.cofactor(*args)

def qr(*args):
    r"""
    qr(DM A)
    qr(SX A)


    QR factorization using the modified Gram-Schmidt algorithm.

    More stable than the classical Gram-Schmidt, but may break down if the
     rows
     of A are nearly linearly dependent See J. Demmel: Applied 
    Numerical Linear
     Algebra (algorithm 3.1.). Note that in SWIG, Q and R 
    are returned by 
    value.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18s

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L530

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L530-L532


    """
    return _casadi.qr(*args)

def qr_sparse(*args):
    r"""
    qr_sparse(DM A, bool amd=True)
    qr_sparse(SX A, bool amd=True)


    Sparse direct QR factorization.

    See T. Davis: Direct Methods for Sparse Linear Systems

    Extra doc: https://github.com/casadi/casadi/wiki/L_18t

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L539

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L539-L543


    """
    return _casadi.qr_sparse(*args)

def qr_solve(*args):
    r"""
    qr_solve(DM b, DM v, DM r, DM beta, std::vector< casadi_int,std::allocator< casadi_int > > const & prinv, std::vector< casadi_int,std::allocator< casadi_int > > const & pc, bool tr=False) -> DM
    qr_solve(SX b, SX v, SX r, SX beta, std::vector< casadi_int,std::allocator< casadi_int > > const & prinv, std::vector< casadi_int,std::allocator< casadi_int > > const & pc, bool tr=False) -> SX


    Solve using a sparse QR factorization.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18u

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L549

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L549-L554


    """
    return _casadi.qr_solve(*args)

def ldl(*args):
    r"""
    ldl(DM A, bool amd=True)
    ldl(SX A, bool amd=True)


    Sparse LDL^T factorization.

    Returns D and the strictly upper triangular entries of L^T I.e. ones 
    on the
     diagonal are ignored. Only guarenteed to work for positive 
    definite 
    matrices.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18w

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L573

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L573-L576


    """
    return _casadi.ldl(*args)

def ldl_solve(*args):
    r"""
    ldl_solve(DM b, DM D, DM LT, std::vector< casadi_int,std::allocator< casadi_int > > const & p) -> DM
    ldl_solve(SX b, SX D, SX LT, std::vector< casadi_int,std::allocator< casadi_int > > const & p) -> SX


    Solve using a sparse LDL^T factorization.

    Extra doc: https://github.com/casadi/casadi/wiki/L_18x

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L582

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L582-L585


    """
    return _casadi.ldl_solve(*args)

def chol(*args):
    r"""
    chol(DM A) -> DM
    chol(SX A) -> SX


    Obtain a Cholesky factorisation of a matrix.

    Performs and LDL transformation [L,D] = ldl(A) and returns 
    diag(sqrt(D))*L'

    Extra doc: https://github.com/casadi/casadi/wiki/L_18v

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L562

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L562-L564


    """
    return _casadi.chol(*args)

def norm_inf_mul(*args):
    r"""
    norm_inf_mul(DM x, DM y) -> DM
    norm_inf_mul(SX x, SX y) -> SX


    Inf-norm of a Matrix-Matrix product.

    Extra doc: https://github.com/casadi/casadi/wiki/L_190

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L605

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L605-L607


    """
    return _casadi.norm_inf_mul(*args)

def sparsify(*args):
    r"""
    sparsify(DM A, double tol=0) -> DM
    sparsify(SX A, double tol=0) -> SX


    Make a matrix sparse by removing numerical zeros.

    Extra doc: https://github.com/casadi/casadi/wiki/L_191

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L613

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L613-L615


    """
    return _casadi.sparsify(*args)

def expand(*args):
    r"""
    expand(DM ex)
    expand(SX ex)


    Expand the expression as a weighted sum (with constant weights)

    Extra doc: https://github.com/casadi/casadi/wiki/L_192

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L620

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L620-L623


    """
    return _casadi.expand(*args)

def pw_const(*args):
    r"""
    pw_const(DM t, DM tval, DM val) -> DM
    pw_const(SX t, SX tval, SX val) -> SX


    Create a piecewise constant function.

    Create a piecewise constant function with n=val.size() intervals

    Inputs:

    Parameters:
    -----------

    t: 
    a scalar variable (e.g. time)

    tval: 
    vector with the discrete values of t at the interval transitions 

    (length n-1)

    val: 
    vector with the value of the function for each interval (length n)

    Extra doc: https://github.com/casadi/casadi/wiki/L_193

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L635

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L635-L639


    """
    return _casadi.pw_const(*args)

def pw_lin(*args):
    r"""
    pw_lin(DM t, DM tval, DM val) -> DM
    pw_lin(SX t, SX tval, SX val) -> SX


    t a scalar variable (e.g. time)

    Create a piecewise linear function

    Create a piecewise linear function:

    Inputs:

    tval vector with the the discrete values of t (monotonically 
    increasing)

    val vector with the corresponding function values (same length as 
    tval)

    ::

                                                                                                          Extra doc: https://github.com/casadi/casadi/wiki/L_194 




    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L652

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L652-L655


    """
    return _casadi.pw_lin(*args)

def heaviside(*args):
    r"""
    heaviside(DM x) -> DM
    heaviside(SX x) -> SX


    Heaviside function.

    \\[ \\begin {cases} H(x) = 0 & x<0 \\\\ H(x) = 1/2 & x=0 
    \\\\ 
    H(x) = 1 & x>0 \\\\ \\end {cases} \\]

    Extra doc: https://github.com/casadi/casadi/wiki/L_195

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L668

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L668-L670


    """
    return _casadi.heaviside(*args)

def rectangle(*args):
    r"""
    rectangle(DM x) -> DM
    rectangle(SX x) -> SX


    rectangle function

    \\[ \\begin {cases} \\Pi(x) = 1 & |x| < 1/2 \\\\ \\Pi(x) =
     1/2 
    & |x| = 1/2 \\\\ \\Pi(x) = 0 & |x| > 1/2 \\\\ \\end 
    {cases} 
    \\]

    Also called: gate function, block function, band function, pulse 
    function, 
    window function

    Extra doc: https://github.com/casadi/casadi/wiki/L_23n

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L685

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L685-L687


    """
    return _casadi.rectangle(*args)

def triangle(*args):
    r"""
    triangle(DM x) -> DM
    triangle(SX x) -> SX


    triangle function

    \\[ \\begin {cases} \\Lambda(x) = 0 & |x| >= 1 \\\\ 
    \\Lambda(x)
     = 1-|x| & |x| < 1 \\end {cases} \\]

    Extra doc: https://github.com/casadi/casadi/wiki/L_23o

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L700

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L700-L702


    """
    return _casadi.triangle(*args)

def ramp(*args):
    r"""
    ramp(DM x) -> DM
    ramp(SX x) -> SX


    ramp function

    \\[ \\begin {cases} R(x) = 0 & x <= 1 \\\\ R(x) = x & x > 1 

    \\\\ \\end {cases} \\]

    Also called: slope function

    Extra doc: https://github.com/casadi/casadi/wiki/L_23p

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L717

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L717-L719


    """
    return _casadi.ramp(*args)

def gauss_quadrature(*args):
    r"""
    gauss_quadrature(DM f, DM x, DM a, DM b, casadi_int order=5) -> DM
    gauss_quadrature(DM f, DM x, DM a, DM b, casadi_int order, DM w) -> DM
    gauss_quadrature(SX f, SX x, SX a, SX b, casadi_int order=5) -> SX
    gauss_quadrature(SX f, SX x, SX a, SX b, casadi_int order, SX w) -> SX


    Integrate f from a to b using Gaussian quadrature with n points.

    Extra doc: https://github.com/casadi/casadi/wiki/L_196

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L732

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L732-L736


    """
    return _casadi.gauss_quadrature(*args)

def taylor(*args):
    r"""
    taylor(DM ex, DM x, DM a=0, casadi_int order=1) -> DM
    taylor(SX ex, SX x, SX a=0, casadi_int order=1) -> SX


    univariate Taylor series expansion

    Calculate the Taylor expansion of expression 'ex' up to order 'order' 
    with 
    respect to variable 'x' around the point 'a'

    $(x)=f(a)+f'(a)(x-a)+f''(a)\\frac 

    {(x-a)^2}{2!}+f'''(a)\\frac{(x-a)^3}{3!}+\\ldots$

    Example usage:

    ::

    >>> taylor(sin(x), x)

    ::

    >>   x



    Extra doc: https://github.com/casadi/casadi/wiki/L_23q

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L758

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L758-L760


    """
    return _casadi.taylor(*args)

def mtaylor(*args):
    r"""
    mtaylor(DM ex, DM x, DM a, casadi_int order=1) -> DM
    mtaylor(DM ex, DM x, DM a, casadi_int order, std::vector< casadi_int,std::allocator< casadi_int > > const & order_contributions) -> DM
    mtaylor(SX ex, SX x, SX a, casadi_int order=1) -> SX
    mtaylor(SX ex, SX x, SX a, casadi_int order, std::vector< casadi_int,std::allocator< casadi_int > > const & order_contributions) -> SX


    multivariate Taylor series expansion

    Do Taylor expansions until the aggregated order of a term is equal to 

    'order'. The aggregated order of  $x^n y^m$ equals  $n+m$.

    The argument order_contributions can denote how match each variable 

    contributes to the aggregated order. If x=[x, y] and 

    order_contributions=[1, 2], then the aggregated order of  $x^n y^m$ equals  
    $1n+2m$.

    Example usage



    ::

    >>> taylor(sin(x+y),[x, y],[a, b], 1)
     $ \\sin(b+a)+\\cos(b+a)(x-a)+\\cos(b+a)(y-b) $

    ::

    >>> taylor(sin(x+y),[x, y],[0, 0], 4)
     $ y+x-(x^3+3y x^2+3 y^2 x+y^3)/6 $

    ::

    >>> taylor(sin(x+y),[x, y],[0, 0], 4,[1, 2])
     $ (-3 x^2 y-x^3)/6+y+x $

    Extra doc: https://github.com/casadi/casadi/wiki/L_23s

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L801

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L801-L805


    """
    return _casadi.mtaylor(*args)

def poly_coeff(*args):
    r"""
    poly_coeff(DM ex, DM x) -> DM
    poly_coeff(SX ex, SX x) -> SX


    extracts polynomial coefficients from an expression

    Parameters:
    -----------

    ex: 
    Scalar expression that represents a polynomial

    x: 
    Scalar symbol that the polynomial is build up with

    Extra doc: https://github.com/casadi/casadi/wiki/L_197

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L813

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L813-L816


    """
    return _casadi.poly_coeff(*args)

def poly_roots(*args):
    r"""
    poly_roots(DM p) -> DM
    poly_roots(SX p) -> SX


    Attempts to find the roots of a polynomial.

    This will only work for polynomials up to order 3 It is assumed that 
    the 
    roots are real.

    Extra doc: https://github.com/casadi/casadi/wiki/L_198

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L824

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L824-L826


    """
    return _casadi.poly_roots(*args)

def eig_symbolic(*args):
    r"""
    eig_symbolic(DM m) -> DM
    eig_symbolic(SX m) -> SX


    Attempts to find the eigenvalues of a symbolic matrix.

    This will only work for up to 3x3 matrices

    Extra doc: https://github.com/casadi/casadi/wiki/L_199

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L833

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/matrix_decl.hpp#L833-L835


    """
    return _casadi.eig_symbolic(*args)

def find(*args):
    r"""
    find(MX x) -> MX


    find nonzeros

    Extra doc: https://github.com/casadi/casadi/wiki/L_1le

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L559

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/casadi_misc.hpp#L559-L565


    """
    return _casadi.find(*args)

def low(*args):
    r"""
    low(MX v, MX p, casadi::Dict const & options=casadi::Dict()) -> MX


    Find first nonzero.

    If failed, returns the number of rows

    Extra doc: https://github.com/casadi/casadi/wiki/L_r8

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L699

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L699-L701


    """
    return _casadi.low(*args)

def inv_node(*args):
    r"""
    inv_node(MX x) -> MX


    Inverse node.

    Extra doc: https://github.com/casadi/casadi/wiki/L_re

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L793

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L793-L795


    """
    return _casadi.inv_node(*args)

def matrix_expand(*args):
    r"""
    matrix_expand(std::vector< casadi::MX,std::allocator< casadi::MX > > const & e, std::vector< casadi::MX,std::allocator< casadi::MX > > const & boundary=std::vector< casadi::MX >(), casadi::Dict const & options=casadi::Dict()) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
    matrix_expand(MX e, std::vector< casadi::MX,std::allocator< casadi::MX > > const & boundary=std::vector< casadi::MX >(), casadi::Dict const & options=casadi::Dict()) -> MX


    Expand  MX graph to SXFunction call.

    Expand the given expression e, optionally supplying expressions 
    contained 
    in it at which expansion should stop.

    Extra doc: https://github.com/casadi/casadi/wiki/L_rc

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L745

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L745-L749


    """
    return _casadi.matrix_expand(*args)

def graph_substitute(*args):
    r"""
    graph_substitute(MX ex, std::vector< casadi::MX,std::allocator< casadi::MX > > const & v, std::vector< casadi::MX,std::allocator< casadi::MX > > const & vdef) -> MX
    graph_substitute(std::vector< casadi::MX,std::allocator< casadi::MX > > const & ex, std::vector< casadi::MX,std::allocator< casadi::MX > > const & v, std::vector< casadi::MX,std::allocator< casadi::MX > > const & vdef) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


    Substitute multiple expressions in graph.

    Substitute variable var with expression expr in multiple expressions, 

    preserving nodes

    Extra doc: https://github.com/casadi/casadi/wiki/L_ra

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L720

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L720-L724


    """
    return _casadi.graph_substitute(*args)

def bspline(*args):
    r"""
    bspline(MX x, DM coeffs, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & knots, std::vector< casadi_int,std::allocator< casadi_int > > const & degree, casadi_int m, casadi::Dict const & opts=casadi::Dict()) -> MX
    bspline(MX x, MX coeffs, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const & knots, std::vector< casadi_int,std::allocator< casadi_int > > const & degree, casadi_int m, casadi::Dict const & opts=casadi::Dict()) -> MX
    """
    return _casadi.bspline(*args)

def convexify(*args):
    r"""convexify(MX H, casadi::Dict const & opts=casadi::Dict()) -> MX"""
    return _casadi.convexify(*args)

def stop_diff(*args):
    r"""
    stop_diff(MX expr, casadi_int order) -> MX
    stop_diff(MX expr, MX var, casadi_int order) -> MX


    Stop derivatives of an expression wrt to a select set of symbolic 

    variables.

    Extra doc: https://github.com/casadi/casadi/wiki/L_25o

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L835

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L835-L837


    """
    return _casadi.stop_diff(*args)

def no_hess(*args):
    r"""
    no_hess(MX expr) -> MX


    Stop second derivatives of an expression wrt to all its symbolic 
    variables.

    \\seealso stop_diff

    Extra doc: https://github.com/casadi/casadi/wiki/L_25n

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L827

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L827-L829


    """
    return _casadi.no_hess(*args)

def no_grad(*args):
    r"""
    no_grad(MX expr) -> MX


    Stop first derivatives of an expression wrt to all its symbolic 
    variables.

    \\seealso stop_diff

    Extra doc: https://github.com/casadi/casadi/wiki/L_25m

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L818

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/mx.hpp#L818-L820


    """
    return _casadi.no_grad(*args)
class Importer(SharedObject, PrintableCommon):
    r"""


    [INTERNAL] 
     Importer.

    Just-in-time compilation of code
    General informationList of plugins
    - clang

    - shell

    Note: some of the plugins in this list might not be available on your 

    system.  Also, there might be extra plugins available to you that are 
    not 
    listed here. You can obtain their documentation with   
    Importer.doc("myextraplugin")



    --------------------------------------------------------------------------------

    clang
    -----



    Interface to the JIT compiler CLANG

    Extra doc: https://github.com/casadi/casadi/wiki/L_21v

    >List of available options

    +--------------+-----------------+-----------------------------------------+
    |      Id      |      Type       |               Description               |
    +==============+=================+=========================================+
    | flags        | OT_STRINGVECTOR | Compile flags for the JIT compiler.     |
    |              |                 | Default: None                           |
    +--------------+-----------------+-----------------------------------------+
    | include_path | OT_STRING       | Include paths for the JIT compiler. The |
    |              |                 | include directory shipped with CasADi   |
    |              |                 | will be automatically appended.         |
    +--------------+-----------------+-----------------------------------------+



    --------------------------------------------------------------------------------

    shell
    -----



    Interface to the JIT compiler SHELL

    Extra doc: https://github.com/casadi/casadi/wiki/L_22w

    >List of available options

    +----------------------+-----------------+---------------------------------+
    |          Id          |      Type       |           Description           |
    +======================+=================+=================================+
    | cleanup              | OT_BOOL         | Cleanup temporary files when    |
    |                      |                 | unloading. Default: true        |
    +----------------------+-----------------+---------------------------------+
    | compiler             | OT_STRING       | Compiler command                |
    +----------------------+-----------------+---------------------------------+
    | compiler_flags       | OT_STRINGVECTOR | Alias for 'compiler_flags'      |
    +----------------------+-----------------+---------------------------------+
    | compiler_output_flag | OT_STRING       | Compiler flag to denote object  |
    |                      |                 | output. Default: '-o '          |
    +----------------------+-----------------+---------------------------------+
    | compiler_setup       | OT_STRING       | Compiler setup command.         |
    |                      |                 | Intended to be fixed. The       |
    |                      |                 | 'flag' option is the prefered   |
    |                      |                 | way to set custom flags.        |
    +----------------------+-----------------+---------------------------------+
    | directory            | OT_STRING       | Directory to put temporary      |
    |                      |                 | objects in. Must end with a     |
    |                      |                 | file separator.                 |
    +----------------------+-----------------+---------------------------------+
    | extra_suffixes       | OT_STRINGVECTOR | List of suffixes for extra      |
    |                      |                 | files that the compiler may     |
    |                      |                 | generate. Default: None         |
    +----------------------+-----------------+---------------------------------+
    | flags                | OT_STRINGVECTOR | Compile flags for the JIT       |
    |                      |                 | compiler. Default: None         |
    +----------------------+-----------------+---------------------------------+
    | linker               | OT_STRING       | Linker command                  |
    +----------------------+-----------------+---------------------------------+
    | linker_flags         | OT_STRINGVECTOR | Linker flags for the JIT        |
    |                      |                 | compiler. Default: None         |
    +----------------------+-----------------+---------------------------------+
    | linker_output_flag   | OT_STRING       | Linker flag to denote shared    |
    |                      |                 | library output. Default: '-o '  |
    +----------------------+-----------------+---------------------------------+
    | linker_setup         | OT_STRING       | Linker setup command. Intended  |
    |                      |                 | to be fixed. The 'flag' option  |
    |                      |                 | is the prefered way to set      |
    |                      |                 | custom flags.                   |
    +----------------------+-----------------+---------------------------------+
    | name                 | OT_STRING       | The file name used to write out |
    |                      |                 | compiled objects/libraries. The |
    |                      |                 | actual file names used depend   |
    |                      |                 | on 'temp_suffix' and include    |
    |                      |                 | extensions. Default:            |
    |                      |                 | 'tmp_casadi_compiler_shell'     |
    +----------------------+-----------------+---------------------------------+
    | temp_suffix          | OT_BOOL         | Use a temporary (seemingly      |
    |                      |                 | random) filename suffix for     |
    |                      |                 | file names. This is desired for |
    |                      |                 | thread-safety. This behaviour   |
    |                      |                 | may defeat caching compiler     |
    |                      |                 | wrappers. Default: true         |
    +----------------------+-----------------+---------------------------------+

    Joris Gillis

    Extra doc: https://github.com/casadi/casadi/wiki/L_161

    C++ includes: importer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.Importer_type_name(*args)

    @staticmethod
    def test_cast(*args):
        r"""test_cast(casadi::SharedObjectInternal const * ptr) -> bool"""
        return _casadi.Importer_test_cast(*args)

    @staticmethod
    def has_plugin(*args):
        r"""has_plugin(std::string const & name) -> bool"""
        return _casadi.Importer_has_plugin(*args)

    @staticmethod
    def load_plugin(*args):
        r"""load_plugin(std::string const & name)"""
        return _casadi.Importer_load_plugin(*args)

    @staticmethod
    def doc(*args):
        r"""doc(std::string const & name) -> std::string"""
        return _casadi.Importer_doc(*args)

    def plugin_name(self, *args):
        r"""
        plugin_name(Importer self) -> std::string


        [INTERNAL] 
        Query plugin name.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L118

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L71-L73


        """
        return _casadi.Importer_plugin_name(self, *args)

    def has_function(self, *args):
        r"""
        has_function(Importer self, std::string const & symname) -> bool


        [INTERNAL] 
        """
        return _casadi.Importer_has_function(self, *args)

    def has_meta(self, *args):
        r"""
        has_meta(Importer self, std::string const & cmd, casadi_int ind=-1) -> bool


        [INTERNAL] 
        Does a meta entry exist?

        Extra doc: https://github.com/casadi/casadi/wiki/L_165

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L145

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L83-L85


        """
        return _casadi.Importer_has_meta(self, *args)

    def get_meta(self, *args):
        r"""
        get_meta(Importer self, std::string const & cmd, casadi_int ind=-1) -> std::string


        [INTERNAL] 
        Get entry as a text.

        Extra doc: https://github.com/casadi/casadi/wiki/L_166

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L150

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L87-L89


        """
        return _casadi.Importer_get_meta(self, *args)

    def inlined(self, *args):
        r"""
        inlined(Importer self, std::string const & symname) -> bool


        [INTERNAL] 
        Check if a function is inlined.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L153

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L91-L93


        """
        return _casadi.Importer_inlined(self, *args)

    def body(self, *args):
        r"""
        body(Importer self, std::string const & symname) -> std::string


        [INTERNAL] 
        Get the function body, if inlined.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L156

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L95-L97


        """
        return _casadi.Importer_body(self, *args)

    def library(self, *args):
        r"""
        library(Importer self) -> std::string


        [INTERNAL] 
        Get library name.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L159

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L99-L101


        """
        return _casadi.Importer_library(self, *args)

    def serialize(self, *args):
        r"""
        serialize(Importer self, casadi::SerializingStream & s)


        [INTERNAL] 
        Serialize an object.

        Extra doc: https://github.com/casadi/casadi/wiki/L_16c

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.hpp#L211

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/importer.cpp#L103-L105


        """
        return _casadi.Importer_serialize(self, *args)

    @staticmethod
    def deserialize(*args):
        r"""deserialize(casadi::DeserializingStream & s) -> Importer"""
        return _casadi.Importer_deserialize(*args)

    def __init__(self, *args):
        r"""
        __init__(Importer self) -> Importer
        __init__(Importer self, std::string const & name, std::string const & compiler, casadi::Dict const & opts=casadi::Dict()) -> Importer
        __init__(Importer self, Importer other) -> Importer
        """
        _casadi.Importer_swiginit(self, _casadi.new_Importer(*args))
    __swig_destroy__ = _casadi.delete_Importer

# Register Importer in _casadi:
_casadi.Importer_swigregister(Importer)
class Callback(Function):
    r"""


    [INTERNAL] 
     Callback function functionality.

    This class provides a public API to the FunctionInternal class that 
    can be 
    subclassed by the user, who is then able to implement the 
    different virtual
     method. Note that the  Function class also provides a public API to 
    FunctionInternal, but only allows
     calling, not being called.

    The user is responsible for not deleting this class for the lifetime 
    of the
     internal function object.

    Joris Gillis, Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_o0

    C++ includes: callback.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.Callback_type_name(*args)

    def __init__(self, *args):
        r"""
        __init__(Callback self) -> Callback
        __init__(Callback self, Callback obj) -> Callback


        [INTERNAL] 
        Copy constructor (throws an error)

        Extra doc: https://github.com/casadi/casadi/wiki/L_o3

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L64

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L32-L34


        """
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        _casadi.Callback_swiginit(self, _casadi.new_Callback(_self, *args))
    __swig_destroy__ = _casadi.delete_Callback

    def construct(self, *args):
        r"""
        construct(Callback self, std::string const & name, casadi::Dict const & opts=casadi::Dict())


        [INTERNAL] 
        Construct internal object.

        This is the step that actually construct the internal object, as the 
        class 
        constructor only creates a null pointer. It should be called 
        from the user 
        constructor.

        Extra doc: https://github.com/casadi/casadi/wiki/L_o5

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L78

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L36-L42


        """
        return _casadi.Callback_construct(self, *args)

    def init(self, *args):
        r"""
        init(Callback self)


        [INTERNAL] 
        Initialize the object.

        This function is called after the object construction (for the whole 
        class 
        hierarchy) is complete, but before the finalization step. It is 
        called 
        recursively for the whole class hierarchy, starting with the 
        lowest level.

        Extra doc: https://github.com/casadi/casadi/wiki/L_o6

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L88

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L88-L88


        """
        return _casadi.Callback_init(self, *args)

    def finalize(self, *args):
        r"""
        finalize(Callback self)


        [INTERNAL] 
        Finalize the object.

        This function is called after the construction and init steps are 

        completed, but before user functions are called. It is called 
        recursively 
        for the whole class hierarchy, starting with the highest 
        level.

        Extra doc: https://github.com/casadi/casadi/wiki/L_o7

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L98

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L98-L98


        """
        return _casadi.Callback_finalize(self, *args)

    def eval(self, *args):
        r"""
        eval(Callback self, std::vector< casadi::DM,std::allocator< casadi::DM > > const & arg) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        Evaluate numerically, using temporary matrices and work vectors.

        This signature is not thread-safe. For guaranteed thread-safety, use  
        eval_buffer

        Extra doc: https://github.com/casadi/casadi/wiki/L_o8

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L106

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L60-L62


        """
        return _casadi.Callback_eval(self, *args)

    def eval_buffer(self, *args):
        r"""
        eval_buffer(Callback self, double const ** arg, std::vector< casadi_int,std::allocator< casadi_int > > const & sizes_arg, double ** res, std::vector< casadi_int,std::allocator< casadi_int > > const & sizes_res) -> int


        [INTERNAL] 
        A copy-free low level interface.

        In Python, you will be passed two tuples of memoryview objects Note 
        that 
        only the structural nonzeros are present in the memoryview 
        objects/buffers.

        Make sure to override  has_eval_buffer() to indicate support for this 
        method.

        Extra doc: https://github.com/casadi/casadi/wiki/L_o9

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L116

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L53-L56


        """
        return _casadi.Callback_eval_buffer(self, *args)

    def has_eval_buffer(self, *args):
        r"""
        has_eval_buffer(Callback self) -> bool


        [INTERNAL] 
        Does the  Callback class support a copy-free low level interface
         ?

        Extra doc: https://github.com/casadi/casadi/wiki/L_265

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L122

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L57-L59


        """
        return _casadi.Callback_has_eval_buffer(self, *args)

    def get_n_in(self, *args):
        r"""
        get_n_in(Callback self) -> casadi_int


        [INTERNAL] 
        Get the number of inputs.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oa

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L129

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L64-L66


        """
        return _casadi.Callback_get_n_in(self, *args)

    def get_n_out(self, *args):
        r"""
        get_n_out(Callback self) -> casadi_int


        [INTERNAL] 
        Get the number of outputs.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_ob

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L136

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L68-L70


        """
        return _casadi.Callback_get_n_out(self, *args)

    def get_sparsity_in(self, *args):
        r"""
        get_sparsity_in(Callback self, casadi_int i) -> Sparsity


        [INTERNAL] 
        Get the sparsity of an input.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oc

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L143

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L72-L74


        """
        return _casadi.Callback_get_sparsity_in(self, *args)

    def get_sparsity_out(self, *args):
        r"""
        get_sparsity_out(Callback self, casadi_int i) -> Sparsity


        [INTERNAL] 
        Get the sparsity of an output.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_od

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L150

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L76-L78


        """
        return _casadi.Callback_get_sparsity_out(self, *args)

    def get_name_in(self, *args):
        r"""
        get_name_in(Callback self, casadi_int i) -> std::string


        [INTERNAL] 
        Get the name of an input.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oe

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L157

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L80-L82


        """
        return _casadi.Callback_get_name_in(self, *args)

    def get_name_out(self, *args):
        r"""
        get_name_out(Callback self, casadi_int i) -> std::string


        [INTERNAL] 
        Get the name of an output.

        This function is called during construction.

        Extra doc: https://github.com/casadi/casadi/wiki/L_of

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L164

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L84-L86


        """
        return _casadi.Callback_get_name_out(self, *args)

    def uses_output(self, *args):
        r"""
        uses_output(Callback self) -> bool


        [INTERNAL] 
        Do the derivative functions need nondifferentiated outputs?

        Extra doc: https://github.com/casadi/casadi/wiki/L_og

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L169

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L88-L90


        """
        return _casadi.Callback_uses_output(self, *args)

    def has_jacobian(self, *args):
        r"""
        has_jacobian(Callback self) -> bool


        [INTERNAL] 
        Return Jacobian of all input elements with respect to all output

        elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L175

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L92-L94


        """
        return _casadi.Callback_has_jacobian(self, *args)

    def get_jacobian(self, *args):
        r"""
        get_jacobian(Callback self, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & inames, std::vector< std::string,std::allocator< std::string > > const & onames, casadi::Dict const & opts) -> Function


        [INTERNAL] 
        Return Jacobian of all input elements with respect to all output

        elements.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oh

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L176

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L97-L102


        """
        return _casadi.Callback_get_jacobian(self, *args)

    def has_forward(self, *args):
        r"""
        has_forward(Callback self, casadi_int nfwd) -> bool


        [INTERNAL] 
        Return function that calculates forward derivatives.

        forward(nfwd) returns a cached instance if available, and calls   Function 
        get_forward(casadi_int nfwd) if no cached version is available.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L190

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L112-L114


        """
        return _casadi.Callback_has_forward(self, *args)

    def get_forward(self, *args):
        r"""
        get_forward(Callback self, casadi_int nfwd, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & inames, std::vector< std::string,std::allocator< std::string > > const & onames, casadi::Dict const & opts) -> Function


        [INTERNAL] 
        Return function that calculates forward derivatives.

        forward(nfwd) returns a cached instance if available, and calls   Function 
        get_forward(casadi_int nfwd) if no cached version is available.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oi

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L191

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L105-L110


        """
        return _casadi.Callback_get_forward(self, *args)

    def has_reverse(self, *args):
        r"""
        has_reverse(Callback self, casadi_int nadj) -> bool


        [INTERNAL] 
        Return function that calculates adjoint derivatives.

        reverse(nadj) returns a cached instance if available, and calls   Function 
        get_reverse(casadi_int nadj) if no cached version is available.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oj

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L205

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L124-L126


        """
        return _casadi.Callback_has_reverse(self, *args)

    def get_reverse(self, *args):
        r"""
        get_reverse(Callback self, casadi_int nadj, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & inames, std::vector< std::string,std::allocator< std::string > > const & onames, casadi::Dict const & opts) -> Function


        [INTERNAL] 
        Return function that calculates adjoint derivatives.

        reverse(nadj) returns a cached instance if available, and calls   Function 
        get_reverse(casadi_int nadj) if no cached version is available.

        Extra doc: https://github.com/casadi/casadi/wiki/L_oj

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L206

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.cpp#L117-L122


        """
        return _casadi.Callback_get_reverse(self, *args)

    def has_jac_sparsity(self, *args):
        r"""
        has_jac_sparsity(Callback self, casadi_int oind, casadi_int iind) -> bool


        [INTERNAL] 
        Return sparsity of Jacobian of all input elements.

        with respect to all output elements

        Extra doc: https://github.com/casadi/casadi/wiki/L_ok

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L218

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L218-L218


        """
        return _casadi.Callback_has_jac_sparsity(self, *args)

    def get_jac_sparsity(self, *args):
        r"""
        get_jac_sparsity(Callback self, casadi_int oind, casadi_int iind, bool symmetric) -> Sparsity


        [INTERNAL] 
        Return sparsity of Jacobian of all input elements.

        with respect to all output elements

        Extra doc: https://github.com/casadi/casadi/wiki/L_ok

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L219

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/callback.hpp#L219-L220


        """
        return _casadi.Callback_get_jac_sparsity(self, *args)
    def __disown__(self):
        self.this.disown()
        _casadi.disown_Callback(self)
        return weakref.proxy(self)

# Register Callback in _casadi:
_casadi.Callback_swigregister(Callback)
class GlobalOptions(object):
    r"""


    [INTERNAL] 
    Collects global CasADi options.

    Note to developers: 
    use sparingly. Global options are - in general - a 
    rather bad idea

    this class must never be instantiated. Access its static members 
    directly 

    Joris Gillis

    Extra doc: https://github.com/casadi/casadi/wiki/L_23m

    C++ includes: global_options.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def setSimplificationOnTheFly(*args):
        r"""setSimplificationOnTheFly(bool flag)"""
        return _casadi.GlobalOptions_setSimplificationOnTheFly(*args)

    @staticmethod
    def getSimplificationOnTheFly(*args):
        r"""getSimplificationOnTheFly() -> bool"""
        return _casadi.GlobalOptions_getSimplificationOnTheFly(*args)

    @staticmethod
    def setHierarchicalSparsity(*args):
        r"""setHierarchicalSparsity(bool flag)"""
        return _casadi.GlobalOptions_setHierarchicalSparsity(*args)

    @staticmethod
    def getHierarchicalSparsity(*args):
        r"""getHierarchicalSparsity() -> bool"""
        return _casadi.GlobalOptions_getHierarchicalSparsity(*args)

    @staticmethod
    def setCasadiPath(*args):
        r"""setCasadiPath(std::string const & path)"""
        return _casadi.GlobalOptions_setCasadiPath(*args)

    @staticmethod
    def getCasadiPath(*args):
        r"""getCasadiPath() -> std::string"""
        return _casadi.GlobalOptions_getCasadiPath(*args)

    @staticmethod
    def setCasadiIncludePath(*args):
        r"""setCasadiIncludePath(std::string const & path)"""
        return _casadi.GlobalOptions_setCasadiIncludePath(*args)

    @staticmethod
    def getCasadiIncludePath(*args):
        r"""getCasadiIncludePath() -> std::string"""
        return _casadi.GlobalOptions_getCasadiIncludePath(*args)

    @staticmethod
    def setMaxNumDir(*args):
        r"""setMaxNumDir(casadi_int ndir)"""
        return _casadi.GlobalOptions_setMaxNumDir(*args)

    @staticmethod
    def getMaxNumDir(*args):
        r"""getMaxNumDir() -> casadi_int"""
        return _casadi.GlobalOptions_getMaxNumDir(*args)

    def __init__(self, *args):
        r"""__init__(GlobalOptions self, GlobalOptions other) -> GlobalOptions"""
        _casadi.GlobalOptions_swiginit(self, _casadi.new_GlobalOptions(*args))
    __swig_destroy__ = _casadi.delete_GlobalOptions

# Register GlobalOptions in _casadi:
_casadi.GlobalOptions_swigregister(GlobalOptions)
class CasadiMeta(object):
    r"""


    [INTERNAL] 
    Collects global CasADi meta information.

    Joris Gillis

    Extra doc: https://github.com/casadi/casadi/wiki/L_23k

    C++ includes: casadi_meta.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def version(*args):
        r"""version() -> char const *"""
        return _casadi.CasadiMeta_version(*args)

    @staticmethod
    def git_revision(*args):
        r"""git_revision() -> char const *"""
        return _casadi.CasadiMeta_git_revision(*args)

    @staticmethod
    def git_describe(*args):
        r"""git_describe() -> char const *"""
        return _casadi.CasadiMeta_git_describe(*args)

    @staticmethod
    def feature_list(*args):
        r"""feature_list() -> char const *"""
        return _casadi.CasadiMeta_feature_list(*args)

    @staticmethod
    def build_type(*args):
        r"""build_type() -> char const *"""
        return _casadi.CasadiMeta_build_type(*args)

    @staticmethod
    def compiler_id(*args):
        r"""compiler_id() -> char const *"""
        return _casadi.CasadiMeta_compiler_id(*args)

    @staticmethod
    def compiler(*args):
        r"""compiler() -> char const *"""
        return _casadi.CasadiMeta_compiler(*args)

    @staticmethod
    def compiler_flags(*args):
        r"""compiler_flags() -> char const *"""
        return _casadi.CasadiMeta_compiler_flags(*args)

    @staticmethod
    def modules(*args):
        r"""modules() -> char const *"""
        return _casadi.CasadiMeta_modules(*args)

    @staticmethod
    def plugins(*args):
        r"""plugins() -> char const *"""
        return _casadi.CasadiMeta_plugins(*args)

    @staticmethod
    def install_prefix(*args):
        r"""install_prefix() -> char const *"""
        return _casadi.CasadiMeta_install_prefix(*args)

    def __init__(self, *args):
        r"""__init__(CasadiMeta self, CasadiMeta other) -> CasadiMeta"""
        _casadi.CasadiMeta_swiginit(self, _casadi.new_CasadiMeta(*args))
    __swig_destroy__ = _casadi.delete_CasadiMeta

# Register CasadiMeta in _casadi:
_casadi.CasadiMeta_swigregister(CasadiMeta)

def collocation_points(*args):
    r"""
    collocation_points(casadi_int order, std::string const & scheme="radau") -> std::vector< double,std::allocator< double > >

    [INTERNAL] 
    Obtain collocation points of specific order and scheme.

    Parameters:
    -----------

    order: 
    Which order (1 to 9 supported)

    scheme: 
    'radau' or 'legendre'

    Extra doc: https://github.com/casadi/casadi/wiki/L_1so

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L120

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L120-L122


    """
    return _casadi.collocation_points(*args)

def collocation_interpolators(*args):
    r"""
    collocation_interpolators(std::vector< double,std::allocator< double > > const & tau)


    [INTERNAL] 
    Obtain collocation interpolating matrices.

    A collocation method poses a polynomial Pi that interpolates exactly 

    through an initial state (0,X_0) and helper states at collocation 
    points 
    (tau_j,X:collPoint(j)).

    This function computes the linear mapping between dPi/dt and 
    coefficients 
    Z=[X_0 X:collPoints].

    Parameters:
    -----------

    tau: 
    location of collocation points, as obtained from collocation_points

    C: 
    interpolating coefficients to obtain derivatives. Length: order+1, 

    order+1



    ::

    dPi/dt @Z_j = (1/h) Sum_i C[j][i]*Z_i,



    with h the length of the integration interval.

    Parameters:
    -----------

    D: 
    interpolating coefficients to obtain end state. Length: order+1



    ::

    Pi @X_f = Sum_i D[i]*Z_i



    Extra doc: https://github.com/casadi/casadi/wiki/L_1sp

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L189

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L189-L231


    """
    return _casadi.collocation_interpolators(*args)

def collocation_coeff(*args):
    r"""
    collocation_coeff(std::vector< double,std::allocator< double > > const & tau)


    [INTERNAL] 
    Obtain collocation interpolating matrices.

    A collocation method poses a polynomial Pi that interpolates exactly 

    through an initial state (0,X_0) and helper states at collocation 
    points 
    (tau_j,Xc_j) with j=1..degree.

    This function computes the linear mapping between dPi/dt and 
    coefficients 
    Z=[X_0 Xc].

    Parameters:
    -----------

    tau: 
    location of collocation points (length: degree), as obtained from 

    collocation_points

    C: 
    interpolating coefficients to obtain derivatives. Size: (degree+1)-by-

    degree

    You may find the slopes of Pi at the collocation points as

    ::

    dPi/dt @ Xc = (1/h) Z*C,



    with h the length of the integration interval.

    Parameters:
    -----------

    D: 
    interpolating coefficients to obtain end state. Size: (degree+1)-by-1

    You may find the end point of Pi as

    ::

    Pi @X_f = Z*D



    Parameters:
    -----------

    B: 
    quadrature coefficients Size: degree-by-1

    Given quadrature righ-hand-sides 'quad' evaluated at the collocation 

    points, you may find the integrated quadratures as

    ::

    q = quad*B*h



    Extra doc: https://github.com/casadi/casadi/wiki/L_1sq

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L233

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L233-L287


    """
    return _casadi.collocation_coeff(*args)
LEGENDRE = _casadi.LEGENDRE

RADAU = _casadi.RADAU


def simpleRK(*args):
    r"""
    simpleRK(Function f, casadi_int N=10, casadi_int order=4) -> Function


    [INTERNAL] 
    Construct an explicit Runge-Kutta integrator.

    The constructed function has three inputs, corresponding to initial 
    state 
    (x0), parameter (p) and integration time (h) and one output, 
    corresponding 
    to final state (xf).

    Parameters:
    -----------

    f: 
    ODE function with two inputs (x and p) and one output (xdot)

    N: 
    Number of integrator steps

    order: 
    Order of interpolating polynomials

    Extra doc: https://github.com/casadi/casadi/wiki/L_1sr

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L128

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L128-L187


    """
    return _casadi.simpleRK(*args)

def simpleIRK(*args):
    r"""
    simpleIRK(Function f, casadi_int N=10, casadi_int order=4, std::string const & scheme="radau", std::string const & solver="newton", casadi::Dict const & solver_options=casadi::Dict()) -> Function


    [INTERNAL] 
    Construct an implicit Runge-Kutta integrator using a collocation

    scheme.

    The constructed function has three inputs, corresponding to initial 
    state 
    (x0), parameter (p) and integration time (h) and one output, 
    corresponding 
    to final state (xf).

    Parameters:
    -----------

    f: 
    ODE function with two inputs (x and p) and one output (xdot)

    N: 
    Number of integrator steps

    order: 
    Order of interpolating polynomials

    scheme: 
     Collocation scheme, as excepted by collocationPoints function.

    solver: 
    Solver plugin

    solver_options: 
    Options to be passed to the solver plugin

    Extra doc: https://github.com/casadi/casadi/wiki/L_1ss

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L289

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L289-L354


    """
    return _casadi.simpleIRK(*args)

def simpleIntegrator(*args):
    r"""
    simpleIntegrator(Function f, std::string const & integrator="cvodes", casadi::Dict const & integrator_options=casadi::Dict()) -> Function


    [INTERNAL] 
    Simplified wrapper for the  Integrator class.

    Extra doc: https://github.com/casadi/casadi/wiki/L_1st

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L356

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L356-L395


    """
    return _casadi.simpleIntegrator(*args)

def dae_reduce_index(*args):
    r"""
    dae_reduce_index(casadi::MXDict const & dae, casadi::Dict const & opts={}) -> casadi::MXDict
    dae_reduce_index(casadi::SXDict const & dae, casadi::Dict const & opts={}) -> casadi::SXDict


    [INTERNAL] 
    Reduce index.

    Index reduction leads to a new set of variables and equations.

    In the process, a set of constraints (algebraic equations or 
    derivatives) 
    a.k.a invariants is constructed that are invariant to the
     problem: whenever
     an initial point satisfies these constraints, the 
    boundary-value-problem 
    outcome will keep satisfying those constraints 
    automatically, even though 
    they are  not part of the reduced DAE.

    For any practical numerical integration method, there will be 
    numerical 
    drift away from satisfaction of those constraints. In other 
    words, you will
     see the value of invariants slowly moving away from 
    original zero.

    A classic mitigation technique is Baumgarte stabilization: you add 
    these 
    invariants to the reduced DAE as a correction term that acts in 
    a way to 
    make small (numerical) perturbations to the invariants decay 
    to the origin 
    as a dampened linear system.

    in which a certain set of constraints (algebraic equations or 
    derivatives) 
    has been dropped in favour of

    Parameters:
    -----------

    dae: 
    Expression dictionary describing the DAE

    Each value must be a dense column vector.

    keys:
    x_impl: symbol for implicit differential states

    dx_impl: symbol for implicit differential state derivatives

    z: symbol for algebraic variables

    alg: expression for algebraic equations

    t: symbol for time

    p: symbol for parameters

    Parameters:
    -----------

    opts: 
    Option dictionary

    'baumgarte_pole': double Poles (inverse time constants) of the 
    Baumgarte 
    invariant correction term. Must be <0 to dampen out 
    perturbations 0 
    (default) amounts to no correction. Corresponds to 
    -gamma of equation (1.5)
     in Ascher, Uri M., Hongsheng Chin, and 
    Sebastian Reich. "Stabilization of
     DAEs and invariant manifolds." 
    Numerische Mathematik 67.2 (1994): 
    131-149.

    Parameters:
    -----------

    stats: 
    Statistics

    Expression dictionary describing the reduced DAE

    In addition the fields allowed in the input DAE, the following keys 
    occur:

    x: symbol for explicit differential states

    ode: expression for right-hand-side of explicit differential states

    I: expression for invariants

    Extra doc: https://github.com/casadi/casadi/wiki/L_23h

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L1060

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L1060-L1062


    """
    return _casadi.dae_reduce_index(*args)

def dae_map_semi_expl(*args):
    r"""
    dae_map_semi_expl(casadi::MXDict const & dae, casadi::MXDict const & dae_red) -> casadi::MXDict
    dae_map_semi_expl(casadi::SXDict const & dae, casadi::SXDict const & dae_red) -> casadi::SXDict


    [INTERNAL] 
    Turn a reduced DAE into a semi explicit form suitable for CasADi

    integrator.

    Parameters:
    -----------

    dae: 
    Original (unreduced) DAE structure

    dae_red: 
    Reduced DAE (see dae_reduce_index)

    state_to_orig: 
    A mapping of integrator (semi explicit) states to states of 
    the 
    original DAE

    phi: 
    A function to compute the invariants of the reduced DAE Inputs:
    x and 
    z: (semi explicit) integrator states; typically integrator 
    outputs xf and 
    zf

    p: parameters

    t: time

    Semi explicit DAE dictionary, suitable to pass to a CasADi integrator

    See: 
     dae_reduce_index

    Extra doc: https://github.com/casadi/casadi/wiki/L_1su

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L1205

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L1205-L1208


    """
    return _casadi.dae_map_semi_expl(*args)

def dae_init_gen(*args):
    r"""
    dae_init_gen(casadi::MXDict const & dae, casadi::MXDict const & dae_red, std::string const & init_solver, casadi::DMDict const & init_strength=casadi::DMDict(), casadi::Dict const & init_solver_options=casadi::Dict()) -> Function
    dae_init_gen(casadi::SXDict const & dae, casadi::SXDict const & dae_red, std::string const & init_solver, casadi::DMDict const & init_strength=casadi::DMDict(), casadi::Dict const & init_solver_options=casadi::Dict()) -> Function


    [INTERNAL] 
    Obtain a generator  Function for producing consistent initial 
    guesses of a reduced DAE.

    Parameters:
    -----------

    dae: 
    Original (unreduced) DAE structure

    dae_red: 
    Reduced DAE (see dae_reduce_index)

    init_solver: 
    NLP solver plugin name for nlpsol used to construct an initial
     guess

    init_strength: 
    Influence the nature of the NLP Structure with keys x_impl, 
    dx_impl, z
     corresponding to inputs of init_gen Each key maps to a DM that 
    should
     match the variable size corresponding to that key. For each variable

    the meaning of the corresponding DM value is as follows: When >=0, 

    indicates that the provided initial guess is used in a quadratic 
    penalty 
    (value used as weight) When -1, indicates that the provided 
    initial guess 
    must be observed (simple bound on variable)

    init_solver_options: 
    NLP solver options to be passed to nlpsol

    init_gen A function to generate a consistent initial guess that can be
     used
     to pass to an integrator constructed from a semi explict reduced
     DAE 
    Inputs:
    x_impl, dx_impl, z: initial guesses in the original DAE space

    p: parameters

    t: time Outputs:

    x0, z0: (semi explicit) integrator states and algebraic variables; 

    typically used as input for integrators

    See: 
     dae_reduce_index

    Extra doc: https://github.com/casadi/casadi/wiki/L_1sv

    Doc source: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.hpp#L1215

    Implementation: 
    https://github.com/casadi/casadi/blob/develop/casadi/core/integration_tools.cpp#L1215-L1218


    """
    return _casadi.dae_init_gen(*args)

def detect_simple_bounds(*args):
    r"""
    detect_simple_bounds(SX xX, SX p, SX g, SX lbg, SX ubg)
    detect_simple_bounds(MX xX, MX p, MX g, MX lbg, MX ubg)


    [INTERNAL] 
    """
    return _casadi.detect_simple_bounds(*args)
class NlpBuilder(PrintableCommon):
    r"""


    [INTERNAL] 
    A symbolic NLP representation.

    Joel Andersson

    ::

      Extra doc: https://github.com/casadi/casadi/wiki/L_1e2 




    C++ includes: nlp_builder.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_casadi.NlpBuilder_x_get, doc=r"""x : std::vector<(casadi::MX,std::allocator<(casadi::MX)>)>""")
    f = property(_casadi.NlpBuilder_f_get, doc=r"""f : casadi::MX""")
    g = property(_casadi.NlpBuilder_g_get, doc=r"""g : std::vector<(casadi::MX,std::allocator<(casadi::MX)>)>""")
    x_lb = property(_casadi.NlpBuilder_x_lb_get, doc=r"""x_lb : std::vector<(double,std::allocator<(double)>)>""")
    x_ub = property(_casadi.NlpBuilder_x_ub_get, doc=r"""x_ub : std::vector<(double,std::allocator<(double)>)>""")
    g_lb = property(_casadi.NlpBuilder_g_lb_get, doc=r"""g_lb : std::vector<(double,std::allocator<(double)>)>""")
    g_ub = property(_casadi.NlpBuilder_g_ub_get, doc=r"""g_ub : std::vector<(double,std::allocator<(double)>)>""")
    x_init = property(_casadi.NlpBuilder_x_init_get, doc=r"""x_init : std::vector<(double,std::allocator<(double)>)>""")
    lambda_init = property(_casadi.NlpBuilder_lambda_init_get, doc=r"""lambda_init : std::vector<(double,std::allocator<(double)>)>""")
    discrete = property(_casadi.NlpBuilder_discrete_get, doc=r"""discrete : std::vector<(bool,std::allocator<(bool)>)>""")

    def import_nl(self, *args):
        r"""
        import_nl(NlpBuilder self, std::string const & filename, casadi::Dict const & opts=casadi::Dict())


        [INTERNAL] 
        Import an .nl file.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L74

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.cpp#L32-L35


        """
        return _casadi.NlpBuilder_import_nl(self, *args)

    def type_name(self, *args):
        r"""
        type_name(NlpBuilder self) -> std::string


        [INTERNAL] 
        Readable name of the class.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L77

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L77-L77


        """
        return _casadi.NlpBuilder_type_name(self, *args)

    def disp(self, *args):
        r"""
        disp(NlpBuilder self, bool more=False)


        [INTERNAL] 
        Print a description of the object.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L80

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.cpp#L37-L45


        """
        return _casadi.NlpBuilder_disp(self, *args)

    def str(self, *args):
        r"""
        str(NlpBuilder self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L83

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/nlp_builder.hpp#L83-L87


        """
        return _casadi.NlpBuilder_str(self, *args)

    def __init__(self, *args):
        r"""
        __init__(NlpBuilder self) -> NlpBuilder
        __init__(NlpBuilder self, NlpBuilder other) -> NlpBuilder
        """
        _casadi.NlpBuilder_swiginit(self, _casadi.new_NlpBuilder(*args))
    __swig_destroy__ = _casadi.delete_NlpBuilder

# Register NlpBuilder in _casadi:
_casadi.NlpBuilder_swigregister(NlpBuilder)
class DaeBuilder(SharedObject, PrintableCommon):
    r"""


    [INTERNAL] 
    A symbolic representation of a differential-algebraic equations 
    model.

    Variables:
    ==========





    ::

      t:      independent variable (usually time)
      c:      constants
      p:      parameters
      d:      dependent parameters (time independent)
      u:      controls
      w:      dependent variables  (time dependent)
      x:      differential states
      z:      algebraic variables
      q:      quadrature states
      y:      outputs




    Equations:
    ==========





    ::

      differential equations: \\dot{x} ==  ode(...)
      algebraic equations:          0 ==  alg(...)
      quadrature equations:   \\dot{q} == quad(...)
      dependent parameters:         d == ddef(d_prev,p)
      dependent variables:          w == wdef(w_prev,x,z,u,p,t)
      output equations:             y == ydef(...)
      initial equations:     init_lhs == init_rhs(...)
      events:      when when_cond < 0: when_lhs := when_rhs




    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_5c

    C++ includes: dae_builder.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def type_name(self, *args):
        r"""
        type_name(DaeBuilder self) -> std::string


        [INTERNAL] 
        Readable name of the class.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L74

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L74-L74


        """
        return _casadi.DaeBuilder_type_name(self, *args)

    def name(self, *args):
        r"""
        name(DaeBuilder self) -> std::string const &


        [INTERNAL] 
        Name of instance.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5d

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L86

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L59-L61


        """
        return _casadi.DaeBuilder_name(self, *args)

    def t(self, *args):
        r"""
        t(DaeBuilder self) -> MX


        [INTERNAL] 
        Independent variable (usually time)

        Extra doc: https://github.com/casadi/casadi/wiki/L_5e

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L93

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L63-L65


        """
        return _casadi.DaeBuilder_t(self, *args)

    def x(self, *args):
        r"""
        x(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Differential states.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5f

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L98

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L67-L69


        """
        return _casadi.DaeBuilder_x(self, *args)

    def ode(self, *args):
        r"""
        ode(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Ordinary differential equations (ODE)

        Extra doc: https://github.com/casadi/casadi/wiki/L_5g

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L103

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L71-L73


        """
        return _casadi.DaeBuilder_ode(self, *args)

    def z(self, *args):
        r"""
        z(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Algebraic variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5h

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L108

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L75-L77


        """
        return _casadi.DaeBuilder_z(self, *args)

    def alg(self, *args):
        r"""
        alg(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Algebraic equations.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5i

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L113

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L79-L81


        """
        return _casadi.DaeBuilder_alg(self, *args)

    def q(self, *args):
        r"""
        q(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Quadrature states.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5j

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L118

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L83-L85


        """
        return _casadi.DaeBuilder_q(self, *args)

    def quad(self, *args):
        r"""
        quad(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Quadrature equations.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5k

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L123

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L87-L89


        """
        return _casadi.DaeBuilder_quad(self, *args)

    def y(self, *args):
        r"""
        y(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
         Output variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5l

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L128

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L91-L93


        """
        return _casadi.DaeBuilder_y(self, *args)

    def ydef(self, *args):
        r"""
        ydef(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Definitions of output variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5m

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L133

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L95-L97


        """
        return _casadi.DaeBuilder_ydef(self, *args)

    def u(self, *args):
        r"""
        u(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Free controls.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5n

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L138

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L99-L101


        """
        return _casadi.DaeBuilder_u(self, *args)

    def p(self, *args):
        r"""
        p(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Parameters.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5o

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L143

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L103-L105


        """
        return _casadi.DaeBuilder_p(self, *args)

    def c(self, *args):
        r"""
        c(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Named constants.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5p

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L148

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L107-L109


        """
        return _casadi.DaeBuilder_c(self, *args)

    def cdef(self, *args):
        r"""
        cdef(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Definitions of named constants.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5q

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L153

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L111-L113


        """
        return _casadi.DaeBuilder_cdef(self, *args)

    def d(self, *args):
        r"""
        d(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Dependent parameters.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5r

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L158

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L115-L117


        """
        return _casadi.DaeBuilder_d(self, *args)

    def ddef(self, *args):
        r"""
        ddef(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Definitions of dependent parameters.

        Interdependencies are allowed but must be non-cyclic.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5s

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L165

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L119-L121


        """
        return _casadi.DaeBuilder_ddef(self, *args)

    def w(self, *args):
        r"""
        w(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Dependent variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5t

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L170

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L123-L125


        """
        return _casadi.DaeBuilder_w(self, *args)

    def wdef(self, *args):
        r"""
        wdef(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Dependent variables and corresponding definitions.

        Interdependencies are allowed but must be non-cyclic.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5u

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L177

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L127-L129


        """
        return _casadi.DaeBuilder_wdef(self, *args)

    def aux(self, *args):
        r"""
        aux(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        Auxiliary variables: Used e.g. to define functions.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5v

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L182

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L131-L133


        """
        return _casadi.DaeBuilder_aux(self, *args)

    def init_lhs(self, *args):
        r"""
        init_lhs(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        Initial conditions, left-hand-side.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5w

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L187

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L135-L137


        """
        return _casadi.DaeBuilder_init_lhs(self, *args)

    def init_rhs(self, *args):
        r"""
        init_rhs(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        Initial conditions, right-hand-side.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5x

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L192

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L139-L141


        """
        return _casadi.DaeBuilder_init_rhs(self, *args)

    def when_cond(self, *args):
        r"""
        when_cond(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        When statement: triggering condition.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5y

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L197

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L143-L145


        """
        return _casadi.DaeBuilder_when_cond(self, *args)

    def when_lhs(self, *args):
        r"""
        when_lhs(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        When statement: left-hand-side.

        Extra doc: https://github.com/casadi/casadi/wiki/L_5z

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L202

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L147-L149


        """
        return _casadi.DaeBuilder_when_lhs(self, *args)

    def when_rhs(self, *args):
        r"""
        when_rhs(DaeBuilder self) -> std::vector< casadi::MX,std::allocator< casadi::MX > > const &


        [INTERNAL] 
        When statement: right-hand-side.

        Extra doc: https://github.com/casadi/casadi/wiki/L_60

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L207

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L151-L153


        """
        return _casadi.DaeBuilder_when_rhs(self, *args)

    def outputs(self, *args):
        r"""
        outputs(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Model structure: outputs.

        Extra doc: https://github.com/casadi/casadi/wiki/L_61

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L213

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L155-L162


        """
        return _casadi.DaeBuilder_outputs(self, *args)

    def derivatives(self, *args):
        r"""
        derivatives(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Model structure: derivatives.

        Extra doc: https://github.com/casadi/casadi/wiki/L_62

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L218

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L164-L171


        """
        return _casadi.DaeBuilder_derivatives(self, *args)

    def initial_unknowns(self, *args):
        r"""
        initial_unknowns(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Model structure: initial unknowns.

        Extra doc: https://github.com/casadi/casadi/wiki/L_63

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L223

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L173-L180


        """
        return _casadi.DaeBuilder_initial_unknowns(self, *args)

    def has_t(self, *args):
        r"""
        has_t(DaeBuilder self) -> bool


        [INTERNAL] 
        Is there a time variable?

        Extra doc: https://github.com/casadi/casadi/wiki/L_64

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L231

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L182-L184


        """
        return _casadi.DaeBuilder_has_t(self, *args)

    def nx(self, *args):
        r"""
        nx(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Differential states.

        Extra doc: https://github.com/casadi/casadi/wiki/L_65

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L236

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L186-L188


        """
        return _casadi.DaeBuilder_nx(self, *args)

    def nz(self, *args):
        r"""
        nz(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Algebraic variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_66

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L241

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L190-L192


        """
        return _casadi.DaeBuilder_nz(self, *args)

    def nq(self, *args):
        r"""
        nq(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Quadrature states.

        Extra doc: https://github.com/casadi/casadi/wiki/L_67

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L246

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L194-L196


        """
        return _casadi.DaeBuilder_nq(self, *args)

    def ny(self, *args):
        r"""
        ny(DaeBuilder self) -> casadi_int


        [INTERNAL] 
         Output variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_68

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L251

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L198-L200


        """
        return _casadi.DaeBuilder_ny(self, *args)

    def nu(self, *args):
        r"""
        nu(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Free controls.

        Extra doc: https://github.com/casadi/casadi/wiki/L_69

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L256

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L202-L204


        """
        return _casadi.DaeBuilder_nu(self, *args)

    def np(self, *args):
        r"""
        np(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Parameters.

        Extra doc: https://github.com/casadi/casadi/wiki/L_6a

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L261

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L206-L208


        """
        return _casadi.DaeBuilder_np(self, *args)

    def nc(self, *args):
        r"""
        nc(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Named constants.

        Extra doc: https://github.com/casadi/casadi/wiki/L_6b

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L266

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L210-L212


        """
        return _casadi.DaeBuilder_nc(self, *args)

    def nd(self, *args):
        r"""
        nd(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Dependent parameters.

        Extra doc: https://github.com/casadi/casadi/wiki/L_6c

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L271

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L214-L216


        """
        return _casadi.DaeBuilder_nd(self, *args)

    def nw(self, *args):
        r"""
        nw(DaeBuilder self) -> casadi_int


        [INTERNAL] 
        Dependent variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_6d

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L276

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L218-L220


        """
        return _casadi.DaeBuilder_nw(self, *args)

    def add_t(self, *args):
        r"""
        add_t(DaeBuilder self, std::string const & name="t") -> MX


        [INTERNAL] 
        Add an independent variable (time)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L284

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L430-L435


        """
        return _casadi.DaeBuilder_add_t(self, *args)

    def add_p(self, *args):
        r"""
        add_p(DaeBuilder self, std::string const & name=std::string()) -> MX


        [INTERNAL] 
        Add a new parameter.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L287

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L437-L444


        """
        return _casadi.DaeBuilder_add_p(self, *args)

    def add_u(self, *args):
        r"""
        add_u(DaeBuilder self, std::string const & name=std::string()) -> MX


        [INTERNAL] 
        Add a new control.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L290

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L446-L453


        """
        return _casadi.DaeBuilder_add_u(self, *args)

    def add_x(self, *args):
        r"""
        add_x(DaeBuilder self, std::string const & name=std::string()) -> MX


        [INTERNAL] 
        Add a new differential state.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L293

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L455-L462


        """
        return _casadi.DaeBuilder_add_x(self, *args)

    def add_z(self, *args):
        r"""
        add_z(DaeBuilder self, std::string const & name=std::string()) -> MX


        [INTERNAL] 
        Add a new algebraic variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L296

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L464-L471


        """
        return _casadi.DaeBuilder_add_z(self, *args)

    def add_q(self, *args):
        r"""
        add_q(DaeBuilder self, std::string const & name=std::string()) -> MX


        [INTERNAL] 
        Add a new quadrature state.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L299

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L473-L480


        """
        return _casadi.DaeBuilder_add_q(self, *args)

    def add_c(self, *args):
        r"""
        add_c(DaeBuilder self, std::string const & name, MX new_cdef) -> MX


        [INTERNAL] 
        Add a new constant.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L302

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L482-L489


        """
        return _casadi.DaeBuilder_add_c(self, *args)

    def add_d(self, *args):
        r"""
        add_d(DaeBuilder self, std::string const & name, MX new_ddef) -> MX


        [INTERNAL] 
        Add a new dependent parameter.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L305

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L491-L498


        """
        return _casadi.DaeBuilder_add_d(self, *args)

    def add_w(self, *args):
        r"""
        add_w(DaeBuilder self, std::string const & name, MX new_wdef) -> MX


        [INTERNAL] 
        Add a new dependent variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L308

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L500-L507


        """
        return _casadi.DaeBuilder_add_w(self, *args)

    def add_y(self, *args):
        r"""
        add_y(DaeBuilder self, std::string const & name, MX new_ydef) -> MX


        [INTERNAL] 
        Add a new output.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L311

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L509-L516


        """
        return _casadi.DaeBuilder_add_y(self, *args)

    def set_ode(self, *args):
        r"""
        set_ode(DaeBuilder self, std::string const & name, MX ode_rhs)


        [INTERNAL] 
        Specify the ordinary differential equation for a state.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L314

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L535-L541


        """
        return _casadi.DaeBuilder_set_ode(self, *args)

    def set_alg(self, *args):
        r"""
        set_alg(DaeBuilder self, std::string const & name, MX alg_rhs)


        [INTERNAL] 
        Specificy the residual equation for an algebraic variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L317

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L543-L549


        """
        return _casadi.DaeBuilder_set_alg(self, *args)

    def add_aux(self, *args):
        r"""
        add_aux(DaeBuilder self, std::string const & name=std::string(), casadi_int n=1) -> MX


        [INTERNAL] 
        Add an auxiliary variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L320

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L518-L522


        """
        return _casadi.DaeBuilder_add_aux(self, *args)

    def add_init(self, *args):
        r"""
        add_init(DaeBuilder self, MX lhs, MX rhs)


        [INTERNAL] 
        Add an initial equation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L323

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L524-L527


        """
        return _casadi.DaeBuilder_add_init(self, *args)

    def add_when(self, *args):
        r"""
        add_when(DaeBuilder self, MX cond, MX lhs, MX rhs)


        [INTERNAL] 
        Add a when statement.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L326

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L529-L533


        """
        return _casadi.DaeBuilder_add_when(self, *args)

    def sanity_check(self, *args):
        r"""
        sanity_check(DaeBuilder self)


        [INTERNAL] 
        Check if dimensions match.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L329

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L551-L557


        """
        return _casadi.DaeBuilder_sanity_check(self, *args)

    def clear_all(self, *args):
        r"""
        clear_all(DaeBuilder self, std::string const & v)


        [INTERNAL] 
        Clear all variables of a type.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L333

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L414-L420


        """
        return _casadi.DaeBuilder_clear_all(self, *args)

    def set_all(self, *args):
        r"""
        set_all(DaeBuilder self, std::string const & v, std::vector< std::string,std::allocator< std::string > > const & name)


        [INTERNAL] 
        Set all variables of a type.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L336

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L422-L428


        """
        return _casadi.DaeBuilder_set_all(self, *args)

    def register_t(self, *args):
        r"""
        register_t(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_t(self, *args)

    def register_p(self, *args):
        r"""
        register_p(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_p(self, *args)

    def register_u(self, *args):
        r"""
        register_u(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_u(self, *args)

    def register_x(self, *args):
        r"""
        register_x(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_x(self, *args)

    def register_z(self, *args):
        r"""
        register_z(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_z(self, *args)

    def register_q(self, *args):
        r"""
        register_q(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_q(self, *args)

    def register_c(self, *args):
        r"""
        register_c(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_c(self, *args)

    def register_d(self, *args):
        r"""
        register_d(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_d(self, *args)

    def register_w(self, *args):
        r"""
        register_w(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_w(self, *args)

    def register_y(self, *args):
        r"""
        register_y(DaeBuilder self, std::string const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_register_y(self, *args)

    def set_u(self, *args):
        r"""
        set_u(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_set_u(self, *args)

    def set_x(self, *args):
        r"""
        set_x(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_set_x(self, *args)

    def set_z(self, *args):
        r"""
        set_z(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< std::string,std::allocator< std::string > > const & alg=std::vector< std::string >())


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_set_z(self, *args)

    def set_q(self, *args):
        r"""
        set_q(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_set_q(self, *args)

    def set_y(self, *args):
        r"""
        set_y(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_set_y(self, *args)

    def clear_in(self, *args):
        r"""
        clear_in(DaeBuilder self, std::string const & v)


        [DEPRECATED] Clear input variable: Replaced by clear_all

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L371

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L371-L371


        """
        return _casadi.DaeBuilder_clear_in(self, *args)

    def eliminate_w(self, *args):
        r"""
        eliminate_w(DaeBuilder self)


        [INTERNAL] 
        Eliminate all dependent variables.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L375

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L611-L617


        """
        return _casadi.DaeBuilder_eliminate_w(self, *args)

    def lift(self, *args):
        r"""
        lift(DaeBuilder self, bool lift_shared=True, bool lift_calls=True)


        [INTERNAL] 
        Lift problem formulation by extracting shared subexpressions.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L378

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L619-L625


        """
        return _casadi.DaeBuilder_lift(self, *args)

    def eliminate_quad(self, *args):
        r"""
        eliminate_quad(DaeBuilder self)


        [INTERNAL] 
        Eliminate quadrature states and turn them into ODE states.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L381

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L248-L254


        """
        return _casadi.DaeBuilder_eliminate_quad(self, *args)

    def sort_d(self, *args):
        r"""
        sort_d(DaeBuilder self)


        [INTERNAL] 
        Sort dependent parameters.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L384

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L256-L262


        """
        return _casadi.DaeBuilder_sort_d(self, *args)

    def sort_w(self, *args):
        r"""
        sort_w(DaeBuilder self)


        [INTERNAL] 
        Sort dependent variables.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L387

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L264-L270


        """
        return _casadi.DaeBuilder_sort_w(self, *args)

    def sort_z(self, *args):
        r"""
        sort_z(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & z_order)


        [INTERNAL] 
        Sort algebraic variables.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L390

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L272-L278


        """
        return _casadi.DaeBuilder_sort_z(self, *args)

    def prune(self, *args):
        r"""
        prune(DaeBuilder self, bool prune_p=True, bool prune_u=True)


        [INTERNAL] 
        Prune unused controls.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L393

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L280-L286


        """
        return _casadi.DaeBuilder_prune(self, *args)

    def tear(self, *args):
        r"""
        tear(DaeBuilder self)


        [INTERNAL] 
        Identify iteration variables and residual equations using naming

        convention.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L396

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L288-L294


        """
        return _casadi.DaeBuilder_tear(self, *args)

    def add_fun(self, *args):
        r"""
        add_fun(DaeBuilder self, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & arg, std::vector< std::string,std::allocator< std::string > > const & res, casadi::Dict const & opts=casadi::Dict()) -> Function
        add_fun(DaeBuilder self, Function f) -> Function
        add_fun(DaeBuilder self, std::string const & name, Importer compiler, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Add an external function.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L413

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L770-L773


        """
        return _casadi.DaeBuilder_add_fun(self, *args)

    def has_fun(self, *args):
        r"""
        has_fun(DaeBuilder self, std::string const & name) -> bool


        [INTERNAL] 
        Does a particular function already exist?

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L417

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L775-L782


        """
        return _casadi.DaeBuilder_has_fun(self, *args)

    def fun(self, *args):
        r"""
        fun(DaeBuilder self, std::string const & name) -> Function
        fun(DaeBuilder self) -> std::vector< casadi::Function,std::allocator< casadi::Function > >


        [INTERNAL] 
        Get all functions.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L423

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L814-L816


        """
        return _casadi.DaeBuilder_fun(self, *args)

    def gather_fun(self, *args):
        r"""
        gather_fun(DaeBuilder self, casadi_int max_depth=-1)


        [INTERNAL] 
        Collect embedded functions from the expression graph.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L426

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L793-L812


        """
        return _casadi.DaeBuilder_gather_fun(self, *args)

    def parse_fmi(self, *args):
        r"""
        parse_fmi(DaeBuilder self, std::string const & filename)


        [INTERNAL] 
        Import existing problem from FMI/XML

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L433

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L433-L433


        """
        return _casadi.DaeBuilder_parse_fmi(self, *args)

    def provides_directional_derivative(self, *args):
        r"""
        provides_directional_derivative(DaeBuilder self) -> bool


        [INTERNAL] 
        Does the FMU provide support for analytic derivatives.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L436

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L230-L238


        """
        return _casadi.DaeBuilder_provides_directional_derivative(self, *args)

    def load_fmi_description(self, *args):
        r"""
        load_fmi_description(DaeBuilder self, std::string const & filename)


        [INTERNAL] 
        Import problem description from FMI or XML.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L439

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L222-L228


        """
        return _casadi.DaeBuilder_load_fmi_description(self, *args)

    def export_fmu(self, *args):
        r"""
        export_fmu(DaeBuilder self, casadi::Dict const & opts=casadi::Dict()) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Export instance into an FMU.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L442

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L240-L246


        """
        return _casadi.DaeBuilder_export_fmu(self, *args)

    def add_lc(self, *args):
        r"""
        add_lc(DaeBuilder self, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & f_out)


        [INTERNAL] 
        Add a named linear combination of output expressions.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L445

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L711-L718


        """
        return _casadi.DaeBuilder_add_lc(self, *args)

    def create(self, *args):
        r"""
        create(DaeBuilder self, std::string const & fname, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, bool sx, bool lifted_calls=False) -> Function
        create(DaeBuilder self, std::string const & name, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        create(DaeBuilder self, std::string const & name, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Load a function from an FMU DLL, standard IO conforming with 

        simulator.

        Parameters:
        -----------

        name: 
        Name assigned to the resulting function object

        opts: 
        Optional settings

        Extra doc: https://github.com/casadi/casadi/wiki/L_6f

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L472

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L742-L749


        """
        return _casadi.DaeBuilder_create(self, *args)

    def dependent_fun(self, *args):
        r"""
        dependent_fun(DaeBuilder self, std::string const & fname, std::vector< std::string,std::allocator< std::string > > const & s_in, std::vector< std::string,std::allocator< std::string > > const & s_out) -> Function


        [INTERNAL] 
        Construct a function for evaluating dependent parameters.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L475

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L827-L836


        """
        return _casadi.DaeBuilder_dependent_fun(self, *args)

    def var(self, *args):
        r"""
        var(DaeBuilder self, std::string const & name) -> MX


        [INTERNAL] 
        Get variable expression by name

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L481

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L559-L566


        """
        return _casadi.DaeBuilder_var(self, *args)

    def __call__(self, *args):
        r"""__call__(DaeBuilder self, std::string const & name) -> MX"""
        return _casadi.DaeBuilder___call__(self, *args)

    def beq(self, *args):
        r"""
        beq(DaeBuilder self, std::string const & name) -> MX


        [INTERNAL] 
        Get/set the binding equation for a variable

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L490

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L594-L601


        """
        return _casadi.DaeBuilder_beq(self, *args)

    def set_beq(self, *args):
        r"""
        set_beq(DaeBuilder self, std::string const & name, MX val)


        [INTERNAL] 
        Get/set the binding equation for a variable

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L491

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L603-L609


        """
        return _casadi.DaeBuilder_set_beq(self, *args)

    def value_reference(self, *args):
        r"""
        value_reference(DaeBuilder self, std::string const & name) -> casadi_int


        [INTERNAL] 
        Get/set value reference

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L496

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L627-L629


        """
        return _casadi.DaeBuilder_value_reference(self, *args)

    def set_value_reference(self, *args):
        r"""
        set_value_reference(DaeBuilder self, std::string const & name, casadi_int val)


        [INTERNAL] 
        Get/set value reference

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L497

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L631-L633


        """
        return _casadi.DaeBuilder_set_value_reference(self, *args)

    def description(self, *args):
        r"""
        description(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set description

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L502

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L635-L637


        """
        return _casadi.DaeBuilder_description(self, *args)

    def set_description(self, *args):
        r"""
        set_description(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set description

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L503

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L639-L641


        """
        return _casadi.DaeBuilder_set_description(self, *args)

    def type(self, *args):
        r"""
        type(DaeBuilder self, std::string const & name, casadi_int fmi_version=3) -> std::string


        [INTERNAL] 
        Get/set the type

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L508

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L643-L652


        """
        return _casadi.DaeBuilder_type(self, *args)

    def set_type(self, *args):
        r"""
        set_type(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the type

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L509

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L654-L661


        """
        return _casadi.DaeBuilder_set_type(self, *args)

    def causality(self, *args):
        r"""
        causality(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set the causality

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L514

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L663-L665


        """
        return _casadi.DaeBuilder_causality(self, *args)

    def set_causality(self, *args):
        r"""
        set_causality(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the causality

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L515

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L667-L669


        """
        return _casadi.DaeBuilder_set_causality(self, *args)

    def variability(self, *args):
        r"""
        variability(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set the variability

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L520

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L671-L673


        """
        return _casadi.DaeBuilder_variability(self, *args)

    def set_variability(self, *args):
        r"""
        set_variability(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the variability

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L521

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L675-L677


        """
        return _casadi.DaeBuilder_set_variability(self, *args)

    def initial(self, *args):
        r"""
        initial(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set the initial property

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L526

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L679-L681


        """
        return _casadi.DaeBuilder_initial(self, *args)

    def set_initial(self, *args):
        r"""
        set_initial(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the initial property

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L527

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L683-L685


        """
        return _casadi.DaeBuilder_set_initial(self, *args)

    def unit(self, *args):
        r"""
        unit(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set the unit

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L532

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L687-L689


        """
        return _casadi.DaeBuilder_unit(self, *args)

    def set_unit(self, *args):
        r"""
        set_unit(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the unit

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L533

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L691-L693


        """
        return _casadi.DaeBuilder_set_unit(self, *args)

    def display_unit(self, *args):
        r"""
        display_unit(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get/set the display unit

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L538

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L695-L697


        """
        return _casadi.DaeBuilder_display_unit(self, *args)

    def set_display_unit(self, *args):
        r"""
        set_display_unit(DaeBuilder self, std::string const & name, std::string const & val)


        [INTERNAL] 
        Get/set the display unit

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L539

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L699-L701


        """
        return _casadi.DaeBuilder_set_display_unit(self, *args)

    def numel(self, *args):
        r"""
        numel(DaeBuilder self, std::string const & name) -> casadi_int


        [INTERNAL] 
        Get the number of elements of a variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L543

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L703-L705


        """
        return _casadi.DaeBuilder_numel(self, *args)

    def dimension(self, *args):
        r"""
        dimension(DaeBuilder self, std::string const & name) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        Get the dimensions of a variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L546

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L707-L709


        """
        return _casadi.DaeBuilder_dimension(self, *args)

    def der(self, *args):
        r"""
        der(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< std::string,std::allocator< std::string > >
        der(DaeBuilder self, std::string const & name) -> std::string


        [INTERNAL] 
        Get the time derivative of an expression, single variable.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L552

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L568-L581


        """
        return _casadi.DaeBuilder_der(self, *args)

    def reset(self, *args):
        r"""
        reset(DaeBuilder self)


        [INTERNAL] 
        """
        return _casadi.DaeBuilder_reset(self, *args)

    def attribute(self, *args):
        r"""
        attribute(DaeBuilder self, std::string const & a, std::string const & name) -> double
        attribute(DaeBuilder self, std::string const & a, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get an attribute.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L599

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L949-L957


        """
        return _casadi.DaeBuilder_attribute(self, *args)

    def set_attribute(self, *args):
        r"""
        set_attribute(DaeBuilder self, std::string const & a, std::string const & name, double val)
        set_attribute(DaeBuilder self, std::string const & a, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)


        [INTERNAL] 
        Set an attribute.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L602

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L967-L974


        """
        return _casadi.DaeBuilder_set_attribute(self, *args)

    def min(self, *args):
        r"""
        min(DaeBuilder self, std::string const & name) -> double
        min(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get the lower bound.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L606

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L985-L992


        """
        return _casadi.DaeBuilder_min(self, *args)

    def set_min(self, *args):
        r"""
        set_min(DaeBuilder self, std::string const & name, double val)
        set_min(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)


        [INTERNAL] 
        Set the lower bound.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L609

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1002-L1008


        """
        return _casadi.DaeBuilder_set_min(self, *args)

    def max(self, *args):
        r"""
        max(DaeBuilder self, std::string const & name) -> double
        max(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get the upper bound.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L612

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1019-L1026


        """
        return _casadi.DaeBuilder_max(self, *args)

    def set_max(self, *args):
        r"""
        set_max(DaeBuilder self, std::string const & name, double val)
        set_max(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)


        [INTERNAL] 
        Set the upper bound.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L615

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1036-L1042


        """
        return _casadi.DaeBuilder_set_max(self, *args)

    def nominal(self, *args):
        r"""
        nominal(DaeBuilder self, std::string const & name) -> double
        nominal(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get the nominal value.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L618

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1053-L1060


        """
        return _casadi.DaeBuilder_nominal(self, *args)

    def set_nominal(self, *args):
        r"""
        set_nominal(DaeBuilder self, std::string const & name, double val)
        set_nominal(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)


        [INTERNAL] 
        Set the nominal value.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L621

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1070-L1076


        """
        return _casadi.DaeBuilder_set_nominal(self, *args)

    def start(self, *args):
        r"""
        start(DaeBuilder self, std::string const & name) -> double
        start(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        Get the start attribute.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L624

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1088-L1095


        """
        return _casadi.DaeBuilder_start(self, *args)

    def set_start(self, *args):
        r"""
        set_start(DaeBuilder self, std::string const & name, double val)
        set_start(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)


        [INTERNAL] 
        Set the start attribute.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L627

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1105-L1111


        """
        return _casadi.DaeBuilder_set_start(self, *args)

    def set(self, *args):
        r"""
        set(DaeBuilder self, std::string const & name, double val)
        set(DaeBuilder self, std::string const & name, std::string const & val)
        set(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< double,std::allocator< double > > const & val)
        set(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name, std::vector< std::string,std::allocator< std::string > > const & val)


        [INTERNAL] 
        Set the current value (string)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L633

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1145-L1152


        """
        return _casadi.DaeBuilder_set(self, *args)

    def get(self, *args):
        r"""
        get(DaeBuilder self, std::string const & name) -> GenericType
        get(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & name) -> std::vector< casadi::GenericType,std::allocator< casadi::GenericType > >


        [INTERNAL] 
        Evaluate the values for a set of variables at the initial time.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L636

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1158-L1173


        """
        return _casadi.DaeBuilder_get(self, *args)

    def add_variable(self, *args):
        r"""
        add_variable(DaeBuilder self, std::string const & name, casadi_int n=1) -> MX
        add_variable(DaeBuilder self, std::string const & name, Sparsity sp) -> MX
        add_variable(DaeBuilder self, MX new_v)


        [INTERNAL] 
        Add a new variable from symbolic expressions.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L645

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L332-L335


        """
        return _casadi.DaeBuilder_add_variable(self, *args)

    def add_variable_new(self, *args):
        r"""
        add_variable_new(DaeBuilder self, std::string const & name, casadi_int n=1) -> size_t
        add_variable_new(DaeBuilder self, std::string const & name, Sparsity sp) -> size_t
        add_variable_new(DaeBuilder self, MX new_v) -> size_t


        [INTERNAL] 
        Add a new variable from symbolic expressions.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L654

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L347-L351


        """
        return _casadi.DaeBuilder_add_variable_new(self, *args)

    def has_variable(self, *args):
        r"""
        has_variable(DaeBuilder self, std::string const & name) -> bool


        [INTERNAL] 
        Check if a particular variable exists.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L657

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L296-L303


        """
        return _casadi.DaeBuilder_has_variable(self, *args)

    def all_variables(self, *args):
        r"""
        all_variables(DaeBuilder self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        Get a list of all variables.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L660

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L305-L312


        """
        return _casadi.DaeBuilder_all_variables(self, *args)

    def oracle(self, *args):
        r"""
        oracle(DaeBuilder self, bool sx=False, bool elim_w=False, bool lifted_calls=False) -> Function


        [INTERNAL] 
        Get the (cached) oracle, SX or  MX.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L663

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L818-L825


        """
        return _casadi.DaeBuilder_oracle(self, *args)

    def jac_sparsity(self, *args):
        r"""
        jac_sparsity(DaeBuilder self, std::vector< std::string,std::allocator< std::string > > const & onames, std::vector< std::string,std::allocator< std::string > > const & inames) -> Sparsity


        [INTERNAL] 
        Get Jacobian sparsity.

        Extra doc: https://github.com/casadi/casadi/wiki/L_6g

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.hpp#L668

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/dae_builder.cpp#L1175-L1183


        """
        return _casadi.DaeBuilder_jac_sparsity(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DaeBuilder self) -> DaeBuilder
        __init__(DaeBuilder self, std::string const & name, std::string const & path="", casadi::Dict const & opts=casadi::Dict()) -> DaeBuilder
        __init__(DaeBuilder self, DaeBuilder other) -> DaeBuilder
        """
        _casadi.DaeBuilder_swiginit(self, _casadi.new_DaeBuilder(*args))
    __swig_destroy__ = _casadi.delete_DaeBuilder

# Register DaeBuilder in _casadi:
_casadi.DaeBuilder_swigregister(DaeBuilder)
class XmlFile(SharedObject, PrintableCommon):
    r"""


    [INTERNAL] 
    XML parser.

    Can be used for parsing XML files into CasADi data structures.

    Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_7k

    C++ includes: xml_file.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def type_name(*args):
        r"""type_name() -> std::string"""
        return _casadi.XmlFile_type_name(*args)
    __swig_destroy__ = _casadi.delete_XmlFile

    @staticmethod
    def load_plugin(*args):
        r"""load_plugin(std::string const & name)"""
        return _casadi.XmlFile_load_plugin(*args)

    @staticmethod
    def doc(*args):
        r"""doc(std::string const & name) -> std::string"""
        return _casadi.XmlFile_doc(*args)

    def __init__(self, *args):
        r"""
        __init__(XmlFile self) -> XmlFile
        __init__(XmlFile self, std::string const & name) -> XmlFile
        __init__(XmlFile self, XmlFile other) -> XmlFile
        """
        _casadi.XmlFile_swiginit(self, _casadi.new_XmlFile(*args))

# Register XmlFile in _casadi:
_casadi.XmlFile_swigregister(XmlFile)
class SerializerBase(object):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _casadi.delete_SerializerBase

    def pack(self, *args):
        r"""
        pack(SerializerBase self, Sparsity e)
        pack(SerializerBase self, MX e)
        pack(SerializerBase self, DM e)
        pack(SerializerBase self, SX e)
        pack(SerializerBase self, Linsol e)
        pack(SerializerBase self, Function e)
        pack(SerializerBase self, GenericType e)
        pack(SerializerBase self, casadi_int const & e)
        pack(SerializerBase self, double const & e)
        pack(SerializerBase self, std::string const & e)
        pack(SerializerBase self, std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > > const & e)
        pack(SerializerBase self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & e)
        pack(SerializerBase self, std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > > const & e)
        pack(SerializerBase self, std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > > const & e)
        pack(SerializerBase self, std::vector< casadi::Linsol,std::allocator< casadi::Linsol > > const & e)
        pack(SerializerBase self, std::vector< casadi::Function,std::allocator< casadi::Function > > const & e)
        pack(SerializerBase self, std::vector< casadi::GenericType,std::allocator< casadi::GenericType > > const & e)
        pack(SerializerBase self, std::vector< casadi_int,std::allocator< casadi_int > > const & e)
        pack(SerializerBase self, std::vector< double,std::allocator< double > > const & e)
        pack(SerializerBase self, std::vector< std::string,std::allocator< std::string > > const & e)


        [INTERNAL] 
        """
        return _casadi.SerializerBase_pack(self, *args)
    _SERIALIZED_SPARSITY = _casadi.SerializerBase__SERIALIZED_SPARSITY
    
    _SERIALIZED_MX = _casadi.SerializerBase__SERIALIZED_MX
    
    _SERIALIZED_DM = _casadi.SerializerBase__SERIALIZED_DM
    
    _SERIALIZED_SX = _casadi.SerializerBase__SERIALIZED_SX
    
    _SERIALIZED_LINSOL = _casadi.SerializerBase__SERIALIZED_LINSOL
    
    _SERIALIZED_FUNCTION = _casadi.SerializerBase__SERIALIZED_FUNCTION
    
    _SERIALIZED_GENERICTYPE = _casadi.SerializerBase__SERIALIZED_GENERICTYPE
    
    _SERIALIZED_INT = _casadi.SerializerBase__SERIALIZED_INT
    
    _SERIALIZED_DOUBLE = _casadi.SerializerBase__SERIALIZED_DOUBLE
    
    _SERIALIZED_STRING = _casadi.SerializerBase__SERIALIZED_STRING
    
    _SERIALIZED_SPARSITY_VECTOR = _casadi.SerializerBase__SERIALIZED_SPARSITY_VECTOR
    
    _SERIALIZED_MX_VECTOR = _casadi.SerializerBase__SERIALIZED_MX_VECTOR
    
    _SERIALIZED_DM_VECTOR = _casadi.SerializerBase__SERIALIZED_DM_VECTOR
    
    _SERIALIZED_SX_VECTOR = _casadi.SerializerBase__SERIALIZED_SX_VECTOR
    
    _SERIALIZED_LINSOL_VECTOR = _casadi.SerializerBase__SERIALIZED_LINSOL_VECTOR
    
    _SERIALIZED_FUNCTION_VECTOR = _casadi.SerializerBase__SERIALIZED_FUNCTION_VECTOR
    
    _SERIALIZED_GENERICTYPE_VECTOR = _casadi.SerializerBase__SERIALIZED_GENERICTYPE_VECTOR
    
    _SERIALIZED_INT_VECTOR = _casadi.SerializerBase__SERIALIZED_INT_VECTOR
    
    _SERIALIZED_DOUBLE_VECTOR = _casadi.SerializerBase__SERIALIZED_DOUBLE_VECTOR
    
    _SERIALIZED_STRING_VECTOR = _casadi.SerializerBase__SERIALIZED_STRING_VECTOR
    

    @staticmethod
    def type_to_string(*args):
        r"""type_to_string(casadi::SerializerBase::SerializationType type) -> std::string"""
        return _casadi.SerializerBase_type_to_string(*args)

    def connect(self, *args):
        r"""
        connect(SerializerBase self, DeserializerBase s)


        [INTERNAL] 
        """
        return _casadi.SerializerBase_connect(self, *args)

    def reset(self, *args):
        r"""
        reset(SerializerBase self)


        [INTERNAL] 
        """
        return _casadi.SerializerBase_reset(self, *args)

# Register SerializerBase in _casadi:
_casadi.SerializerBase_swigregister(SerializerBase)
class DeserializerBase(object):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _casadi.delete_DeserializerBase

    def _pop_type(self, *args):
        r"""
        _pop_type(DeserializerBase self) -> casadi::SerializerBase::SerializationType


        [INTERNAL] 
        """
        return _casadi.DeserializerBase__pop_type(self, *args)

    def blind_unpack_sparsity(self, *args):
        r"""
        blind_unpack_sparsity(DeserializerBase self) -> Sparsity


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_sparsity(self, *args)

    def blind_unpack_mx(self, *args):
        r"""
        blind_unpack_mx(DeserializerBase self) -> MX


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_mx(self, *args)

    def blind_unpack_dm(self, *args):
        r"""
        blind_unpack_dm(DeserializerBase self) -> DM


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_dm(self, *args)

    def blind_unpack_sx(self, *args):
        r"""
        blind_unpack_sx(DeserializerBase self) -> SX


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_sx(self, *args)

    def blind_unpack_linsol(self, *args):
        r"""
        blind_unpack_linsol(DeserializerBase self) -> Linsol


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_linsol(self, *args)

    def blind_unpack_function(self, *args):
        r"""
        blind_unpack_function(DeserializerBase self) -> Function


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_function(self, *args)

    def blind_unpack_generictype(self, *args):
        r"""
        blind_unpack_generictype(DeserializerBase self) -> GenericType


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_generictype(self, *args)

    def blind_unpack_int(self, *args):
        r"""
        blind_unpack_int(DeserializerBase self) -> casadi_int


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_int(self, *args)

    def blind_unpack_double(self, *args):
        r"""
        blind_unpack_double(DeserializerBase self) -> double


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_double(self, *args)

    def blind_unpack_string(self, *args):
        r"""
        blind_unpack_string(DeserializerBase self) -> std::string


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_string(self, *args)

    def blind_unpack_sparsity_vector(self, *args):
        r"""
        blind_unpack_sparsity_vector(DeserializerBase self) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_sparsity_vector(self, *args)

    def blind_unpack_mx_vector(self, *args):
        r"""
        blind_unpack_mx_vector(DeserializerBase self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_mx_vector(self, *args)

    def blind_unpack_dm_vector(self, *args):
        r"""
        blind_unpack_dm_vector(DeserializerBase self) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_dm_vector(self, *args)

    def blind_unpack_sx_vector(self, *args):
        r"""
        blind_unpack_sx_vector(DeserializerBase self) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_sx_vector(self, *args)

    def blind_unpack_linsol_vector(self, *args):
        r"""
        blind_unpack_linsol_vector(DeserializerBase self) -> std::vector< casadi::Linsol,std::allocator< casadi::Linsol > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_linsol_vector(self, *args)

    def blind_unpack_function_vector(self, *args):
        r"""
        blind_unpack_function_vector(DeserializerBase self) -> std::vector< casadi::Function,std::allocator< casadi::Function > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_function_vector(self, *args)

    def blind_unpack_generictype_vector(self, *args):
        r"""
        blind_unpack_generictype_vector(DeserializerBase self) -> std::vector< casadi::GenericType,std::allocator< casadi::GenericType > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_generictype_vector(self, *args)

    def blind_unpack_int_vector(self, *args):
        r"""
        blind_unpack_int_vector(DeserializerBase self) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_int_vector(self, *args)

    def blind_unpack_double_vector(self, *args):
        r"""
        blind_unpack_double_vector(DeserializerBase self) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_double_vector(self, *args)

    def blind_unpack_string_vector(self, *args):
        r"""
        blind_unpack_string_vector(DeserializerBase self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_blind_unpack_string_vector(self, *args)

    def unpack_sparsity(self, *args):
        r"""
        unpack_sparsity(DeserializerBase self) -> Sparsity


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_sparsity(self, *args)

    def unpack_mx(self, *args):
        r"""
        unpack_mx(DeserializerBase self) -> MX


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_mx(self, *args)

    def unpack_dm(self, *args):
        r"""
        unpack_dm(DeserializerBase self) -> DM


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_dm(self, *args)

    def unpack_sx(self, *args):
        r"""
        unpack_sx(DeserializerBase self) -> SX


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_sx(self, *args)

    def unpack_linsol(self, *args):
        r"""
        unpack_linsol(DeserializerBase self) -> Linsol


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_linsol(self, *args)

    def unpack_function(self, *args):
        r"""
        unpack_function(DeserializerBase self) -> Function


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_function(self, *args)

    def unpack_generictype(self, *args):
        r"""
        unpack_generictype(DeserializerBase self) -> GenericType


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_generictype(self, *args)

    def unpack_int(self, *args):
        r"""
        unpack_int(DeserializerBase self) -> casadi_int


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_int(self, *args)

    def unpack_double(self, *args):
        r"""
        unpack_double(DeserializerBase self) -> double


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_double(self, *args)

    def unpack_string(self, *args):
        r"""
        unpack_string(DeserializerBase self) -> std::string


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_string(self, *args)

    def unpack_sparsity_vector(self, *args):
        r"""
        unpack_sparsity_vector(DeserializerBase self) -> std::vector< casadi::Sparsity,std::allocator< casadi::Sparsity > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_sparsity_vector(self, *args)

    def unpack_mx_vector(self, *args):
        r"""
        unpack_mx_vector(DeserializerBase self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_mx_vector(self, *args)

    def unpack_dm_vector(self, *args):
        r"""
        unpack_dm_vector(DeserializerBase self) -> std::vector< casadi::Matrix< double >,std::allocator< casadi::Matrix< double > > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_dm_vector(self, *args)

    def unpack_sx_vector(self, *args):
        r"""
        unpack_sx_vector(DeserializerBase self) -> std::vector< casadi::Matrix< casadi::SXElem >,std::allocator< casadi::Matrix< casadi::SXElem > > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_sx_vector(self, *args)

    def unpack_linsol_vector(self, *args):
        r"""
        unpack_linsol_vector(DeserializerBase self) -> std::vector< casadi::Linsol,std::allocator< casadi::Linsol > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_linsol_vector(self, *args)

    def unpack_function_vector(self, *args):
        r"""
        unpack_function_vector(DeserializerBase self) -> std::vector< casadi::Function,std::allocator< casadi::Function > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_function_vector(self, *args)

    def unpack_generictype_vector(self, *args):
        r"""
        unpack_generictype_vector(DeserializerBase self) -> std::vector< casadi::GenericType,std::allocator< casadi::GenericType > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_generictype_vector(self, *args)

    def unpack_int_vector(self, *args):
        r"""
        unpack_int_vector(DeserializerBase self) -> std::vector< casadi_int,std::allocator< casadi_int > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_int_vector(self, *args)

    def unpack_double_vector(self, *args):
        r"""
        unpack_double_vector(DeserializerBase self) -> std::vector< double,std::allocator< double > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_double_vector(self, *args)

    def unpack_string_vector(self, *args):
        r"""
        unpack_string_vector(DeserializerBase self) -> std::vector< std::string,std::allocator< std::string > >


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_unpack_string_vector(self, *args)

    def connect(self, *args):
        r"""
        connect(DeserializerBase self, SerializerBase s)


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_connect(self, *args)

    def reset(self, *args):
        r"""
        reset(DeserializerBase self)


        [INTERNAL] 
        """
        return _casadi.DeserializerBase_reset(self, *args)

    def unpack(self):
      type = SerializerBase.type_to_string(self._pop_type())
      f = getattr(self, "blind_unpack_"+type)
      return f()


# Register DeserializerBase in _casadi:
_casadi.DeserializerBase_swigregister(DeserializerBase)
class StringSerializer(SerializerBase):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StringSerializer self, casadi::Dict const & opts=casadi::Dict()) -> StringSerializer


        [INTERNAL] 
        Advanced serialization of CasADi objects.

        This class is intended for advanced users that want to circumvent the 

        restrictions of standard pickling/matlab save load, ie no raw SX/MX 
        symbols
         allowed.



        ::

          x = SX.sym('x');
          s = StringSerializer();
          s.pack(x);
          s.pack(sin(x));

          data = s.encode();

          s = StringDeserializer(data);
          a = s.unpack();
          b = s.unpack();




        Note: Saving SX/MX objects individually has a substantial overhead 
        (both 
        time and length of encoded string). You are encouraged to use 
        the 
        vector/list variants of 'save' for SX/MX to reduce the overhead.

        See: 
         Function::save,  Function::serialize,  StringDeserializer,  
        FileSerializer

        Extra doc: https://github.com/casadi/casadi/wiki/L_7o

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L203

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L37-L39


        """
        _casadi.StringSerializer_swiginit(self, _casadi.new_StringSerializer(*args))
    __swig_destroy__ = _casadi.delete_StringSerializer

    def encode(self, *args):
        r"""
        encode(StringSerializer self) -> std::string


        [INTERNAL] 
        Returns a string that holds the serialized objects.

        As a side effect, this method clears the internal buffer

        Extra doc: https://github.com/casadi/casadi/wiki/L_7p

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L211

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L85-L90


        """
        return _casadi.StringSerializer_encode(self, *args)

# Register StringSerializer in _casadi:
_casadi.StringSerializer_swigregister(StringSerializer)
class FileSerializer(SerializerBase):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FileSerializer self, std::string const & fname, casadi::Dict const & opts=casadi::Dict()) -> FileSerializer


        [INTERNAL] 
        Advanced serialization of CasADi objects.

        See: 
         StringSerializer,  FileDeserializer

        Extra doc: https://github.com/casadi/casadi/wiki/L_7q

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L221

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L41-L49


        """
        _casadi.FileSerializer_swiginit(self, _casadi.new_FileSerializer(*args))
    __swig_destroy__ = _casadi.delete_FileSerializer

# Register FileSerializer in _casadi:
_casadi.FileSerializer_swigregister(FileSerializer)
class StringDeserializer(DeserializerBase):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(StringDeserializer self, std::string const & string) -> StringDeserializer


        [INTERNAL] 
        Advanced deserialization of CasADi objects.

        See: 
         StringDeserializer

        Extra doc: https://github.com/casadi/casadi/wiki/L_7r

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L233

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L114-L117


        """
        _casadi.StringDeserializer_swiginit(self, _casadi.new_StringDeserializer(*args))
    __swig_destroy__ = _casadi.delete_StringDeserializer

    def decode(self, *args):
        r"""
        decode(StringDeserializer self, std::string const & string)


        [INTERNAL] 
        Sets the string to deserialize objects from.

        Extra doc: https://github.com/casadi/casadi/wiki/L_7s

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L240

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L91-L96


        """
        return _casadi.StringDeserializer_decode(self, *args)

# Register StringDeserializer in _casadi:
_casadi.StringDeserializer_swigregister(StringDeserializer)
class FileDeserializer(DeserializerBase):
    r"""


    [INTERNAL] C++ includes: serializer.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FileDeserializer self, std::string const & fname) -> FileDeserializer


        [INTERNAL] 
        Advanced deserialization of CasADi objects.

        See: 
         FileSerializer

        Extra doc: https://github.com/casadi/casadi/wiki/L_7t

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.hpp#L250

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/serializer.cpp#L106-L112


        """
        _casadi.FileDeserializer_swiginit(self, _casadi.new_FileDeserializer(*args))
    __swig_destroy__ = _casadi.delete_FileDeserializer

# Register FileDeserializer in _casadi:
_casadi.FileDeserializer_swigregister(FileDeserializer)
class Opti(PrintableCommon, SharedObject):
    r"""


    [INTERNAL] 
    A simplified interface for NLP modeling/solving.

    This class offers a view with model description facilities The API is 

    guaranteed to be stable.

    Example NLP:

    ::

        opti = casadi.Opti();

        x = opti.variable();
        y = opti.variable();

        opti.minimize(  (y-x^2)^2   );
        opti.subject_to( x^2+y^2==1 );
        opti.subject_to(     x+y>=1 );

        opti.solver('ipopt');
        sol = opti.solve();

        sol.value(x)
        sol.value(y)



    Example parametric NLP:

    ::

        opti = casadi.Opti();

        x = opti.variable(2,1);
        p = opti.parameter();

        opti.minimize(  (p*x(2)-x(1)^2)^2   );
        opti.subject_to( 1<=sum(x)<=2 );

        opti.solver('ipopt');

        opti.set_value(p, 3);
        sol = opti.solve();
        sol.value(x)

        opti.set_value(p, 5);
        sol = opti.solve();
        sol.value(x)



    Joris Gillis, Erik Lambrechts, Joel Andersson

    Extra doc: https://github.com/casadi/casadi/wiki/L_16

    C++ includes: optistack.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def _variable(self, *args):
        r"""
        _variable(Opti self, casadi_int n=1, casadi_int m=1, std::string const & attribute="full") -> MX


        [INTERNAL] 
        Create a decision variable (symbol)

        The order of creation matters. The order will be reflected in the 

        optimization problem. It is not required for decision variables to 
        actualy 
        appear in the optimization problem.

        Parameters:
        -----------

        n: 
        number of rows (default 1)

        m: 
        number of columnss (default 1)

        attribute: 
        'full' (default) or 'symmetric'

        Extra doc: https://github.com/casadi/casadi/wiki/L_18

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L112

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L51-L57


        """
        return _casadi.Opti__variable(self, *args)

    def _parameter(self, *args):
        r"""
        _parameter(Opti self, casadi_int n=1, casadi_int m=1, std::string const & attribute="full") -> MX


        [INTERNAL] 
        Create a parameter (symbol); fixed during optimization.

        The order of creation does not matter. It is not required for 
        parameter to 
        actualy appear in the optimization problem. Parameters 
        that do appear, must
         be given a value before the problem can be 
        solved.

        Parameters:
        -----------

        n: 
        number of rows (default 1)

        m: 
        number of columnss (default 1)

        attribute: 
        'full' (default) or 'symmetric'

        Extra doc: https://github.com/casadi/casadi/wiki/L_19

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L125

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L74-L80


        """
        return _casadi.Opti__parameter(self, *args)

    def minimize(self, *args):
        r"""
        minimize(Opti self, MX f)


        [INTERNAL] 
        Set objective.

        Objective must be a scalar. Default objective: 0 When method is called

        multiple times, the last call takes effect

        Extra doc: https://github.com/casadi/casadi/wiki/L_1a

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L133

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L82-L88


        """
        return _casadi.Opti_minimize(self, *args)

    def _subject_to(self, *args):
        r"""
        _subject_to(Opti self, MX g)
        _subject_to(Opti self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & g)
        _subject_to(Opti self)


        [INTERNAL] 
        Clear constraints.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L166

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L102-L108


        """
        return _casadi.Opti__subject_to(self, *args)

    def solver(self, *args):
        r"""
        solver(Opti self, std::string const & solver, casadi::Dict const & plugin_options=casadi::Dict(), casadi::Dict const & solver_options=casadi::Dict())


        [INTERNAL] 
        Set a solver.

        Parameters:
        -----------

        solver: 
        any of the nlpsol plugins can be used here In practice, not all 
        nlpsol
         plugins may be supported yet

        options: 
        passed on to nlpsol plugin No stability can be guaranteed about 
        this 
        part of the API

        options: 
        to be passed to nlpsol solver No stability can be guaranteed about

        this part of the API

        Extra doc: https://github.com/casadi/casadi/wiki/L_1c

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L178

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L111-L119


        """
        return _casadi.Opti_solver(self, *args)

    def set_initial(self, *args):
        r"""
        set_initial(Opti self, MX x, DM v)
        set_initial(Opti self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & assignments)


        [INTERNAL] 
        Set initial guess for decision variables

        ::

          * opti.set_initial(x, 2)
          * opti.set_initial(10*x(1), 2)
          * 



        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L190

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L128-L134


        """
        return _casadi.Opti_set_initial(self, *args)

    def set_value(self, *args):
        r"""
        set_value(Opti self, MX x, DM v)
        set_value(Opti self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & assignments)


        [INTERNAL] 
        Set value of parameter.

        Each parameter must be given a value before 'solve' can be called

        Extra doc: https://github.com/casadi/casadi/wiki/L_1d

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L200

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L145-L151


        """
        return _casadi.Opti_set_value(self, *args)

    def solve(self, *args):
        r"""
        solve(Opti self) -> OptiSol


        [INTERNAL] 
        Crunch the numbers; solve the problem.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L204

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L153-L159


        """
        return _casadi.Opti_solve(self, *args)

    def solve_limited(self, *args):
        r"""
        solve_limited(Opti self) -> OptiSol


        [INTERNAL] 
        Crunch the numbers; solve the problem.

        Allows the solver to return without error when an iteration or time 
        limit 
        is reached

        Extra doc: https://github.com/casadi/casadi/wiki/L_1e

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L212

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L161-L167


        """
        return _casadi.Opti_solve_limited(self, *args)

    def value(self, *args):
        r"""
        value(Opti self, MX x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM
        value(Opti self, DM x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM
        value(Opti self, SX x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM


        [INTERNAL] 
        Obtain value of expression at the current value

        In regular mode, teh current value is the converged solution In debug 
        mode,
         the value can be non-converged

        Parameters:
        -----------

        values: 
        Optional assignment expressions (e.g. x==3) to overrule the current

        value

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L225

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L186-L192


        """
        return _casadi.Opti_value(self, *args)

    def stats(self, *args):
        r"""
        stats(Opti self) -> casadi::Dict


        [INTERNAL] 
        Get statistics.

        nlpsol stats are passed as-is. No stability can be guaranteed about 
        this 
        part of the API

        Extra doc: https://github.com/casadi/casadi/wiki/L_1f

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L234

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L194-L200


        """
        return _casadi.Opti_stats(self, *args)

    def return_status(self, *args):
        r"""
        return_status(Opti self) -> std::string


        [INTERNAL] 
        Get return status of solver.



        ::

             passed as-is from nlpsol


        No stability can be guaranteed about this part of the API

        Extra doc: https://github.com/casadi/casadi/wiki/L_1g

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L242

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L202-L208


        """
        return _casadi.Opti_return_status(self, *args)

    def initial(self, *args):
        r"""
        initial(Opti self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        get assignment expressions for initial values

        Extra doc: https://github.com/casadi/casadi/wiki/L_266

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L247

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L210-L216


        """
        return _casadi.Opti_initial(self, *args)

    def value_variables(self, *args):
        r"""
        value_variables(Opti self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        get assignment expressions for latest values

        Extra doc: https://github.com/casadi/casadi/wiki/L_267

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L252

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L218-L224


        """
        return _casadi.Opti_value_variables(self, *args)

    def value_parameters(self, *args):
        r"""
        value_parameters(Opti self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.Opti_value_parameters(self, *args)

    def dual(self, *args):
        r"""
        dual(Opti self, MX m) -> MX


        [INTERNAL] 
        get the dual variable

        m must be a constraint expression. The returned value is still a 
        symbolic 
        expression. Use  value on it to obtain the numerical value.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1h

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L262

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L234-L240


        """
        return _casadi.Opti_dual(self, *args)

    def _nx(self, *args):
        r"""
        _nx(Opti self) -> casadi_int


        [INTERNAL] 
        Number of (scalarised) decision variables.

        Extra doc: https://github.com/casadi/casadi/wiki/L_268

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L267

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L242-L248


        """
        return _casadi.Opti__nx(self, *args)

    def _np(self, *args):
        r"""
        _np(Opti self) -> casadi_int


        [INTERNAL] 
        Number of (scalarised) parameters.

        Extra doc: https://github.com/casadi/casadi/wiki/L_269

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L272

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L250-L256


        """
        return _casadi.Opti__np(self, *args)

    def _ng(self, *args):
        r"""
        _ng(Opti self) -> casadi_int


        [INTERNAL] 
        Number of (scalarised) constraints.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26a

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L277

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L258-L264


        """
        return _casadi.Opti__ng(self, *args)

    def _x(self, *args):
        r"""
        _x(Opti self) -> MX


        [INTERNAL] 
        Get all (scalarised) decision variables as a symbolic column 
        vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26b

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L282

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L266-L272


        """
        return _casadi.Opti__x(self, *args)

    def _p(self, *args):
        r"""
        _p(Opti self) -> MX


        [INTERNAL] 
        Get all (scalarised) parameters as a symbolic column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26c

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L287

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L274-L280


        """
        return _casadi.Opti__p(self, *args)

    def _g(self, *args):
        r"""
        _g(Opti self) -> MX


        [INTERNAL] 
        Get all (scalarised) constraint expressions as a column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26d

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L292

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L282-L288


        """
        return _casadi.Opti__g(self, *args)

    def _f(self, *args):
        r"""
        _f(Opti self) -> MX


        [INTERNAL] 
        Get objective expression.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26e

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L297

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L290-L296


        """
        return _casadi.Opti__f(self, *args)

    def _lbg(self, *args):
        r"""
        _lbg(Opti self) -> MX


        [INTERNAL] 
        Get all (scalarised) bounds on constraints as a column vector.

        Extra doc: https://github.com/casadi/casadi/wiki/L_26f

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L302

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L298-L304


        """
        return _casadi.Opti__lbg(self, *args)

    def _ubg(self, *args):
        r"""
        _ubg(Opti self) -> MX


        [INTERNAL] 
        """
        return _casadi.Opti__ubg(self, *args)

    def _lam_g(self, *args):
        r"""
        _lam_g(Opti self) -> MX


        [INTERNAL] 
        Get all (scalarised) dual variables as a symbolic column vector.

        Useful for obtaining the Lagrange Hessian:

        ::

          * sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
          * sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
          * 



        Extra doc: https://github.com/casadi/casadi/wiki/L_1i

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L314

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L315-L321


        """
        return _casadi.Opti__lam_g(self, *args)

    def to_function(self, *args):
        r"""
        to_function(Opti self, std::string const & name, std::vector< casadi::MX,std::allocator< casadi::MX > > const & args, std::vector< casadi::MX,std::allocator< casadi::MX > > const & res, casadi::Dict const & opts=casadi::Dict()) -> Function
        to_function(Opti self, std::string const & name, std::vector< casadi::MX,std::allocator< casadi::MX > > const & args, std::vector< casadi::MX,std::allocator< casadi::MX > > const & res, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function
        to_function(Opti self, std::string const & name, std::map< std::string,casadi::MX,std::less< std::string >,std::allocator< std::pair< std::string const,casadi::MX > > > const & dict, std::vector< std::string,std::allocator< std::string > > const & name_in, std::vector< std::string,std::allocator< std::string > > const & name_out, casadi::Dict const & opts=casadi::Dict()) -> Function


        [INTERNAL] 
        Create a CasADi  Function from the  Opti solver.

        Parameters:
        -----------

        name: 
        Name of the resulting CasADi  Function

        args: 
        List of parameters and decision/dual variables (which can be given an

        initial guess) with the resulting  Function

        res: 
        List of expressions that will get evaluated at the optimal solution

        opts: 
        Standard CasADi Funcion options

        Extra doc: https://github.com/casadi/casadi/wiki/L_1j

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L336

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L341-L361


        """
        return _casadi.Opti_to_function(self, *args)

    @staticmethod
    def bounded(*args):
        r"""bounded(MX lb, MX expr, MX ub) -> MX"""
        return _casadi.Opti_bounded(*args)

    def _debug(self, *args):
        r"""
        _debug(Opti self) -> OptiAdvanced


        [INTERNAL] 
        Get a copy with advanced functionality.

        You get access to more methods, but you have no guarantees about API 

        stability

        The copy is effectively a deep copy: Updating the state of the copy 
        does 
        not update the original.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1l

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L362

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L733-L735


        """
        return _casadi.Opti__debug(self, *args)

    def _advanced(self, *args):
        r"""
        _advanced(Opti self) -> OptiAdvanced


        [INTERNAL] 
        Get a copy with advanced functionality.

        You get access to more methods, but you have no guarantees about API 

        stability

        The copy is effectively a deep copy: Updating the state of the copy 
        does 
        not update the original.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1m

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L372

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L736-L738


        """
        return _casadi.Opti__advanced(self, *args)

    def copy(self, *args):
        r"""
        copy(Opti self) -> Opti


        [INTERNAL] 
        Get a copy of the.

        The copy is effectively a deep copy: Updating the state of the copy 
        does 
        not update the original.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1n

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L380

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L739-L741


        """
        return _casadi.Opti_copy(self, *args)

    def update_user_dict(self, *args):
        r"""
        update_user_dict(Opti self, MX m, casadi::Dict const & meta)
        update_user_dict(Opti self, std::vector< casadi::MX,std::allocator< casadi::MX > > const & m, casadi::Dict const & meta)


        [INTERNAL] 
        """
        return _casadi.Opti_update_user_dict(self, *args)

    def user_dict(self, *args):
        r"""
        user_dict(Opti self, MX m) -> casadi::Dict


        [INTERNAL] 
        Get user data.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L391

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L392-L398


        """
        return _casadi.Opti_user_dict(self, *args)

    def type_name(self, *args):
        r"""
        type_name(Opti self) -> std::string


        [INTERNAL] 
        Readable name of the class.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L394

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L394-L394


        """
        return _casadi.Opti_type_name(self, *args)

    def disp(self, *args):
        r"""
        disp(Opti self, bool more=False)


        [INTERNAL] 
        Print representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L397

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L636-L656


        """
        return _casadi.Opti_disp(self, *args)

    def str(self, *args):
        r"""
        str(Opti self, bool more=False) -> std::string


        [INTERNAL] 
        Get string representation.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L400

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L658-L662


        """
        return _casadi.Opti_str(self, *args)

    def callback_class(self, *args):
        r"""
        callback_class(Opti self, OptiCallback callback)
        callback_class(Opti self)


        [INTERNAL] 
        Helper methods for callback()

        Do not use directly.

        Extra doc: https://github.com/casadi/casadi/wiki/L_1p

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L409

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L371-L377


        """
        return _casadi.Opti_callback_class(self, *args)

    @property
    def debug(self):
      return self._debug()


    @property
    def advanced(self):
      return self._advanced()


    @property
    def f(self):
      return self._f()


    @property
    def g(self):
      return self._g()


    @property
    def x(self):
      return self._x()


    @property
    def p(self):
      return self._p()


    @property
    def lam_g(self):
      return self._lam_g()


    @property
    def lbg(self):
      return self._lbg()


    @property
    def ubg(self):
      return self._ubg()


    @property
    def nx(self):
      return self._nx()


    @property
    def np(self):
      return self._np()


    @property
    def ng(self):
      return self._ng()


    @property
    def casadi_solver(self):
      return self._casadi_solver()


    def parameter(self,*args):
      import sys
      import os
      try:
          frame = sys._getframe(1)
      except:
          frame = {}
      meta = {} if frame is None else {"stacktrace": {"file":os.path.abspath(frame.f_code.co_filename),"line":frame.f_lineno,"name":frame.f_code.co_name}}
      ret = self._parameter(*args)
      if len(meta)>0:
          self.update_user_dict(ret, meta)
      return ret

    def variable(self,*args):
      import sys
      import os
      try:
          frame = sys._getframe(1)
      except:
          frame = {}
      meta = {} if frame is None else {"stacktrace": {"file":os.path.abspath(frame.f_code.co_filename),"line":frame.f_lineno,"name":frame.f_code.co_name}}
      ret = self._variable(*args)
      if len(meta)>0:
          self.update_user_dict(ret, meta)
      return ret

    def subject_to(self,*args):
      if len(args)==0:
        return self._subject_to()
      import sys
      import os
      try:
          frame = sys._getframe(1)
      except:
          frame = {}
      meta = {} if frame is None else {"stacktrace": {"file":os.path.abspath(frame.f_code.co_filename),"line":frame.f_lineno,"name":frame.f_code.co_name}}
      ret = self._subject_to(*args)
      if len(meta)>0:
          self.update_user_dict(args[0], meta)
      return ret



    @staticmethod
    def _callback(self,fh=None):
      if fh is None:
        self.callback_class();
        return
      class OptiCallbackHelper(OptiCallback):
          def __init__(self, callback):
            OptiCallback.__init__(self)
            self.callback = callback

          def call(self, i):
            self.callback(i)

      self._fh = fh
      self._cb = OptiCallbackHelper(fh);
      self.callback_class(self._cb);


    def callback(self,fh=None):
      self._callback(self,fh)




    def __init__(self, *args):
        r"""
        __init__(Opti self, std::string const & problem_type="nlp") -> Opti
        __init__(Opti self, Opti other) -> Opti
        """
        _casadi.Opti_swiginit(self, _casadi.new_Opti(*args))
    __swig_destroy__ = _casadi.delete_Opti

# Register Opti in _casadi:
_casadi.Opti_swigregister(Opti)
OPTI_GENERIC_EQUALITY = _casadi.OPTI_GENERIC_EQUALITY

OPTI_GENERIC_INEQUALITY = _casadi.OPTI_GENERIC_INEQUALITY

OPTI_EQUALITY = _casadi.OPTI_EQUALITY

OPTI_INEQUALITY = _casadi.OPTI_INEQUALITY

OPTI_DOUBLE_INEQUALITY = _casadi.OPTI_DOUBLE_INEQUALITY

OPTI_PSD = _casadi.OPTI_PSD

OPTI_UNKNOWN = _casadi.OPTI_UNKNOWN

OPTI_VAR = _casadi.OPTI_VAR

OPTI_PAR = _casadi.OPTI_PAR

OPTI_DUAL_G = _casadi.OPTI_DUAL_G

class IndexAbstraction(object):
    r"""Proxy of C++ casadi::IndexAbstraction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_casadi.IndexAbstraction_start_get, doc=r"""start : casadi_int""")
    stop = property(_casadi.IndexAbstraction_stop_get, doc=r"""stop : casadi_int""")

    def __init__(self, *args):
        r"""
        __init__(IndexAbstraction self) -> IndexAbstraction
        __init__(IndexAbstraction self, IndexAbstraction other) -> IndexAbstraction
        """
        _casadi.IndexAbstraction_swiginit(self, _casadi.new_IndexAbstraction(*args))
    __swig_destroy__ = _casadi.delete_IndexAbstraction

# Register IndexAbstraction in _casadi:
_casadi.IndexAbstraction_swigregister(IndexAbstraction)
class MetaCon(IndexAbstraction):
    r"""Proxy of C++ casadi::MetaCon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    original = property(_casadi.MetaCon_original_get, doc=r"""original : casadi::MX""")
    canon = property(_casadi.MetaCon_canon_get, doc=r"""canon : casadi::MX""")
    type = property(_casadi.MetaCon_type_get, doc=r"""type : casadi::ConstraintType""")
    lb = property(_casadi.MetaCon_lb_get, doc=r"""lb : casadi::MX""")
    ub = property(_casadi.MetaCon_ub_get, doc=r"""ub : casadi::MX""")
    n = property(_casadi.MetaCon_n_get, doc=r"""n : casadi_int""")
    flipped = property(_casadi.MetaCon_flipped_get, doc=r"""flipped : bool""")
    dual_canon = property(_casadi.MetaCon_dual_canon_get, doc=r"""dual_canon : casadi::MX""")
    dual = property(_casadi.MetaCon_dual_get, doc=r"""dual : casadi::MX""")
    extra = property(_casadi.MetaCon_extra_get, doc=r"""extra : casadi::Dict""")

    def __init__(self, *args):
        r"""
        __init__(MetaCon self) -> MetaCon
        __init__(MetaCon self, MetaCon other) -> MetaCon
        """
        _casadi.MetaCon_swiginit(self, _casadi.new_MetaCon(*args))
    __swig_destroy__ = _casadi.delete_MetaCon

# Register MetaCon in _casadi:
_casadi.MetaCon_swigregister(MetaCon)
class MetaVar(IndexAbstraction):
    r"""Proxy of C++ casadi::MetaVar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attribute = property(_casadi.MetaVar_attribute_get, doc=r"""attribute : std::string""")
    n = property(_casadi.MetaVar_n_get, doc=r"""n : casadi_int""")
    m = property(_casadi.MetaVar_m_get, doc=r"""m : casadi_int""")
    type = property(_casadi.MetaVar_type_get, doc=r"""type : casadi::VariableType""")
    count = property(_casadi.MetaVar_count_get, doc=r"""count : casadi_int""")
    i = property(_casadi.MetaVar_i_get, doc=r"""i : casadi_int""")
    active_i = property(_casadi.MetaVar_active_i_get, doc=r"""active_i : casadi_int""")
    extra = property(_casadi.MetaVar_extra_get, doc=r"""extra : casadi::Dict""")

    def __init__(self, *args):
        r"""
        __init__(MetaVar self) -> MetaVar
        __init__(MetaVar self, MetaVar other) -> MetaVar
        """
        _casadi.MetaVar_swiginit(self, _casadi.new_MetaVar(*args))
    __swig_destroy__ = _casadi.delete_MetaVar

# Register MetaVar in _casadi:
_casadi.MetaVar_swigregister(MetaVar)
class OptiCallback(object):
    r"""


    [INTERNAL] C++ includes: optistack.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OptiCallback self) -> OptiCallback
        __init__(OptiCallback self, OptiCallback obj) -> OptiCallback


        [INTERNAL] 
        """
        if self.__class__ == OptiCallback:
            _self = None
        else:
            _self = self
        _casadi.OptiCallback_swiginit(self, _casadi.new_OptiCallback(_self, *args))

    def call(self, *args):
        r"""
        call(OptiCallback self, casadi_int i)


        [INTERNAL] 
        """
        return _casadi.OptiCallback_call(self, *args)
    __swig_destroy__ = _casadi.delete_OptiCallback
    def __disown__(self):
        self.this.disown()
        _casadi.disown_OptiCallback(self)
        return weakref.proxy(self)

# Register OptiCallback in _casadi:
_casadi.OptiCallback_swigregister(OptiCallback)
class OptiAdvanced(Opti):
    r"""


    [INTERNAL] C++ includes: optistack.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _casadi.delete_OptiAdvanced

    def _casadi_solver(self, *args):
        r"""
        _casadi_solver(OptiAdvanced self) -> Function


        [INTERNAL] 
        Get the underlying CasADi solver of the  Opti stack.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L511

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L400-L406


        """
        return _casadi.OptiAdvanced__casadi_solver(self, *args)

    def is_parametric(self, *args):
        r"""
        is_parametric(OptiAdvanced self, MX expr) -> bool


        [INTERNAL] 
        return true if expression is only dependant on  Opti parameters,
         not variables

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L514

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L408-L414


        """
        return _casadi.OptiAdvanced_is_parametric(self, *args)

    def symvar(self, *args):
        r"""
        symvar(OptiAdvanced self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
        symvar(OptiAdvanced self, MX expr) -> std::vector< casadi::MX,std::allocator< casadi::MX > >
        symvar(OptiAdvanced self, MX expr, casadi::VariableType type) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        Get symbols present in expression.

        Returned vector is ordered according to the order of  variable()/parameter()
         calls used to create the variables

        Extra doc: https://github.com/casadi/casadi/wiki/L_1u

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L525

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L432-L438


        """
        return _casadi.OptiAdvanced_symvar(self, *args)

    def canon_expr(self, *args):
        r"""
        canon_expr(OptiAdvanced self, MX expr) -> MetaCon


        [INTERNAL] 
        Interpret an expression (for internal use only)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L529

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L440-L446


        """
        return _casadi.OptiAdvanced_canon_expr(self, *args)

    def get_meta(self, *args):
        r"""
        get_meta(OptiAdvanced self, MX m) -> MetaVar


        [INTERNAL] 
        Get meta-data of symbol (for internal use only)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L532

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L448-L454


        """
        return _casadi.OptiAdvanced_get_meta(self, *args)

    def get_meta_con(self, *args):
        r"""
        get_meta_con(OptiAdvanced self, MX m) -> MetaCon


        [INTERNAL] 
        Get meta-data of symbol (for internal use only)

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L535

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L456-L462


        """
        return _casadi.OptiAdvanced_get_meta_con(self, *args)

    def set_meta(self, *args):
        r"""
        set_meta(OptiAdvanced self, MX m, MetaVar meta)


        [INTERNAL] 
        Set meta-data of an expression.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L538

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L464-L470


        """
        return _casadi.OptiAdvanced_set_meta(self, *args)

    def set_meta_con(self, *args):
        r"""
        set_meta_con(OptiAdvanced self, MX m, MetaCon meta)


        [INTERNAL] 
        Set meta-data of an expression.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L541

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L472-L478


        """
        return _casadi.OptiAdvanced_set_meta_con(self, *args)

    def assert_active_symbol(self, *args):
        r"""
        assert_active_symbol(OptiAdvanced self, MX m)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_assert_active_symbol(self, *args)

    def active_symvar(self, *args):
        r"""
        active_symvar(OptiAdvanced self, casadi::VariableType type) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_active_symvar(self, *args)

    def active_values(self, *args):
        r"""
        active_values(OptiAdvanced self, casadi::VariableType type) -> std::vector< casadi::DM,std::allocator< casadi::DM > >


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_active_values(self, *args)

    def x_lookup(self, *args):
        r"""
        x_lookup(OptiAdvanced self, casadi_index i) -> MX


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_x_lookup(self, *args)

    def g_lookup(self, *args):
        r"""
        g_lookup(OptiAdvanced self, casadi_index i) -> MX


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_g_lookup(self, *args)

    def x_describe(self, *args):
        r"""
        x_describe(OptiAdvanced self, casadi_index i) -> std::string


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_x_describe(self, *args)

    def g_describe(self, *args):
        r"""
        g_describe(OptiAdvanced self, casadi_index i) -> std::string


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_g_describe(self, *args)

    def describe(self, *args):
        r"""
        describe(OptiAdvanced self, MX x, casadi_index indent=0) -> std::string


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_describe(self, *args)

    def show_infeasibilities(self, *args):
        r"""
        show_infeasibilities(OptiAdvanced self, double tol=0)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_show_infeasibilities(self, *args)

    def solve_prepare(self, *args):
        r"""
        solve_prepare(OptiAdvanced self)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_solve_prepare(self, *args)

    def solve_actual(self, *args):
        r"""
        solve_actual(OptiAdvanced self, casadi::DMDict const & args) -> casadi::DMDict


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_solve_actual(self, *args)

    def arg(self, *args):
        r"""
        arg(OptiAdvanced self) -> casadi::DMDict


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_arg(self, *args)

    def res(self, *args):
        r"""
        res(OptiAdvanced self, casadi::DMDict const & res)
        res(OptiAdvanced self) -> casadi::DMDict


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_res(self, *args)

    def constraints(self, *args):
        r"""
        constraints(OptiAdvanced self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_constraints(self, *args)

    def objective(self, *args):
        r"""
        objective(OptiAdvanced self) -> MX


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_objective(self, *args)

    def baked_copy(self, *args):
        r"""
        baked_copy(OptiAdvanced self) -> OptiAdvanced


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_baked_copy(self, *args)

    def assert_empty(self, *args):
        r"""
        assert_empty(OptiAdvanced self)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_assert_empty(self, *args)

    def bake(self, *args):
        r"""
        bake(OptiAdvanced self)


        [INTERNAL] 
        Fix the structure of the optimization problem.

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L572

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L664-L670


        """
        return _casadi.OptiAdvanced_bake(self, *args)
    problem_dirty_ = property(_casadi.OptiAdvanced_problem_dirty__get, doc=r"""problem_dirty_ : bool""")

    def mark_problem_dirty(self, *args):
        r"""
        mark_problem_dirty(OptiAdvanced self, bool flag=True)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_mark_problem_dirty(self, *args)

    def problem_dirty(self, *args):
        r"""
        problem_dirty(OptiAdvanced self) -> bool


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_problem_dirty(self, *args)
    solver_dirty_ = property(_casadi.OptiAdvanced_solver_dirty__get, doc=r"""solver_dirty_ : bool""")

    def mark_solver_dirty(self, *args):
        r"""
        mark_solver_dirty(OptiAdvanced self, bool flag=True)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_mark_solver_dirty(self, *args)

    def solver_dirty(self, *args):
        r"""
        solver_dirty(OptiAdvanced self) -> bool


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_solver_dirty(self, *args)
    solved_ = property(_casadi.OptiAdvanced_solved__get, doc=r"""solved_ : bool""")

    def mark_solved(self, *args):
        r"""
        mark_solved(OptiAdvanced self, bool flag=True)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_mark_solved(self, *args)

    def solved(self, *args):
        r"""
        solved(OptiAdvanced self) -> bool


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_solved(self, *args)

    def assert_solved(self, *args):
        r"""
        assert_solved(OptiAdvanced self)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_assert_solved(self, *args)

    def assert_baked(self, *args):
        r"""
        assert_baked(OptiAdvanced self)


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_assert_baked(self, *args)

    def instance_number(self, *args):
        r"""
        instance_number(OptiAdvanced self) -> casadi_int


        [INTERNAL] 
        """
        return _casadi.OptiAdvanced_instance_number(self, *args)

    def __init__(self, *args):
        r"""
        __init__(OptiAdvanced self, Opti x) -> OptiAdvanced
        __init__(OptiAdvanced self, OptiAdvanced other) -> OptiAdvanced
        """
        _casadi.OptiAdvanced_swiginit(self, _casadi.new_OptiAdvanced(*args))

# Register OptiAdvanced in _casadi:
_casadi.OptiAdvanced_swigregister(OptiAdvanced)
class OptiSol(PrintableCommon):
    r"""


    [INTERNAL] 
    A simplified interface for NLP modeling/solving.

    This class offers a view with solution retrieval facilities The API is

    guaranteed to be stable.

    Joris Gillis, Erik Lambrechts

    Extra doc: https://github.com/casadi/casadi/wiki/L_1v

    C++ includes: optistack.hpp

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def type_name(self, *args):
        r"""
        type_name(OptiSol self) -> std::string


        [INTERNAL] 
        """
        return _casadi.OptiSol_type_name(self, *args)

    def disp(self, *args):
        r"""
        disp(OptiSol self, bool more=False)


        [INTERNAL] 
        """
        return _casadi.OptiSol_disp(self, *args)

    def str(self, *args):
        r"""
        str(OptiSol self, bool more=False) -> std::string


        [INTERNAL] 
        """
        return _casadi.OptiSol_str(self, *args)

    def value(self, *args):
        r"""
        value(OptiSol self, MX x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM
        value(OptiSol self, DM x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM
        value(OptiSol self, SX x, std::vector< casadi::MX,std::allocator< casadi::MX > > const & values=std::vector< casadi::MX >()) -> DM


        [INTERNAL] 
        Obtain value of expression at the current value

        In regular mode, teh current value is the converged solution In debug 
        mode,
         the value can be non-converged

        Parameters:
        -----------

        values: 
        Optional assignment expressions (e.g. x==3) to overrule the current

        value

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L622

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L760-L762


        """
        return _casadi.OptiSol_value(self, *args)

    def value_variables(self, *args):
        r"""
        value_variables(OptiSol self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        get assignment expressions for the optimal solution

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L626

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L764-L766


        """
        return _casadi.OptiSol_value_variables(self, *args)

    def value_parameters(self, *args):
        r"""
        value_parameters(OptiSol self) -> std::vector< casadi::MX,std::allocator< casadi::MX > >


        [INTERNAL] 
        """
        return _casadi.OptiSol_value_parameters(self, *args)

    def stats(self, *args):
        r"""
        stats(OptiSol self) -> casadi::Dict


        [INTERNAL] 
        Get statistics.

        nlpsol stats are passed as-is. No stability can be guaranteed about 
        this 
        part of the API

        Extra doc: https://github.com/casadi/casadi/wiki/L_1w

        Doc source: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.hpp#L635

        Implementation: 
        https://github.com/casadi/casadi/blob/develop/casadi/core/optistack.cpp#L772-L774


        """
        return _casadi.OptiSol_stats(self, *args)

    def _opti(self, *args):
        r"""
        _opti(OptiSol self) -> Opti


        [INTERNAL] 
        """
        return _casadi.OptiSol__opti(self, *args)

    @property
    def opti(self):
      return self._opti()


    @property
    def debug(self):
      return self._debug()


    def __init__(self, *args):
        r"""__init__(OptiSol self, OptiSol other) -> OptiSol"""
        _casadi.OptiSol_swiginit(self, _casadi.new_OptiSol(*args))
    __swig_destroy__ = _casadi.delete_OptiSol

# Register OptiSol in _casadi:
_casadi.OptiSol_swigregister(OptiSol)

